<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EntityFramework</name>
    </assembly>
    <members>
        <member name="T:System.Data.Edm.Strings">
            <summary>
               Strongly-typed and parameterized string resources.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmPrimitiveType_SetPropertyNotSupported(System.Object)">
            <summary>
            A string like "The '{0}' property of EdmPrimitiveType is fixed and cannot be set."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmRowType_SetPropertyNotSupported(System.Object)">
            <summary>
            A string like "The '{0}' property of EdmRowType is fixed and cannot be set."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_SystemNamespaceEncountered(System.Object)">
            <summary>
            A string like "The namespace '{0}' is a system namespace and cannot be used by other schemas. Choose another namespace name."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_SimilarRelationshipEnd(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "Role '{0}' in '{1}' and '{2}' AssociationSet refers to the same EntitySet '{3}' in EntityContainer '{4}'. Make sure that if two or more AssociationSet refer to the same AssociationType, the ends must not refer to the same EntitySet."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidEntitySetNameReference(System.Object,System.Object)">
            <summary>
            A string like "The referenced EntitySet {0} for End {1} could not be found in the containing EntityContainer."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_ConcurrencyRedefinedOnSubTypeOfEntitySetType(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Type '{0}' is derived from the type '{1}' that is the type for EntitySet '{2}'. Type '{0}' defines new concurrency requirements that are not allowed for sub types of base EntitySet types."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_EntitySetTypeHasNoKeys(System.Object,System.Object)">
            <summary>
            A string like "The EntitySet {0} is based on type {1} that has no keys defined."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_DuplicateEndName(System.Object)">
            <summary>
            A string like "The End Name {0} is already defined."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_DuplicatePropertyNameSpecifiedInEntityKey(System.Object,System.Object)">
            <summary>
            A string like "Key specified in EntityType '{0}' is not valid. Property '{1}' is referenced more than once in the Key element."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidCollectionKindNotCollection(System.Object)">
            <summary>
            A string like "Property '{0}' has a CollectionKind specified but is not a collection property."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidCollectionKindNotV1_1(System.Object)">
            <summary>
            A string like "Property '{0}' has a CollectionKind specified. CollectionKind is only supported in version 1.1 EDM models."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidComplexTypeAbstract(System.Object)">
            <summary>
            A string like "ComplexType '{0}' is marked as abstract. Abstract ComplexTypes are only supported in version 1.1 EDM models."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidComplexTypePolymorphic(System.Object)">
            <summary>
            A string like "ComplexType '{0}' has a BaseType specified. ComplexType inheritance is only supported in version 1.1 EDM models."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidKeyNullablePart(System.Object,System.Object)">
            <summary>
            A string like "Key Part: '{0}' for type {1} is not valid. All parts of the key must be non nullable."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_EntityKeyMustBeScalar(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' in EntityType '{1}' is not valid. All properties that are part of the EntityKey must be of PrimitiveType."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidKeyKeyDefinedInBaseClass(System.Object,System.Object)">
            <summary>
            A string like "Key usage is not valid. {0} cannot define keys because one of its base classes ({1}) defines keys."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_KeyMissingOnEntityType(System.Object)">
            <summary>
            A string like "EntityType '{0}' has no key defined. Define the key for this EntityType."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_BadNavigationPropertyUndefinedRole(System.Object,System.Object,System.Object)">
            <summary>
            A string like "NavigationProperty is not valid. The role {0} or the role {1} is not defined in Relationship {2}."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_EndWithManyMultiplicityCannotHaveOperationsSpecified(System.Object,System.Object)">
            <summary>
            A string like "End '{0}' on relationship '{1}' cannot have operation specified since its multiplicity is '*'. Operations cannot be specified on ends with multiplicity '*'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_EndNameAlreadyDefinedDuplicate(System.Object)">
            <summary>
            A string like "Each Name and PluralName in a relationship must be unique. '{0}' was already defined."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_SameRoleReferredInReferentialConstraint(System.Object)">
            <summary>
            A string like "In relationship '{0}', the Principal and Dependent Role of the referential constraint refers to the same Role in the relationship type."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidMultiplicityFromRoleUpperBoundMustBeOne(System.Object,System.Object)">
            <summary>
            A string like "Multiplicity is not valid in role '{0}' in relationship '{1}'. Valid values for multiplicity for Principal Role are '0..1' or '1'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidMultiplicityFromRoleToPropertyNullableV1(System.Object,System.Object)">
            <summary>
            A string like "Multiplicity is not valid in Role '{0}' in relationship '{1}'. Because all the properties in the Dependent Role are nullable, multiplicity of the Principal Role must be '0..1'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidMultiplicityFromRoleToPropertyNonNullableV1(System.Object,System.Object)">
            <summary>
            A string like "Multiplicity conflicts with the referential constraint in Role '{0}' in relationship '{1}'. Because one/all of the properties in the Dependent Role is non-nullable, multiplicity of the Principal Role must be '1'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidMultiplicityFromRoleToPropertyNonNullableV2(System.Object,System.Object)">
            <summary>
            A string like "Multiplicity conflicts with the referential constraint in Role '{0}' in relationship '{1}'. Because all of the properties in the Dependent Role are non-nullable, multiplicity of the Principal Role must be '1'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidToPropertyInRelationshipConstraint(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Properties referred by the Dependent Role {0} must be a subset of the key of the EntityType {1} referred to by the Dependent Role in the referential constraint for Relationship {2}."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidMultiplicityToRoleUpperBoundMustBeOne(System.Object,System.Object)">
            <summary>
            A string like "Multiplicity is not valid in Role '{0}' in relationship '{1}'. Because the Dependent Role refers to the key properties, the upper bound of the multiplicity of the Dependent Role must be 1."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidMultiplicityToRoleUpperBoundMustBeMany(System.Object,System.Object)">
            <summary>
            A string like "Multiplicity is not valid in Role '{0}' in relationship '{1}'. Because the Dependent Role properties are not the key properties, the upper bound of the multiplicity of the Dependent Role must be *."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_TypeMismatchRelationshipConstraint(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The types of all properties in the Dependent Role of a referential constraint must be the same as the corresponding property types in the Principal Role. The type of property '{0}' on entity '{1}' does not match the type of property '{2}' on entity '{3}' in the referential constraint '{4}'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidPropertyInRelationshipConstraint(System.Object,System.Object)">
            <summary>
            A string like "There is no property with name '{0}' defined in the type referred to by Role '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_NullableComplexType(System.Object)">
            <summary>
            A string like "Nullable ComplexType is not supported. Property '{0}' must not allow nulls."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidPropertyType(System.Object)">
            <summary>
            A string like "A property cannot be of type {0}. The property type must be a ComplexType or a PrimitiveType."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_FunctionImportUnknownEntitySet(System.Object,System.Object)">
            <summary>
            A string like "EntitySet '{0}' is not valid in FunctionImport '{1}'. Unable to find an EntitySet with the name."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_FunctionImportWithUnsupportedReturnTypeV1(System.Object)">
            <summary>
            A string like "Return type is not valid in FunctionImport '{0}'. The FunctionImport must return a collection of scalar values or a collection of entities."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_FunctionImportWithUnsupportedReturnTypeV1_1(System.Object)">
            <summary>
            A string like "Return type is not valid in FunctionImport '{0}'. The FunctionImport must return Scalar, Entity, or ComplexType."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_FunctionImportWithUnsupportedReturnTypeV2(System.Object)">
            <summary>
            A string like "Return type is not valid in FunctionImport '{0}'. The FunctionImport can have no return type or return a collection of scalar values, a collection of complex types or a collection of entities."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_FunctionImportReturnEntitiesButDoesNotSpecifyEntitySet(System.Object)">
            <summary>
            A string like "FunctionImport '{0}' returns entities but does not specify an EntitySet."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_FunctionImportEntityTypeDoesNotMatchEntitySet(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "In EntityContainer '{3}', FunctionImport '{0}' returns entities of type '{1}' that cannot exist in the declared EntitySet '{2}'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_ComplexTypeAsReturnTypeAndDefinedEntitySet(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The function '{0}' cannot have ComplexType ReturnType '{1}' and EntitySet '{2}' attribute at the same time."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_FunctionImportSpecifiesEntitySetButNotEntityType(System.Object,System.Object)">
            <summary>
            A string like "In EntityContainer '{1}', FunctionImport '{0}' specifies an EntitySet but does not return entities."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_ParameterNameAlreadyDefinedDuplicate(System.Object)">
            <summary>
            A string like "Each parameter name in a function must be unique. The parameter name '{0}' was already defined."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_DuplicateEntityContainerMemberName(System.Object)">
            <summary>
            A string like "Each member name in an EntityContainer must be unique. A member with name '{0}' is already defined."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_TypeNameAlreadyDefinedDuplicate(System.Object)">
            <summary>
            A string like "Each type name in a schema must be unique. Type name '{0}' was already defined."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidMemberNameMatchesTypeName(System.Object,System.Object)">
            <summary>
            A string like "Name {0} cannot be used in type {1}. Member names cannot be the same as their enclosing type."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_PropertyNameAlreadyDefinedDuplicate(System.Object)">
            <summary>
            A string like "Each property name in a type must be unique. Property name '{0}' was already defined."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_CycleInTypeHierarchy(System.Object)">
            <summary>
            A string like "A cycle was detected in the type hierarchy of '{0}'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidPropertyType_V1_1(System.Object)">
            <summary>
            A string like "A property cannot be of type {0}. The property type must be a ComplexType, a PrimitiveType or a CollectionType."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Syntactic_EdmModel_NameIsTooLong(System.Object)">
            <summary>
            A string like "The specified name must not be longer than 480 characters: '{0}'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_Syntactic_EdmModel_NameIsNotAllowed(System.Object)">
            <summary>
            A string like "The specified name is not allowed: '{0}'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_TypeNameAlreadyDefinedDuplicate(System.Object)">
            <summary>
            A string like "Each type name in a schema must be unique. Type name '{0}' was already defined."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.EdmModel_Validator_DuplicateEntityContainerMemberName(System.Object)">
            <summary>
            A string like "Each member name in an EntityContainer must be unique. A member with name '{0}' is already defined."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.XmlParser_EmptyFile(System.Object)">
            <summary>
            A string like "{0} does not contain a schema definition, or the XmlReader provided started at the end of the file."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.XmlParser_InvalidName(System.Object,System.Object)">
            <summary>
            A string like "{0} ({1}) is not valid."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.XmlParser_MalformedXml(System.Object,System.Object)">
            <summary>
            A string like "Malformed XML. Element starting at ({0},{1}) has no closing tag."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.XmlParser_MissingAttribute(System.Object,System.Object)">
            <summary>
            A string like "Required schema attribute '{0}' is not present on element '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.XmlParser_TextNotAllowed(System.Object)">
            <summary>
            A string like "The current schema element does not support text ({0})."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.XmlParser_UnexpectedAttribute(System.Object)">
            <summary>
            A string like "Unrecognized schema attribute: {0}."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.XmlParser_UnexpectedElement(System.Object)">
            <summary>
            A string like "Unrecognized schema element: {0}."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.XmlParser_UnexpectedNodeType(System.Object)">
            <summary>
            A string like "Unexpected XmlNode type: {0}."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.XmlParser_UnexpectedRootElement(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The element {1} in namespace {0} was unexpected for the root element. The expected Schema in one of the following namespaces: {2}."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.XmlParser_UnexpectedRootElementNoNamespace(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The element {1} was unexpected for the root element. The expected Schema in one of the following namespaces: {2}."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.XmlParser_ValueNotUnderstood(System.Object,System.Object)">
            <summary>
            A string like "{0} value ({1}) was not understood."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_AliasNameIsAlreadyDefined(System.Object)">
            <summary>
            A string like "Each alias in a schema must be unique. Alias '{0}' was already used in this schema."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_AmbiguousEntityContainerEnd(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The EntitySet for the End '{0}' in AssociationSet '{1}' in EntityContainer '{2}' was not specified, and cannot be inferred because the EntitySet is ambiguous. More than one EntitySet could be used; an explicit End element with an EntitySet attribute must be specified."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_BadNamespaceOrAlias(System.Object)">
            <summary>
            A string like "Unknown namespace or alias ({0})."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_CannotUseSystemNamespaceAsAlias(System.Object)">
            <summary>
            A string like "'{0}' is a system namespace and cannot be used as an Alias. Choose another Alias."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_DuplicateSetEndName(System.Object)">
            <summary>
            A string like "The End Name {0} is already defined."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InferAssociationEndAlreadyDefined(System.Object,System.Object)">
            <summary>
            A string like "The Role for the End with the EntitySet {0} in the AssociationSet {1} was not supplied and the End found matches one that is already defined. Change the EntitySet to one which has a type of a different End of the Association."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InferAssociationEndNoMatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "In EntityContainer '{0}', the Role for the End with the EntitySet '{1}', in the AssociationSet '{2}' was not supplied, and there were no Ends in the Relationship '{3}.{4}' that matched the type '{5}.{6}'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InferAssociationEndAmbiguous(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "In EntityContainer '{0}', the Role for the End with the EntitySet '{1}' in the AssociationSet '{2}' was not supplied, and there is more than one End in the Association '{3}.{4}' that could match the type '{5}.{6}'. Provide the Role attribute to disambiguate the End."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidDeleteAction(System.Object)">
            <summary>
            A string like "Delete action ({0}) is not valid. Action must be: 'None', 'Cascade', or 'Restrict'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidAssociationTooManyEnds(System.Object,System.Object)">
            <summary>
            A string like "The Association '{0}.{1}' is not valid. Associations may only contain two End elements."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidAssociationSetTooManyEnds(System.Object)">
            <summary>
            A string like "The AssociationSet '{0}' is not valid. Association sets may only contain two End elements."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidCollectionKind(System.Object)">
            <summary>
            A string like "CollectionKind ({0}) is not valid. CollectionKind must be: 'None', 'Bag', or 'List'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidConcurrencyMode(System.Object)">
            <summary>
            A string like "ConcurrencyMode ({0}) is not valid. ConcurrencyMode must be: 'None', or 'Fixed'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidEntityEndName(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The End '{0}' does not match any Ends on the '{1}.{2}' Association type."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidDefaultBinary(System.Object)">
            <summary>
            A string like "Default value ({0}) is not valid for Binary. Value must be of form 0x123 where 123 stands for a non-empty sequence of hex digits."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidDefaultIntegral(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Default value ({0}) is not valid. Expected an integer between {1} and {2}."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidDefaultDateTime(System.Object,System.Object)">
            <summary>
            A string like "Default value ({0}) is not valid for DateTime. The value must be in the form '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidDefaultTime(System.Object,System.Object)">
            <summary>
            A string like "Default value ({0}) is not valid for Time. The value must be in the form '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidDefaultDateTimeOffset(System.Object,System.Object)">
            <summary>
            A string like "Default value ({0}) is not valid for DateTimeOffset. The value must be in the form '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidDefaultDecimal(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Default value ({0}) is not compatible with the facets specified for Decimal. The value must be a decimal number with scale less than or equal to {1} and precision less than or equal to {2}."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidDefaultFloatingPoint(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Default value ({0}) is not valid. The value must be a floating point number between {1} and {2}."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidDefaultGuid(System.Object)">
            <summary>
            A string like "Default value ({0}) is not valid for GUID. The value must be enclosed in single quotes in the form 'dddddddd-dddd-dddd-dddd-dddddddddddd'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidDefaultBoolean(System.Object)">
            <summary>
            A string like "Default value ({0}) is not valid for Boolean. The value must be true or false."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidEndEntitySet(System.Object,System.Object)">
            <summary>
            A string like "The referenced EntitySet '{0}' for the association set End '{1}' could not be found in the containing EntityContainer."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidEndEntitySetNoEndName(System.Object)">
            <summary>
            A string like "The referenced EntitySet '{0}' for this association set End could not be found in the containing EntityContainer."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidEndRoleInRelationshipConstraint(System.Object,System.Object)">
            <summary>
            A string like "There is no Role with name '{0}' defined in relationship '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidKeyNoProperty(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Key: {0}.{1} is not valid. '{2}' is not a valid property name."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidMultiplicity(System.Object)">
            <summary>
            A string like "Multiplicity ({0}) is not valid. Multiplicity must be: '*', '0..1', or '1'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidPrimitivePropertyType(System.Object,System.Object)">
            <summary>
            A string like "The type '{0}' of property '{1}' is not a valid EDM primitive type name."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidPrimitivePropertyTypeNoPropertyName(System.Object)">
            <summary>
            A string like "The property type '{0}' is not a valid EDM primitive type name."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidPrincipalRoleInAssociationConstraint(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Properties referenced by the Principal Role '{0}' must be exactly identical to the key of the EntityType '{1}' referred to by the Principal Role in the AssociationConstraint for Association '{2}'. Make sure all the key properties are specified in the Principal Role."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_InvalidPropertyInAssociationConstraint(System.Object,System.Object)">
            <summary>
            A string like "There is no property with name '{0}' defined in type referred to by Role '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_MissingEntityContainerEnd(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The EntitySet for the End '{0}' in AssociationSet '{1}' in EntityContainer '{2}' was not specified, and cannot be inferred because none of the EntitySet elements are of the correct type."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_NeedNotUseSystemNamespaceInUsing(System.Object)">
            <summary>
            A string like "The namespace '{0}' is a system namespace and is implicitly referenced by every schema. You cannot specify an explicit reference to this namespace."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_NotNamespaceQualified(System.Object)">
            <summary>
            A string like "The Type {0} is not qualified with a namespace or alias. Only PrimitiveTypes can be used without qualification."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_SystemNamespaceEncountered(System.Object)">
            <summary>
            A string like "The namespace '{0}' is a system namespace and cannot be used by other schemas. Choose another namespace name."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_TypeNotInAliasedNamespace(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Type {0} is not defined in namespace {1} (Alias={2})."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_TypeNotInNamespace(System.Object,System.Object)">
            <summary>
            A string like "Type {0} is not defined in namespace {1}."
            </summary>
        </member>
        <member name="M:System.Data.Edm.Strings.CsdlParser_UndefinedNavigationPropertyRole(System.Object,System.Object,System.Object)">
            <summary>
            A string like "NavigationProperty is not valid. The role '{0}' is not defined in association {1}.{2}."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.EdmModel_Validator_Semantic_BadNavigationPropertyRolesCannotBeTheSame">
            <summary>
            A string like "NavigationProperty is not valid. The FromRole and ToRole are the same."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidOperationMultipleEndsInAssociation">
            <summary>
            A string like "OnDelete can be specified on only one End of an EdmAssociation."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.EdmModel_Validator_Semantic_MismatchNumberOfPropertiesinRelationshipConstraint">
            <summary>
            A string like "Number of Properties in the Dependent and Principal Role in a relationship constraint must be exactly identical."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.EdmModel_Validator_Semantic_ComposableFunctionMustDeclareReturnType">
            <summary>
            A string like "Functions that can be composed must declare a return type."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.EdmModel_Validator_Semantic_NonComposableFunctionMustNotDeclareReturnType">
            <summary>
            A string like "Functions that cannot be composed must not declare a return type."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.EdmModel_Validator_Syntactic_MissingName">
            <summary>
            A string like "The name is missing or not valid."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.EdmModel_Validator_Syntactic_EdmAssociationType_AssocationEndMustNotBeNull">
            <summary>
            A string like "AssociationEnd must not be null."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.EdmModel_Validator_Syntactic_EdmAssociationConstraint_DependentEndMustNotBeNull">
            <summary>
            A string like "DependentEnd must not be null."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.EdmModel_Validator_Syntactic_EdmAssociationConstraint_DependentPropertiesMustNotBeEmpty">
            <summary>
            A string like "DependentProperties must not be empty."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.EdmModel_Validator_Syntactic_EdmNavigationProperty_AssocationMustNotBeNull">
            <summary>
            A string like "Association must not be null."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.EdmModel_Validator_Syntactic_EdmNavigationProperty_ResultEndMustNotBeNull">
            <summary>
            A string like "ResultEnd must not be null."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.EdmModel_Validator_Syntactic_EdmAssociationEnd_EntityTypeMustNotBeNull">
            <summary>
            A string like "EntityType must not be null."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.EdmModel_Validator_Syntactic_EdmEntitySet_ElementTypeMustNotBeNull">
            <summary>
            A string like "ElementType must not be null."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.EdmModel_Validator_Syntactic_EdmAssociationSet_ElementTypeMustNotBeNull">
            <summary>
            A string like "ElementType must not be null."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.EdmModel_Validator_Syntactic_EdmAssociationSet_SourceSetMustNotBeNull">
            <summary>
            A string like "SourceSet must not be null."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.EdmModel_Validator_Syntactic_EdmAssociationSet_TargetSetMustNotBeNull">
            <summary>
            A string like "TargetSet must not be null."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.EdmModel_Validator_Syntactic_EdmFunctionImport_ReturnTypeMustBeCollectionType">
            <summary>
            A string like "ReturnType of the EdmFunctionImport must be a Collection type."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.EdmModel_Validator_Syntactic_EdmTypeReferenceNotValid">
            <summary>
            A string like "The type is not a valid EdmTypeReference."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.EdmModel_Validator_Syntactic_EdmFunctionCanOnlyExist20OrHigher">
            <summary>
            A string like "EdmFunction can only be defined in a EdmModel with a version of 2.0 or higher."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.Serializer_OneNamespaceAndOneContainer">
            <summary>
            A string like "Serializer can only serialize EdmModel that has one EdmNamespace and one EdmEntityContainer."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.XmlParser_EmptySchemaTextReader">
            <summary>
            A string like "The source XmlReader does not contain a schema definition or started at the end of the file."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.CsdlParser_AssociationHasAtMostOneConstraint">
            <summary>
            A string like "Association may have at most one constraint. Multiple constraints were specified for this association."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.CsdlParser_DefaultNotAllowed">
            <summary>
            A string like "Default values are allowed only for non-XML primitive types and enumeration types."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.CsdlParser_DuplicateNavigationPropertyRoles">
            <summary>
            A string like "NavigationProperty is not valid. The FromRole and ToRole are the same."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.CsdlParser_MultipleArtifactVersions">
            <summary>
            A string like "All CSDL artifacts loaded into an EDM model must have the same version. Multiple versions were encountered."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.CsdlParser_ReferentialConstraintRequiresOneDependent">
            <summary>
            A string like "Referential constraint requires one Dependent role. Multiple Dependent roles were specified for this referential constraint."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.CsdlParser_ReferentialConstraintRequiresOnePrincipal">
            <summary>
            A string like "Referential constraint requires one Principal role. Multiple Principal roles were specified for this referential constraint."
            </summary>
        </member>
        <member name="P:System.Data.Edm.Strings.CsdlParser_ReferentialConstraintRequiresPrincipalAndDependent">
            <summary>
            A string like "Referential constraint requires both Principal and Dependent roles. "
            </summary>
        </member>
        <member name="T:System.Data.Edm.Error">
            <summary>
               Strongly-typed and parameterized exception factory.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Error.ArgumentNull(System.String)">
            <summary>
            The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Error.ArgumentOutOfRange(System.String)">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Error.NotImplemented">
            <summary>
            The exception that is thrown when the author has yet to implement the logic at this point in the program. This can act as an exception based TODO tag.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Error.NotSupported">
            <summary>
            The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality. 
            </summary>
        </member>
        <member name="T:System.Data.Edm.Common.DataModelAnnotation">
            <summary>
            Allows the construction and modification of a user-specified annotation (name-value pair) on a <see cref="T:System.Data.Edm.Common.DataModelItem"/> instance.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Common.INamedDataModelItem">
            <summary>
            INamedDataModelItem is implemented by model-specific base types for all types with a <see cref="P:System.Data.Edm.Common.INamedDataModelItem.Name"/> property.
            <seealso cref="T:System.Data.Edm.EdmNamedMetadataItem"/>
            </summary>
        </member>
        <member name="P:System.Data.Edm.Common.INamedDataModelItem.Name">
            <summary>
            Gets or sets the currently assigned name.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Common.DataModelAnnotation.#ctor">
            <summary>
            Constructs a new DataModelAnnotation
            </summary>
        </member>
        <member name="P:System.Data.Edm.Common.DataModelAnnotation.Namespace">
            <summary>
            Gets or sets an optional namespace that can be used to distinguish the annotation from others with the same <see cref="P:System.Data.Edm.Common.DataModelAnnotation.Name"/> value.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Common.DataModelAnnotation.Name">
            <summary>
            Gets or sets the name of the annotation.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Common.DataModelAnnotation.Value">
            <summary>
            Gets or sets the value of the annotation.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Common.DataModelDocumentation">
            <summary>
            Allows the construction and modification of user-specified documentation (a summary and/or a longer description) on a data model item.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Common.DataModelDocumentation.#ctor">
            <summary>
            Constructs a new DataModelDocumentation instance.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Common.DataModelDocumentation.Description">
            <summary>
            Gets or sets the description element of the documentation as a single string.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Common.DataModelDocumentation.Summary">
            <summary>
            Gets or sets the summary element of the documentation as a single string.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Common.DataModelErrorEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Data.Edm.Common.DataModelEventArgs">
            <summary>
            DataModelEventArgs is the base argument type for all events raised by consumers of Entity Data Model (EDM) models.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Common.DataModelEventArgs.Item">
            <summary>
            Gets a value indicating the <see cref="T:System.Data.Edm.Common.DataModelItem"/> that caused the event to be raised.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Common.DataModelErrorEventArgs.PropertyName">
            <summary>
            Gets an optional value indicating which property of the source item caused the event to be raised.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Common.DataModelErrorEventArgs.ErrorCode">
            <summary>
            Gets a value that identifies the specific error that is being raised.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Common.DataModelErrorEventArgs.ErrorMessage">
            <summary>
            Gets an optional descriptive message the describes the error that is being raised.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Common.DataModelItem">
            <summary>
            DataModelItem is the base for all types in the EDM metadata reflection, construction and modification API.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Common.IAnnotatedDataModelItem">
            <summary>
            IAnnotatedDataModelItem is implemented by model-specific base types for all types with an <see cref="P:System.Data.Edm.Common.IAnnotatedDataModelItem.Annotations"/> property.
            <seealso cref="T:System.Data.Edm.EdmDataModelItem"/>
            </summary>
        </member>
        <member name="P:System.Data.Edm.Common.IAnnotatedDataModelItem.Annotations">
            <summary>
            Gets or sets the currently assigned annotations.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Common.IDocumentedDataModelItem">
            <summary>
            IDocumentedDataModelItem is implemented by model-specific base types for all types with a <see cref="P:System.Data.Edm.Common.IDocumentedDataModelItem.Documentation"/> property.
            <seealso cref="T:System.Data.Edm.EdmDataModelItem"/>
            </summary>
        </member>
        <member name="P:System.Data.Edm.Common.IDocumentedDataModelItem.Documentation">
            <summary>
            Gets or sets the currently assigned documentation.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.DbAliasedMetadataItem">
            <summary>
            DbAliasedMetadataItem provides the base type for all Database Metadata types that can have an optional <see cref="P:System.Data.Edm.Db.DbAliasedMetadataItem.DatabaseIdentifier"/> that should be used instead of the item's <see cref="P:System.Data.Edm.Db.DbNamedMetadataItem.Name"/> when referring to the item in the database.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.DbNamedMetadataItem">
            <summary>
            NamedDbItem is the base for all types in the Database Metadata construction and modification API with a <see cref="P:System.Data.Edm.Db.DbNamedMetadataItem.Name"/> property.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.DbMetadataItem">
            <summary>
            The base for all all Database Metadata types that support annotation using <see cref="T:System.Data.Edm.Common.DataModelAnnotation"/> and documentation using <see cref="T:System.Data.Edm.Common.DataModelDocumentation"/>.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.DbDataModelItem">
            <summary>
            DbDataModelItem is the base for all types in the Database Metadata construction and modification API.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbDataModelItem.ItemKind">
            <summary>
            Gets a <see cref="T:System.Data.Edm.Db.DbItemKind"/> value indicating which Database Metadata concept is represented by this item.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbMetadataItem.Documentation">
            <summary>
            Gets or sets the currently assigned documentation.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbMetadataItem.Annotations">
            <summary>
            Gets or sets the currently assigned annotations.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbNamedMetadataItem.Name">
            <summary>
            Gets or sets the currently assigned name.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbAliasedMetadataItem.DatabaseIdentifier">
            <summary>
            Gets an optional alternative identifier that should be used when referring to this item in the database.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.DbColumnMetadata">
            <summary>
            When implemented in derived types, allows the construction and modification of a column in a Database Metadata table or row.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbColumnMetadata.TypeName">
            <summary>
            Gets or sets a string indicating the database-specific type of the column.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbColumnMetadata.IsNullable">
            <summary>
            Gets or sets a value indicating whether the column is nullable.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbColumnMetadata.Facets">
            <summary>
            Gets or sets an optional <see cref="T:System.Data.Edm.Db.DbPrimitiveTypeFacets"/> instance that applies additional constraints to the referenced database-specific type of the column.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.DbDatabaseMetadata">
            <summary>
            Allows the construction and modification of a database in a Database Metadata model.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Db.DbDatabaseMetadata.#ctor">
            <summary>
            Constructs a new DbDatabaseMetadata instance.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbDatabaseMetadata.Version">
            <summary>
            Gets or sets an optional value that indicates the database model version.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbDatabaseMetadata.Schemas">
            <summary>
            Gets or sets the collection of <see cref="T:System.Data.Edm.Db.DbSchemaMetadata"/> instances that specifies the schemas within the database.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.DbForeignKeyConstraintMetadata">
            <summary>
            Allows the construction and modification of a foreign key constraint sourced by a <see cref="T:System.Data.Edm.Db.DbTableMetadata"/> instance.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Db.DbForeignKeyConstraintMetadata.#ctor">
            <summary>
            Constructs a new DbForeignKeyConstraintMetadata instance.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbForeignKeyConstraintMetadata.DeleteAction">
            <summary>
            Gets or sets the <see cref="T:System.Data.Edm.Db.DbOperationAction"/> to take when a delete operation is attempted.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.DbFunctionMetadata">
            <summary>
            Allows the construction and modification of function metadata in a Database Metadata <see cref="T:System.Data.Edm.Db.DbSchemaMetadata"/>.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.DbSchemaMetadataItem">
            <summary>
            DbSchemaMetadataItem is the base for all types that can be contained in a <see cref="T:System.Data.Edm.Db.DbSchemaMetadata"/> schema. 
            </summary>
        </member>
        <member name="M:System.Data.Edm.Db.DbFunctionMetadata.#ctor">
            <summary>
            Constructs a new DbFunctionMetadata instance.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbFunctionMetadata.IsAggregate">
            <summary>
            Gets or sets a value indicating whether or not the function can be invoked as an aggregate.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbFunctionMetadata.IsNiladic">
            <summary>
            Gets or sets a value indicating that the function should be invoked without parentheses, for example as 'FunctionName' rather than as 'FunctionName()'.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbFunctionMetadata.IsBuiltIn">
            <summary>
            Gets a value indicating that the function is considered 'built-in' to the store.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbFunctionMetadata.CommandText">
            <summary>
            Gets or sets the optional command text that defines the function.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbFunctionMetadata.ParameterSemantics">
            <summary>
            Gets or sets the parameter type semantics, represented by a <see cref="T:System.Data.Edm.Db.DbParameterTypeSemantics"/> value, that should be applied when considering this function during overload resolution.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbFunctionMetadata.IsComposable">
            <summary>
            Gets or sets a value indicating whether the function can be composed with other operations.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbFunctionMetadata.ReturnType">
            <summary>
            Gets or sets an optional <see cref="T:System.Data.Edm.Db.DbFunctionTypeMetadata"/> value that specifies the return type of the function.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbFunctionMetadata.Parameters">
            <summary>
            Gets or sets the collection of <see cref="T:System.Data.Edm.Db.DbFunctionParameterMetadata"/> instances that specify the parameters defined by the function. 
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.DbFunctionParameterMetadata">
            <summary>
            Allows the construction and modification of a parameter to a <see cref="T:System.Data.Edm.Db.DbFunctionMetadata"/> function in a Database Metadata <see cref="T:System.Data.Edm.Db.DbSchemaMetadata"/> schema.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Db.DbFunctionParameterMetadata.#ctor">
            <summary>
            Constructs a new DbFunctionParameterMetadata instance.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbFunctionParameterMetadata.Mode">
            <summary>
            Gets or sets a value indicating the <see cref="T:System.Data.Edm.Db.DbParameterMode"/> of the parameter.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbFunctionParameterMetadata.ParameterType">
            <summary>
            Gets or sets a <see cref="T:System.Data.Edm.Db.DbFunctionTypeMetadata"/> that specifies the parameter type.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.DbFunctionTypeMetadata">
            <summary>
            Allows the construction and modification of a specific use of a type as a Database Metadata function return or parameter type. 
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.DbTypeMetadata">
            <summary>
            Represents a specific use of a type in a Database Metadata item. 
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbTypeMetadata.Facets">
            <summary>
            Gets or sets an optional <see cref="T:System.Data.Edm.Db.DbPrimitiveTypeFacets"/> instance that applies additional constraints to a referenced primitive type.
            </summary>
            <remarks>Accessing this property forces the creation of a DbPrimitiveTypeFacets value if no value has previously been set. Use <see cref="P:System.Data.Edm.Db.DbTypeMetadata.HasFacets"/> to determine whether or not this property currently has a value.</remarks>
        </member>
        <member name="P:System.Data.Edm.Db.DbTypeMetadata.IsCollection">
            <summary>
            Gets or sets a value indicating whether the represented type is a collection type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbTypeMetadata.IsNullable">
            <summary>
            Gets or sets an optional value indicating whether the referenced type should be considered nullable.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbTypeMetadata.IsRow">
            <summary>
            Gets a value indicating whether the type has been configured as a row type by the addition of one or more <see cref="P:System.Data.Edm.Db.DbTypeMetadata.RowColumns"/>.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Db.DbFunctionTypeMetadata.#ctor">
            <summary>
            Constructs a new DbFunctionTypeMetadata instance.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.DbItemKind">
            <summary>
            Indicates which Database Metadata concept is represented by a given item.
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.DbItemKind.Database">
            <summary>
            Database Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.DbItemKind.Schema">
            <summary>
            Schema Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.DbItemKind.ForeignKeyConstraint">
            <summary>
            Foreign Key Constraint Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.DbItemKind.Function">
            <summary>
            Function Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.DbItemKind.FunctionParameter">
            <summary>
            Function Parameter Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.DbItemKind.FunctionType">
            <summary>
            Function Return or Parameter Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.DbItemKind.RowColumn">
            <summary>
            Row Column Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.DbItemKind.Table">
            <summary>
            Table Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.DbItemKind.TableColumn">
            <summary>
            Table Column Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.DbItemKind.PrimitiveTypeFacets">
            <summary>
            Primitive Facets Kind
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.DbOperationAction">
            <summary>
              Specifies the action to take on a given operation.
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.DbOperationAction.None">
            <summary>
              Default behavior
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.DbOperationAction.Restrict">
            <summary>
              Restrict the operation
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.DbOperationAction.Cascade">
            <summary>
              Cascade the operation
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.DbPrimitiveTypeFacets">
            <summary>
            Allows the construction and modification of additional constraints that can be applied to a specific use of a primitive type in a Database Metadata item.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Db.DbPrimitiveTypeFacets.#ctor">
            <summary>
            Constructs a new DbPrimitiveTypeFacets instance.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbPrimitiveTypeFacets.HasValue">
            <summary>
            Returns <code>true</code> if any facet value property currently has a non-null value; otherwise returns <code>false</code>.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbPrimitiveTypeFacets.IsFixedLength">
            <summary>
            Gets or sets an optional value indicating whether the referenced type should be considered to have a fixed or variable length.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbPrimitiveTypeFacets.IsMaxLength">
            <summary>
            Gets or sets an optional value indicating whether the referenced type should be considered to have its intrinsic maximum length, rather than a specific value.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbPrimitiveTypeFacets.IsUnicode">
            <summary>
            Gets or sets an optional value indicating whether the referenced type should be considered to be Unicode or non-Unicode.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbPrimitiveTypeFacets.MaxLength">
            <summary>
            Gets or sets an optional value indicating the current constraint on the type's maximum length.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbPrimitiveTypeFacets.Precision">
            <summary>
            Gets or sets an optional value indicating the current constraint on the type's precision.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbPrimitiveTypeFacets.Scale">
            <summary>
            Gets or sets an optional value indicating the current constraint on the type's scale.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.DbRowColumnMetadata">
            <summary>
            Allows the construction and modification of a column in the structure of a row <see cref="T:System.Data.Edm.Db.DbFunctionTypeMetadata"/>.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Db.DbRowColumnMetadata.#ctor">
            <summary>
            Constructs a new DbRowColumnMetadata instance.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.DbSchemaMetadata">
            <summary>
            Allows the construction and modification of a database schema in a <see cref="T:System.Data.Edm.Db.DbDatabaseMetadata"/> database model.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Db.DbSchemaMetadata.#ctor">
            <summary>
            Constructs a new DbSchemaMetadata instance.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbSchemaMetadata.SchemaItems">
            <summary>
            Gets all <see cref="T:System.Data.Edm.Db.DbSchemaMetadataItem"/>s declared within the schema. Includes <see cref="T:System.Data.Edm.Db.DbTableMetadata"/> instances and <see cref="T:System.Data.Edm.Db.DbFunctionMetadata"/> instances.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbSchemaMetadata.Tables">
            <summary>
            Gets or sets the collection of <see cref="T:System.Data.Edm.Db.DbTableMetadata"/> instances that specifies the tables declared within the schema.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbSchemaMetadata.Functions">
            <summary>
            Gets or sets the collection of <see cref="T:System.Data.Edm.Db.DbFunctionMetadata"/> instances that specifies the functions declared withing the schema.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.DbTableColumnMetadata">
            <summary>
            Allows the construction and modification of a column in a <see cref="T:System.Data.Edm.Db.DbTableMetadata"/> table.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Db.DbTableColumnMetadata.#ctor">
            <summary>
            Constructs a new DbTableColumnMetadata instance.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbTableColumnMetadata.IsPrimaryKeyColumn">
            <summary>
            Gets or sets a value indicating whether the column is part of the table's primary key.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbTableColumnMetadata.StoreGeneratedPattern">
            <summary>
            Gets or sets a <see cref="T:System.Data.Edm.Db.DbStoreGeneratedPattern"/> value indicating if and how the value of the column is automatically generated.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbTableColumnMetadata.Collation">
            <summary>
            Gets or sets an optional value indicating the collation specific to this table column.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbTableColumnMetadata.DefaultValue">
            <summary>
            Gets or sets an optional value that specifies the default value for the column.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.DbTableMetadata">
            <summary>
            Allows the construction and modification a table in a <see cref="T:System.Data.Edm.Db.DbSchemaMetadata"/> database schema.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Db.DbTableMetadata.#ctor">
            <summary>
            Constructs a new DbTableMetadata instance.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbTableMetadata.Columns">
            <summary>
            Gets or sets the collection of <see cref="T:System.Data.Edm.Db.DbTableColumnMetadata"/> instances that specifies the columns present within the table.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbTableMetadata.KeyColumns">
            <summary>
            Gets or sets the collection of <see cref="T:System.Data.Edm.Db.DbTableColumnMetadata"/> instances from the <see cref="P:System.Data.Edm.Db.DbTableMetadata.Columns"/> collection of the table that are part of the primary key.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.DbTableMetadata.ForeignKeyConstraints">
            <summary>
            Gets or sets the collection of <see cref="T:System.Data.Edm.Db.DbForeignKeyConstraintMetadata"/> instances that defines the foreign key constraints sourced from the table.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.Mapping.DbAssociationEndMapping">
            <summary>
            Represents the mapping of an EDM association end (<see cref="T:System.Data.Edm.EdmAssociationEnd"/>) as a collection of property mappings (<see cref="T:System.Data.Edm.Db.Mapping.DbEdmPropertyMapping"/>).
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.Mapping.DbMappingMetadataItem">
            <summary>
            DbMappingMetadataItem is the base for all types in the EDM-to-Database Mapping construction and modification API that support annotation using <see cref="T:System.Data.Edm.Common.DataModelAnnotation"/> and documentation using <see cref="T:System.Data.Edm.Common.DataModelDocumentation"/>.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.Mapping.DbMappingModelItem">
            <summary>
            DbMappingModelItem is the base for all types in the EDM-to-Database Mapping construction and modification API.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbMappingModelItem.ItemKind">
            <summary>
            Gets a <see cref="T:System.Data.Edm.Db.Mapping.DbMappingItemKind"/> value indicating which EDM-to-Database Mapping concept is represented by this item.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbMappingMetadataItem.Documentation">
            <summary>
            Gets or sets the currently assigned documentation.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbMappingMetadataItem.Annotations">
            <summary>
            Gets or sets the currently assigned annotations.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbAssociationEndMapping.AssociationEnd">
            <summary>
            Gets an <see cref="T:System.Data.Edm.EdmAssociationEnd"/> value representing the association end that is being mapped.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbAssociationEndMapping.PropertyMappings">
            <summary>
            Gets the collection of <see cref="T:System.Data.Edm.Db.Mapping.DbEdmPropertyMapping"/>s that specifies how the association end key properties are mapped to the table.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbAssociationSetMapping.AssociationSet">
            <summary>
            Gets an <see cref="T:System.Data.Edm.EdmAssociationSet"/> value representing the association set that is being mapped.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbAssociationSetMapping.Table">
            <summary>
            Gets a <see cref="T:System.Data.Edm.Db.DbTableMetadata"/> value representing the table to which the entity type's properties are being mapped.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbAssociationSetMapping.ColumnConditions">
            <summary>
            Gets the collection of <see cref="T:System.Data.Edm.Db.Mapping.DbColumnCondition"/>s that specifies the constant or null values that columns in <see cref="P:System.Data.Edm.Db.Mapping.DbAssociationSetMapping.Table"/> must have for this type mapping to apply.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.Mapping.DbColumnCondition">
            <summary>
            Allows the construction and modification of a condition for a column in a database table.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Db.Mapping.DbColumnCondition.#ctor">
            <summary>
            Constructs a new DbColumnCondition.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbColumnCondition.Column">
            <summary>
            Gets or sets a <see cref="T:System.Data.Edm.Db.DbTableColumnMetadata"/> value representing the table column which must contain <see cref="P:System.Data.Edm.Db.Mapping.DbColumnCondition.Value"/> for this condition to hold.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbColumnCondition.Value">
            <summary>
            Gets or sets the value that <see cref="P:System.Data.Edm.Db.Mapping.DbColumnCondition.Column"/> must contain for this condition to hold.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.Mapping.DbDatabaseMapping">
            <summary>
            Allows the construction and modification of the mapping of an EDM model (<see cref="T:System.Data.Edm.EdmModel"/>) to a database (<see cref="T:System.Data.Edm.Db.DbDatabaseMetadata"/>).
            </summary>
        </member>
        <member name="M:System.Data.Edm.Db.Mapping.DbDatabaseMapping.#ctor">
            <summary>
            Constructs a new DbDatabaseMapping.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbDatabaseMapping.Model">
            <summary>
            Gets or sets an <see cref="T:System.Data.Edm.EdmModel"/> value representing the model that is being mapped.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbDatabaseMapping.Database">
            <summary>
            Gets or sets a <see cref="T:System.Data.Edm.Db.DbDatabaseMetadata"/> value representing the database that is the target of the mapping.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbDatabaseMapping.EntityContainerMappings">
            <summary>
            Gets or sets the collection of <see cref="T:System.Data.Edm.Db.Mapping.DbEntityContainerMapping"/>s that specifies how the model's entity containers are mapped to the database.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.Mapping.DbEdmPropertyMapping">
            <summary>
            Represents the mapping of an entity property to a column in a database table.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Db.Mapping.DbEdmPropertyMapping.#ctor">
            <summary>
            Constructs a new DbEdmPropertyMapping.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbEdmPropertyMapping.PropertyPath">
            <summary>
            Gets or sets the collection of <see cref="T:System.Data.Edm.EdmProperty"/> instances that defines the mapped property, beginning from a property declared by the mapped entity type and optionally proceeding through properties of complex property result types.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbEdmPropertyMapping.Column">
            <summary>
            Gets or sets a <see cref="T:System.Data.Edm.Db.DbTableColumnMetadata"/> value representing the table column to which the entity property is being mapped.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.Mapping.DbEntityContainerMapping">
            <summary>
            Allows the construction and modification of the mapping of an EDM entity container (<see cref="T:System.Data.Edm.EdmEntityContainer"/>) to a database (<see cref="T:System.Data.Edm.Db.DbDatabaseMetadata"/>).
            </summary>
        </member>
        <member name="M:System.Data.Edm.Db.Mapping.DbEntityContainerMapping.#ctor">
            <summary>
            Constructs a new DbEntityContainerMapping.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbEntityContainerMapping.EntityContainer">
            <summary>
            Gets or sets an <see cref="T:System.Data.Edm.EdmEntityContainer"/> value representing the entity container that is being mapped.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbEntityContainerMapping.EntitySetMappings">
            <summary>
            Gets or sets the collection of <see cref="T:System.Data.Edm.Db.Mapping.DbEntitySetMapping"/>s that specifies how the container's entity sets are mapped to the database.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbEntityContainerMapping.AssociationSetMappings">
            <summary>
            Gets the collection of <see cref="T:System.Data.Edm.Db.Mapping.DbAssociationSetMapping"/>s that specifies how the container's association sets are mapped to the database.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.Mapping.DbEntitySetMapping">
            <summary>
            Allows the construction and modification of the mapping of an EDM entity set (<see cref="T:System.Data.Edm.EdmEntitySet"/>) to a database (<see cref="T:System.Data.Edm.Db.DbDatabaseMetadata"/>).
            </summary>
        </member>
        <member name="M:System.Data.Edm.Db.Mapping.DbEntitySetMapping.#ctor">
            <summary>
            Constructs a new DbEntitySetMappingBuilder.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbEntitySetMapping.EntitySet">
            <summary>
            Gets or sets an <see cref="T:System.Data.Edm.EdmEntitySet"/> value representing the entity set that is being mapped.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbEntitySetMapping.EntityTypeMappings">
            <summary>
            Gets or sets the collection of <see cref="T:System.Data.Edm.Db.Mapping.DbEntityTypeMapping"/>s that specifies how the set's entity types are mapped to the database.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbEntitySetMapping.QueryViewMappings">
            <summary>
            Gets the collection of <see cref="T:System.Data.Edm.Db.Mapping.DbQueryViewMapping"/>s that specifies the .
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.Mapping.DbEntityTypeMapping">
            <summary>
            Allows the construction and modification of a complete or partial mapping of an EDM entity type (<see cref="T:System.Data.Edm.EdmEntityType"/>) or type hierarchy to a specific database table (<see cref="T:System.Data.Edm.Db.DbTableMetadata"/>).
            </summary>
        </member>
        <member name="M:System.Data.Edm.Db.Mapping.DbEntityTypeMapping.#ctor">
            <summary>
            Constructs a new DbEntityTypeMapping.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbEntityTypeMapping.EntityType">
            <summary>
            Gets or sets an <see cref="T:System.Data.Edm.EdmEntityType"/> value representing the entity type or hierarchy that is being mapped.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbEntityTypeMapping.IsHierarchyMapping">
            <summary>
            Gets or sets a value indicating whether this type mapping applies to <see cref="P:System.Data.Edm.Db.Mapping.DbEntityTypeMapping.EntityType"/> and all its direct or indirect subtypes (<code>true</code>), or only to <see cref="P:System.Data.Edm.Db.Mapping.DbEntityTypeMapping.EntityType"/> (<code>false</code>).
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbEntityTypeMappingFragment.Table">
            <summary>
            Gets a <see cref="T:System.Data.Edm.Db.DbTableMetadata"/> value representing the table to which the entity type's properties are being mapped.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbEntityTypeMappingFragment.PropertyMappings">
            <summary>
            Gets the collection of <see cref="T:System.Data.Edm.Db.Mapping.DbEdmPropertyMapping"/>s that specifies how the type's properties are mapped to the table.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbEntityTypeMappingFragment.ColumnConditions">
            <summary>
            Gets the collection of <see cref="T:System.Data.Edm.Db.Mapping.DbColumnCondition"/>s that specifies the constant or null values that columns in <see cref="P:System.Data.Edm.Db.Mapping.DbEntityTypeMappingFragment.Table"/> must have for this type mapping fragment to apply.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbEntityTypeMappingFragment.PropertyConditions">
            <summary>
            Gets the collection of <see cref="T:System.Data.Edm.Db.Mapping.DbPropertyCondition"/>s that specifies the constant or null values that property must have for this type mapping fragment to apply.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.Mapping.DbMappingItemKind">
            <summary>
              Indicates which EDM-to-Database Mapping concept is represented by a given item.
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.Mapping.DbMappingItemKind.DatabaseMapping">
            <summary>
              Database Mapping Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.Mapping.DbMappingItemKind.EntityContainerMapping">
            <summary>
              Entity Container Mapping Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.Mapping.DbMappingItemKind.EntitySetMapping">
            <summary>
              Entity Set Mapping Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.Mapping.DbMappingItemKind.AssociationSetMapping">
            <summary>
              Association Set Mapping Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.Mapping.DbMappingItemKind.EntityTypeMapping">
            <summary>
              Entity Type Mapping Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.Mapping.DbMappingItemKind.QueryViewMapping">
            <summary>
              Query View Mapping Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.Mapping.DbMappingItemKind.EntityTypeMappingFragment">
            <summary>
              Entity Type Mapping Fragment Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.Mapping.DbMappingItemKind.EdmPropertyMapping">
            <summary>
              Edm Property Mapping Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.Mapping.DbMappingItemKind.AssociationEndMapping">
            <summary>
              Association End Mapping Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.Mapping.DbMappingItemKind.ColumnCondition">
            <summary>
              Column Condition Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.Db.Mapping.DbMappingItemKind.PropertyCondition">
            <summary>
              Property Condition Kind
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.Mapping.DbPropertyCondition">
            <summary>
            Represents a a condition for a property in an Edm type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbPropertyCondition.Property">
            <summary>
            Gets a <see cref="T:System.Data.Edm.EdmProperty"/> value representing the edm property which must contain <see cref="P:System.Data.Edm.Db.Mapping.DbPropertyCondition.Value"/> for this condition to hold.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbPropertyCondition.Value">
            <summary>
            Gets the value that <see cref="P:System.Data.Edm.Db.Mapping.DbPropertyCondition.Property"/> must contain for this condition to hold.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Db.Mapping.DbQueryViewMapping">
            <summary>
            Represents a query view based mapping for a single type or a hierarchy.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbQueryViewMapping.EntityType">
            <summary>
            Gets an <see cref="T:System.Data.Edm.EdmEntityType"/> value representing the entity type or hierarchy that is being mapped.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbQueryViewMapping.IsHierarchyMapping">
            <summary>
            Gets a value indicating whether this type mapping applies to <see cref="P:System.Data.Edm.Db.Mapping.DbQueryViewMapping.EntityType"/> 
            and all its direct or indirect subtypes (<code>true</code>), or only to <see cref="P:System.Data.Edm.Db.Mapping.DbQueryViewMapping.EntityType"/> (<code>false</code>).
            </summary>
        </member>
        <member name="P:System.Data.Edm.Db.Mapping.DbQueryViewMapping.QueryView">
            <summary>
            Gets a QueryView mapping for this type.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmAssociationConstraint">
            <summary>
            Allows the construction and modification of a constraint applied to an Entity Data Model (EDM) association.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmMetadataItem">
            <summary>
            The base for all all Entity Data Model (EDM) types that support annotation using <see cref="T:System.Data.Edm.Common.DataModelAnnotation"/> and documentation using <see cref="T:System.Data.Edm.Common.DataModelDocumentation"/>.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmDataModelItem">
            <summary>
            EdmDataModelItem is the base for all types in the Entity Data Model (EDM) metadata construction and modification API.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmDataModelItem.ItemKind">
            <summary>
            Gets an <see cref="T:System.Data.Edm.EdmItemKind"/> value indicating which Entity Data Model (EDM) concept is represented by this item.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmMetadataItem.Documentation">
            <summary>
            Gets or sets the currently assigned documentation.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmMetadataItem.Annotations">
            <summary>
            Gets or sets the currently assigned annotations.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmMetadataItem.ChildItems">
            <summary>
            Returns all EdmItem children directly contained by this EdmItem.
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmAssociationConstraint.#ctor">
            <summary>
            Constructs a new EdmAssociationConstraint.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmAssociationConstraint.DependentEnd">
            <summary>
            Gets or sets the <see cref="T:System.Data.Edm.EdmAssociationEnd"/> that represents the 'dependent' end of the constraint; properties from this association end's entity type contribute to the <see cref="P:System.Data.Edm.EdmAssociationConstraint.DependentProperties"/> collection.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmAssociationConstraint.DependentProperties">
            <summary>
            Gets or sets the collection of <see cref="T:System.Data.Edm.EdmProperty"/> instances from the <see cref="P:System.Data.Edm.EdmAssociationConstraint.DependentEnd"/> of the constraint. The values of these properties are constrained against the primary key values of the remaining, 'principal' association end's entity type.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmAssociationEnd">
            <summary>
            Allows the construction and modification of one end of an Entity Data Model (EDM) association.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmStructuralMember">
            <summary>
            EdmStructuralMember is the base for all types that represent members of structural items in the Entity Data Model (EDM) metadata construction and modification API.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmNamedMetadataItem">
            <summary>
            The base for all all Entity Data Model (EDM) item types that with a <see cref="P:System.Data.Edm.EdmNamedMetadataItem.Name"/> property.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmNamedMetadataItem.Name">
            <summary>
            Gets or sets the currently assigned name.
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmAssociationEnd.#ctor">
            <summary>
            Constructs a new EdmAssociationEnd.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmAssociationEnd.EntityType">
            <summary>
            Gets or sets the entity type referenced by this association end.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmAssociationEnd.EndKind">
            <summary>
            Gets or sets the <see cref="T:System.Data.Edm.EdmAssociationEndKind"/> of this association end, which indicates the multiplicity of the end and whether or not it is required.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmAssociationEnd.DeleteAction">
            <summary>
            Gets or sets the <see cref="T:System.Data.Edm.EdmOperationAction"/> to take when a delete operation is attempted.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmAssociationEndKind">
            <summary>
            Indicates the multiplicity of an <see cref="T:System.Data.Edm.EdmAssociationEnd"/> and whether or not it is required.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmAssociationSet">
            <summary>
            Allows the construction and modification of an association set in an Entity Data Model (EDM) <see cref="T:System.Data.Edm.EdmEntityContainer"/>).
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmEntityContainerItem">
            <summary>
            Represents an item in an Entity Data Model (EDM) <see cref="T:System.Data.Edm.EdmEntityContainer"/>.
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmAssociationSet.#ctor">
            <summary>
            Constructs a new EdmEntitySetBuilder.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmAssociationSet.ElementType">
            <summary>
            Gets or sets the <see cref="T:System.Data.Edm.EdmAssociationType"/> that specifies the association type for the set.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmAssociationSet.SourceSet">
            <summary>
            Gets or sets the <see cref="T:System.Data.Edm.EdmEntitySet"/> that specifies the entity set corresponding to the <see cref="P:System.Data.Edm.EdmAssociationType.SourceEnd"/> association end for this association set.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmAssociationSet.TargetSet">
            <summary>
            Gets or sets the <see cref="T:System.Data.Edm.EdmEntitySet"/> that specifies the entity set corresponding to the <see cref="P:System.Data.Edm.EdmAssociationType.TargetEnd"/> association end for this association set.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:System.Data.Edm.EdmAssociationType" -->
        <member name="T:System.Data.Edm.EdmStructuralType">
            <summary>
            The base for all all Entity Data Model (EDM) types that represent a structured type from the EDM type system.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmDataModelType">
            <summary>
            The base for all all Entity Data Model (EDM) types that represent a type from the EDM type system.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmNamespaceItem">
            <summary>
            Represents an item in an Entity Data Model (EDM) <see cref="T:System.Data.Edm.EdmNamespace"/>.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmDataModelType.IsAbstract">
            <summary>
            Gets a value indicating whether this type is abstract. 
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmDataModelType.BaseType">
            <summary>
            Gets the optional base type of this type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmDataModelType.IsAssociationType">
            <summary>
            Indicates whether this type is an <see cref="T:System.Data.Edm.EdmAssociationType"/>.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmDataModelType.IsComplexType">
            <summary>
            Indicates whether this type is an <see cref="T:System.Data.Edm.EdmComplexType"/>.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmDataModelType.IsEntityType">
            <summary>
            Indicates whether this type is an <see cref="T:System.Data.Edm.EdmEntityType"/>.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmDataModelType.IsPrimitiveType">
            <summary>
            Indicates whether this type is an <see cref="T:System.Data.Edm.EdmEntityType"/>.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmDataModelType.IsRefType">
            <summary>
            Indicates whether this type is an <see cref="T:System.Data.Edm.EdmRefType"/>.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmDataModelType.IsRowType">
            <summary>
            Indicates whether this type is an <see cref="T:System.Data.Edm.EdmRowType"/>.
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmAssociationType.#ctor">
            <summary>
            Constructs a new EdmAssociationType.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmAssociationType.SourceEnd">
            <summary>
            Gets or sets the <see cref="T:System.Data.Edm.EdmAssociationEnd"/> that defines the source end of the association.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmAssociationType.TargetEnd">
            <summary>
            Gets or sets the <see cref="T:System.Data.Edm.EdmAssociationEnd"/> that defines the target end of the association.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmAssociationType.Constraint">
            <summary>
            Gets or sets the optional constraint that indicates whether the relationship is an independent association (no constraint present) or a foreign key relationship (<see cref="T:System.Data.Edm.EdmAssociationConstraint"/> specified).
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmCollectionKind">
            <summary>
            Collection semantics for properties.
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmCollectionKind.Default">
            <summary>
            The property does not have a collection type or does not specify explicit collection semantics.
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmCollectionKind.Bag">
            <summary>
            The property is an unordered collection that may contain duplicates.
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmCollectionKind.List">
            <summary>
            The property is an ordered collection that may contain duplicates.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmComplexType">
            <summary>
            Allows the construction and modification of a complex type in an Entity Data Model (EDM) <see cref="T:System.Data.Edm.EdmNamespace"/>.
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmComplexType.#ctor">
            <summary>
            Constructs a new EdmComplexType.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmComplexType.BaseType">
            <summary>
            Gets or sets the optional <see cref="T:System.Data.Edm.EdmComplexType"/> that indicates the base complex type of the complex type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmComplexType.IsAbstract">
            <summary>
            Gets or sets a value indicating whether the complex type is abstract.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmComplexType.DeclaredProperties">
            <summary>
            Gets or sets the collection of <see cref="T:System.Data.Edm.EdmProperty"/> instances that describe the (scalar or complex) properties of the complex type.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmConcurrencyMode">
            <summary>
            Concurrency mode for properties.
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmConcurrencyMode.None">
            <summary>
            Default concurrency mode: the property is never validated
            at write time
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmConcurrencyMode.Fixed">
            <summary>
            Fixed concurrency mode: the property is always validated at 
            write time
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmEntityContainer">
            <summary>
            Allows the construction and modification of an entity container in an Entity Data Model (EDM) <see cref="T:System.Data.Edm.EdmModel"/>.
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmEntityContainer.#ctor">
            <summary>
            Constructs a new EdmEntityContainer.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmEntityContainer.ContainerItems">
            <summary>
            Gets all <see cref="T:System.Data.Edm.EdmEntityContainerItem"/>s declared within the namspace. Includes <see cref="T:System.Data.Edm.EdmAssociationSet"/>s, <see cref="T:System.Data.Edm.EdmEntitySet"/>s and <see cref="T:System.Data.Edm.EdmFunctionImport"/>s.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmEntityContainer.AssociationSets">
            <summary>
            Gets or sets the collection of <see cref="T:System.Data.Edm.EdmAssociationSet"/>s that specifies the association sets within the container.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmEntityContainer.EntitySets">
            <summary>
            Gets or sets the collection of <see cref="T:System.Data.Edm.EdmEntitySet"/>s that specifies the entity sets within the container.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmEntityContainer.FunctionImports">
            <summary>
            Gets or sets the collection of <see cref="T:System.Data.Edm.EdmFunctionImport"/>s that specifies the imported functions within the container.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmEntitySet">
            <summary>
            Allows the construction and modification of an entity set in an Entity Data Model (EDM) <see cref="T:System.Data.Edm.EdmEntityContainer"/>.
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmEntitySet.#ctor">
            <summary>
            Constructs a new EdmEntitySet.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmEntitySet.ElementType">
            <summary>
            Gets or sets the <see cref="T:System.Data.Edm.EdmEntityType"/> that specifies the entity type for the set.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmEntityType">
            <summary>
            Allows the construction and modification of an entity type in an Entity Data Model (EDM) <see cref="T:System.Data.Edm.EdmNamespace"/>.
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmEntityType.#ctor">
            <summary>
            Constructs a new EdmEntityType.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmEntityType.BaseType">
            <summary>
            Gets or sets the optional <see cref="T:System.Data.Edm.EdmEntityType"/> that indicates the base entity type of the entity type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmEntityType.IsAbstract">
            <summary>
            Gets or sets a value indicating whether the entity type is abstract.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmEntityType.DeclaredProperties">
            <summary>
            Gets or sets the collection of <see cref="T:System.Data.Edm.EdmProperty"/>s that specifies the properties declared by the entity type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmEntityType.DeclaredKeyProperties">
            <summary>
            Gets or sets the collection of <see cref="T:System.Data.Edm.EdmProperty"/>s that indicates which properties from the <see cref="P:System.Data.Edm.EdmEntityType.DeclaredProperties"/> collection are part of the entity key.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmEntityType.DeclaredNavigationProperties">
            <summary>
            Gets or sets the optional collection of <see cref="T:System.Data.Edm.EdmNavigationProperty"/>s that specifies the navigation properties declared by the entity type.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmFunctionGroup">
            <summary>
            Allow the construction and modification of a function group in an Entity Data Model (EDM) <see cref="T:System.Data.Edm.EdmNamespace"/>. Function groups contain one or more overloads of a function with a specific name.
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmFunctionGroup.#ctor">
            <summary>
            Constructs a new EdmFunctionGroup.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmFunctionGroup.Overloads">
            <summary>
            Gets or sets the current <see cref="T:System.Data.Edm.EdmFunctionOverload"/>s defined for this function group.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmFunctionImport">
            <summary>
            Allows the construction and modification of an Entity Data Model (EDM) function import. Function imports allow a storage model function to appear in (and optionally contribute to an entity set in) an entity model.
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmFunctionImport.#ctor">
            <summary>
            Constructs a new EdmFunctionImportBuilder.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmFunctionImport.ReturnType">
            <summary>
            Gets or sets an <see cref="T:System.Data.Edm.EdmTypeReference"/> that specifies the type of the function's return parameter.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmFunctionImport.Parameters">
            <summary>
            Gets or sets the collection of <see cref="T:System.Data.Edm.EdmFunctionParameter"/>s that specifies the parameters defined by the function.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmFunctionImport.EntitySet">
            <summary>
            Gets or sets an optional value that indicates the entity set in which entity instances produced by the function import should be considered members.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmFunctionImport.IsComposable">
            <summary>
            Gets or sets a value indicating whether invocations of the imported function can be composed with other operations.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmFunctionOverload">
            <summary>
            Allow the construction and modification of a function overload group in an Entity Data Model (EDM) <see cref="T:System.Data.Edm.EdmFunctionGroup"/>. Each function overload in a group must contain a unique combination of parameter and return types.
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmFunctionOverload.#ctor">
            <summary>
            Constructs a new EdmFunctionOverload.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmFunctionOverload.ReturnType">
            <summary>
            Gets or sets an <see cref="T:System.Data.Edm.EdmTypeReference"/> that specifies the type of the function overload's return parameter.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmFunctionOverload.Parameters">
            <summary>
            Gets or sets the collection of <see cref="T:System.Data.Edm.EdmFunctionParameter"/>s that specifies the parameters defined by the function overload.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmFunctionOverload.DefiningQuery">
            <summary>
            Gets or sets an optional value that provides the function definition if the function overload is a Model Defined Function.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmFunctionParameter">
            <summary>
            Allows the construction and modification of a parameter to an Entity Data Model (EDM) function, including <see cref="T:System.Data.Edm.EdmFunctionOverload"/> and <see cref="T:System.Data.Edm.EdmFunctionImport"/>.
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmFunctionParameter.#ctor">
            <summary>
            Constructs a new EdmFunctionParameterBuilder.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmFunctionParameter.ParameterType">
            <summary>
            Gets or sets an <see cref="T:System.Data.Edm.EdmTypeReference"/> that specifies the parameter type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmFunctionParameter.Mode">
            <summary>
            Gets or sets a value indicating the <see cref="T:System.Data.Edm.EdmParameterMode"/> of the parameter.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmItemKind">
            <summary>
            Indicates which Entity Data Model (EDM) concept is represented by a given item.
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.AssociationEnd">
            <summary>
            Association End Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.AssociationSet">
            <summary>
            Association Set Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.AssociationType">
            <summary>
            Association Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.CollectionType">
            <summary>
            Collection Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.ComplexType">
            <summary>
            Complex Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.EntityContainer">
            <summary>
            Entity Container Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.EntitySet">
            <summary>
            Entity Set Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.EntityType">
            <summary>
            Entity Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.FunctionGroup">
            <summary>
            Function Group Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.FunctionOverload">
            <summary>
            Function Overload Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.FunctionImport">
            <summary>
            Function Import Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.FunctionParameter">
            <summary>
            Function Parameter Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.NavigationProperty">
            <summary>
            Navigation Property Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.Property">
            <summary>
            EdmProperty Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.AssociationConstraint">
            <summary>
            Association Constraint Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.RefType">
            <summary>
            Ref Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.RowColumn">
            <summary>
            Row Column Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.RowType">
            <summary>
            Row Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.TypeReference">
            <summary>
            Type Reference Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.Model">
            <summary>
            Model Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.Namespace">
            <summary>
            Namespace Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.PrimitiveFacets">
            <summary>
            Primitive Facets Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmItemKind.PrimitiveType">
            <summary>
            Primitive Type Kind
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmModel">
            <summary>
            EdmModel is the top-level container for namespaces and entity containers belonging to the same logical Entity Data Model (EDM) model.
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmModel.#ctor">
            <summary>
            Constructs a new EdmModel.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmModel.Version">
            <summary>
            Gets or sets an optional value that indicates the entity model version.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmModel.Containers">
            <summary>
            Gets or sets the containers declared within the model.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmModel.Namespaces">
            <summary>
            Gets or sets the namespaces declared within the model.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmNamespace">
            <summary>
            Allows the construction and modification of a namespace in an <see cref="T:System.Data.Edm.EdmModel"/>. 
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmNamespace.#ctor">
            <summary>
            Constructs a new EdmNamespace.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmNamespace.NamespaceItems">
            <summary>
            Gets all <see cref="T:System.Data.Edm.EdmNamespaceItem"/>s declared within the namspace. Includes <see cref="T:System.Data.Edm.EdmAssociationType"/>s, <see cref="T:System.Data.Edm.EdmComplexType"/>s, <see cref="T:System.Data.Edm.EdmEntityType"/>s and <see cref="T:System.Data.Edm.EdmFunctionGroup"/>s.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmNamespace.AssociationTypes">
            <summary>
            Gets or sets the <see cref="T:System.Data.Edm.EdmAssociationType"/>s declared within the namespace.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmNamespace.ComplexTypes">
            <summary>
            Gets or sets the <see cref="T:System.Data.Edm.EdmComplexType"/>s declared within the namespace.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmNamespace.EntityTypes">
            <summary>
            Gets or sets the <see cref="T:System.Data.Edm.EdmEntityType"/>s declared within the namespace.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmNamespace.FunctionGroups">
            <summary>
            Gets or sets the <see cref="T:System.Data.Edm.EdmFunctionGroup"/>s declared within the namespace.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmNavigationProperty">
            <summary>
            Allows the construction and modification of an Entity Data Model (EDM) navigation property.
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmNavigationProperty.#ctor">
            <summary>
            Constructs a new EdmNavigationProperty.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmNavigationProperty.Association">
            <summary>
            Gets or sets the <see cref="T:System.Data.Edm.EdmAssociationType"/> that specifies the association over which navigation takes place.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmNavigationProperty.ResultEnd">
            <summary>
            Gets or sets the <see cref="T:System.Data.Edm.EdmAssociationEnd"/> that specifies which association end is the 'destination' end of the navigation and produces the navigation property result. 
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmOperationAction">
            <summary>
            Specifies the action to take on a given operation.
            <seealso cref="P:System.Data.Edm.EdmAssociationEnd.DeleteAction"/>
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmOperationAction.None">
            <summary>
            Default behavior
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmOperationAction.Restrict">
            <summary>
            Restrict the operation
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmOperationAction.Cascade">
            <summary>
            Cascade the operation
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmPrimitiveType">
            <summary>
            Represents one of the fixed set of Entity Data Model (EDM) primitive types.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmScalarType">
            <summary>
            The base for all all Entity Data Model (EDM) types that represent a scalar type from the EDM type system.
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmPrimitiveType.TryGetByName(System.String,System.Data.Edm.EdmPrimitiveType@)">
            <summary>
            Retrieves the EdmPrimitiveType instance with the <see cref="T:System.Data.Edm.EdmPrimitiveTypeKind"/> corresponding to the specified <paramref name="primitiveTypeName"/> value, if any.
            </summary>
            <param name="primitiveTypeName">The name of the primitive type instance to retrieve</param>
            <param name="primitiveType">The EdmPrimitiveType with the specified name, if successful; otherwise <c>null</c>.</param>
            <returns><c>true</c> if the given name corresponds to an EDM primitive type name; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveType.Binary">
            <summary>
            Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Edm.EdmPrimitiveTypeKind.Binary"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveType.Boolean">
            <summary>
            Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Edm.EdmPrimitiveTypeKind.Boolean"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveType.Byte">
            <summary>
            Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Edm.EdmPrimitiveTypeKind.Byte"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveType.DateTime">
            <summary>
            Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Edm.EdmPrimitiveTypeKind.DateTime"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveType.DateTimeOffset">
            <summary>
            Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Edm.EdmPrimitiveTypeKind.DateTimeOffset"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveType.Decimal">
            <summary>
            Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Edm.EdmPrimitiveTypeKind.Decimal"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveType.Double">
            <summary>
            Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Edm.EdmPrimitiveTypeKind.Double"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveType.Guid">
            <summary>
            Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Edm.EdmPrimitiveTypeKind.Guid"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveType.Int16">
            <summary>
            Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Edm.EdmPrimitiveTypeKind.Int16"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveType.Int32">
            <summary>
            Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Edm.EdmPrimitiveTypeKind.Int32"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveType.Int64">
            <summary>
            Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Edm.EdmPrimitiveTypeKind.Int64"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveType.SByte">
            <summary>
            Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Edm.EdmPrimitiveTypeKind.SByte"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveType.Single">
            <summary>
            Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Edm.EdmPrimitiveTypeKind.Single"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveType.String">
            <summary>
            Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Edm.EdmPrimitiveTypeKind.String"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveType.Time">
            <summary>
            Gets the EdmPrimitiveType instance that represents the <see cref="F:System.Data.Edm.EdmPrimitiveTypeKind.Time"/> primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveType.PrimitiveTypeKind">
            <summary>
            Gets an <see cref="T:System.Data.Edm.EdmPrimitiveTypeKind"/> value that indicates which Entity Data Model (EDM) primitive type this type represents.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmPrimitiveTypeFacets">
            <summary>
            Allows the construction and modification of additional constraints that can be applied to a specific use of a primitive type in an Entity Data Model (EDM) item. See <see cref="T:System.Data.Edm.EdmTypeReference"/>.
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmPrimitiveTypeFacets.#ctor">
            <summary>
            Constructs a new EdmPrimitiveTypeFacetsBuilder.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveTypeFacets.HasValue">
            <summary>
            Returns <code>true</code> if any facet value property currently has a non-null value; otherwise returns <code>false</code>.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveTypeFacets.MaxLength">
            <summary>
            Gets or sets an optional value indicating the current constraint on the type's maximum length.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveTypeFacets.IsMaxLength">
            <summary>
            Gets or sets an optional value indicating whether the referenced type should be considered to have its intrinsic maximum length, rather than a specific value.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveTypeFacets.IsFixedLength">
            <summary>
            Gets or sets an optional value indicating whether the referenced type should be considered to have a fixed or variable length.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveTypeFacets.IsUnicode">
            <summary>
            Gets or sets an optional value indicating whether the referenced type should be considered to be Unicode or non-Unicode.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveTypeFacets.Precision">
            <summary>
            Gets or sets an optional value indicating the current constraint on the type's precision.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmPrimitiveTypeFacets.Scale">
            <summary>
            Gets or sets an optional value indicating the current constraint on the type's scale.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmPrimitiveTypeKind">
            <summary>
            Primitive Types as defined by the Entity Data Model (EDM).
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmPrimitiveTypeKind.Binary">
            <summary>
            Binary Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmPrimitiveTypeKind.Boolean">
            <summary>
            Boolean Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmPrimitiveTypeKind.Byte">
            <summary>
            Byte Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmPrimitiveTypeKind.DateTime">
            <summary>
            DateTime Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmPrimitiveTypeKind.Decimal">
            <summary>
            Decimal Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmPrimitiveTypeKind.Double">
            <summary>
            Double Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmPrimitiveTypeKind.Guid">
            <summary>
            Guid Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmPrimitiveTypeKind.Single">
            <summary>
            Single Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmPrimitiveTypeKind.SByte">
            <summary>
            SByte Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmPrimitiveTypeKind.Int16">
            <summary>
            Int16 Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmPrimitiveTypeKind.Int32">
            <summary>
            Int32 Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmPrimitiveTypeKind.Int64">
            <summary>
            Int64 Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmPrimitiveTypeKind.String">
            <summary>
            String Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmPrimitiveTypeKind.Time">
            <summary>
            Time Type Kind
            </summary>
        </member>
        <member name="F:System.Data.Edm.EdmPrimitiveTypeKind.DateTimeOffset">
            <summary>
            DateTimeOffset Type Kind
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmProperty">
            <summary>
            Allows the construction and modification of a primitive- or complex-valued property of an Entity Data Model (EDM) entity or complex type.
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmProperty.#ctor">
            <summary>
            Constructs a new EdmProperty.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmProperty.CollectionKind">
            <summary>
            Gets or sets an <see cref="T:System.Data.Edm.EdmCollectionKind"/> value that indicates which collection semantics - if any - apply to the property.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmProperty.ConcurrencyMode">
            <summary>
            Gets or sets a <see cref="T:System.Data.Edm.EdmConcurrencyMode"/> value that indicates whether the property is used for concurrency validation.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmProperty.DefaultValue">
            <summary>
            Gets or sets on optional value that indicates an initial default value for the property.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmProperty.PropertyType">
            <summary>
            Gets or sets an <see cref="T:System.Data.Edm.EdmTypeReference"/> that specifies the result type of the property.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmRefType">
            <summary>
            Allows the construction and modification of a an Entity Data Model (EDM) entity reference (Ref) type.
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmRefType.#ctor">
            <summary>
            Constructs a new EdmRefType.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmRefType.EntityType">
            <summary>
            Gets or sets the <see cref="T:System.Data.Edm.EdmEntityType"/> that this Ref type represents a reference to.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmRowColumn">
            <summary>
            Allows the construction and modification of a column of an Entity Data Model (EDM) row type.
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmRowColumn.#ctor">
            <summary>
            Constructs a new EdmRowColumn.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmRowColumn.ColumnType">
            <summary>
            Gets or sets an <see cref="T:System.Data.Edm.EdmTypeReference"/> that specifies the result type of the column.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmRowType">
            <summary>
            Allows the construction and modification of a an Entity Data Model (EDM) row type.
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmRowType.#ctor">
            <summary>
            Constructs a new EdmRowType.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmRowType.Columns">
            <summary>
            Gets or sets the columns that define the structure of the row type.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmStructuralTypeMemberCollection">
            <summary>
            Enumerates all <see cref="T:System.Data.Edm.EdmStructuralMember"/>s declared or inherited by an <see cref="T:System.Data.Edm.EdmStructuralType"/>.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmStructuralTypeMemberCollection.DeclaredOnly">
            <summary>
            Returns only the members that are declared by the structural type, without those members that are inherited from any base types.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmTypeReference">
            <summary>
            Allows the construction and modification of a specific use of a type in an Entity Data Model (EDM) item. See <see cref="P:System.Data.Edm.EdmProperty.PropertyType"/> and <see cref="P:System.Data.Edm.EdmFunctionParameter.ParameterType"/> for examples.
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmTypeReference.#ctor">
            <summary>
            Constructs a new EdmTypeReference.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReference.CollectionRank">
            <summary>
            Gets or sets a value indicating the collection rank of the type reference. A collection rank greater than zero indicates that the type reference represents a collection of its referenced <see cref="P:System.Data.Edm.EdmTypeReference.EdmType"/>.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReference.EdmType">
            <summary>
            Gets or sets a value indicating the <see cref="T:System.Data.Edm.EdmDataModelType"/> referenced by this type reference.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReference.IsNullable">
            <summary>
            Gets or sets an optional value indicating whether the referenced type should be considered nullable.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReference.PrimitiveTypeFacets">
            <summary>
            Gets or sets an optional <see cref="T:System.Data.Edm.EdmPrimitiveTypeFacets"/> instance that applies additional constraints to a referenced primitive type.
            </summary>
            <remarks>Accessing this property forces the creation of an EdmPrimitiveTypeFacets value if no value has previously been set. Use <see cref="P:System.Data.Edm.EdmTypeReference.HasFacets"/> to determine whether or not this property currently has a value.</remarks>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReference.HasFacets">
            <summary>
            Gets a value indicating whether the <see cref="P:System.Data.Edm.EdmTypeReference.PrimitiveTypeFacets"/> property of this type reference has been assigned an <see cref="T:System.Data.Edm.EdmPrimitiveTypeFacets"/> value with at least one facet value specified.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReference.IsCollectionType">
            <summary>
            Indicates whether this type reference represents a collection of its referenced <see cref="P:System.Data.Edm.EdmTypeReference.EdmType"/> (when <see cref="P:System.Data.Edm.EdmTypeReference.CollectionRank"/> is greater than zero) or not.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReference.CollectionElementType">
            <summary>
            Gets an <see cref="T:System.Data.Edm.EdmTypeReferenceElementType"/> instance that can be used to inspect the element type of this type reference if it represents a collection (when <see cref="P:System.Data.Edm.EdmTypeReference.CollectionRank"/> is greater than zero).
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReference.IsAssociationType">
            <summary>
            Indicates whether the <see cref="P:System.Data.Edm.EdmTypeReference.EdmType"/> property of this type reference currently refers to an <see cref="T:System.Data.Edm.EdmAssociationType"/>, is not a collection type, and does not have primitive facet values specified.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReference.AssociationType">
            <summary>
            Gets the <see cref="T:System.Data.Edm.EdmAssociationType"/> currently referred to by this type reference, or <code>null</code> if the type reference is a collection type or does not refer to an association type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReference.IsComplexType">
            <summary>
            Indicates whether the <see cref="P:System.Data.Edm.EdmTypeReference.EdmType"/> property of this type reference currently refers to an <see cref="T:System.Data.Edm.EdmComplexType"/>, is not a collection type, and does not have primitive facet values specified.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReference.ComplexType">
            <summary>
            Gets the <see cref="T:System.Data.Edm.EdmComplexType"/> currently referred to by this type reference, or <code>null</code> if the type reference is a collection type or does not refer to a complex type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReference.IsEntityType">
            <summary>
            Indicates whether the <see cref="P:System.Data.Edm.EdmTypeReference.EdmType"/> property of this type reference currently refers to an <see cref="T:System.Data.Edm.EdmEntityType"/>, is not a collection type, and does not have primitive facet values specified.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReference.EntityType">
            <summary>
            Gets the <see cref="T:System.Data.Edm.EdmEntityType"/> currently referred to by this type reference, or <code>null</code> if the type reference is a collection type or does not refer to an entity type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReference.IsPrimitiveType">
            <summary>
            Indicates whether the <see cref="P:System.Data.Edm.EdmTypeReference.EdmType"/> property of this type reference currently refers to an <see cref="T:System.Data.Edm.EdmPrimitiveType"/> and is not a collection type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReference.PrimitiveType">
            <summary>
            Gets the <see cref="T:System.Data.Edm.EdmPrimitiveType"/> currently referred to by this type reference, or <code>null</code> if the type reference is a collection type or does not refer to a primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReference.IsRefType">
            <summary>
            Indicates whether the <see cref="P:System.Data.Edm.EdmTypeReference.EdmType"/> property of this type reference currently refers to an <see cref="T:System.Data.Edm.EdmRefType"/>, is not a collection type, and does not have primitive facet values specified.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReference.RefType">
            <summary>
            Gets the <see cref="T:System.Data.Edm.EdmRefType"/> currently referred to by this type reference, or <code>null</code> if the type reference does not refer to a ref type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReference.IsRowType">
            <summary>
            Indicates whether the <see cref="P:System.Data.Edm.EdmTypeReference.EdmType"/> property of this type reference currently refers to an <see cref="T:System.Data.Edm.EdmRowType"/>, is not a collection type, and does not have primitive facet values specified.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReference.RowType">
            <summary>
            Gets the <see cref="T:System.Data.Edm.EdmRowType"/> currently referred to by this type reference, or <code>null</code> if the type reference does not refer to a row type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReferenceElementType.EdmType">
            <summary>
            Gets the <see cref="T:System.Data.Edm.EdmDataModelType"/> referenced by this collection element type, or <c>null</c> if this element type's parent <see cref="T:System.Data.Edm.EdmTypeReference"/> does not represent a collection type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReferenceElementType.IsAssociationType">
            <summary>
            Returns <c>true</c> if this element type's parent <see cref="T:System.Data.Edm.EdmTypeReference"/> represents a collection type and refers to an <see cref="T:System.Data.Edm.EdmAssociationType"/>; otherwise returns <c>false</c>.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReferenceElementType.AssociationType">
            <summary>
            Gets this collection element type's <see cref="P:System.Data.Edm.EdmTypeReferenceElementType.EdmType"/> as an <see cref="T:System.Data.Edm.EdmAssociationType"/>, or <code>null</code> if this element type's parent <see cref="T:System.Data.Edm.EdmTypeReference"/> does not represent a collection type or does not refer to an association type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReferenceElementType.IsComplexType">
            <summary>
            Returns <c>true</c> if this element type's parent <see cref="T:System.Data.Edm.EdmTypeReference"/> represents a collection type and refers to an <see cref="T:System.Data.Edm.EdmComplexType"/>; otherwise returns <c>false</c>.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReferenceElementType.ComplexType">
            <summary>
            Gets this collection element type's <see cref="P:System.Data.Edm.EdmTypeReferenceElementType.EdmType"/> as an <see cref="T:System.Data.Edm.EdmComplexType"/>, or <code>null</code> if this element type's parent <see cref="T:System.Data.Edm.EdmTypeReference"/> does not represent a collection type or does not refer to a complex type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReferenceElementType.IsEntityType">
            <summary>
            Returns <c>true</c> if this element type's parent <see cref="T:System.Data.Edm.EdmTypeReference"/> represents a collection type and refers to an <see cref="T:System.Data.Edm.EdmEntityType"/>; otherwise returns <c>false</c>.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReferenceElementType.EntityType">
            <summary>
            Gets this collection element type's <see cref="P:System.Data.Edm.EdmTypeReferenceElementType.EdmType"/> as an <see cref="T:System.Data.Edm.EdmEntityType"/>, or <code>null</code> if this element type's parent <see cref="T:System.Data.Edm.EdmTypeReference"/> does not represent a collection type or does not refer to an entity type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReferenceElementType.IsPrimitiveType">
            <summary>
            Returns <c>true</c> if this element type's parent <see cref="T:System.Data.Edm.EdmTypeReference"/> represents a collection type and refers to an <see cref="T:System.Data.Edm.EdmPrimitiveType"/>; otherwise returns <c>false</c>.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReferenceElementType.PrimitiveType">
            <summary>
            Gets this collection element type's <see cref="P:System.Data.Edm.EdmTypeReferenceElementType.EdmType"/> as an <see cref="T:System.Data.Edm.EdmPrimitiveType"/>, or <code>null</code> if this element type's parent <see cref="T:System.Data.Edm.EdmTypeReference"/> does not represent a collection type or does not refer to a primitive type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReferenceElementType.IsRefType">
            <summary>
            Returns <c>true</c> if this element type's parent <see cref="T:System.Data.Edm.EdmTypeReference"/> represents a collection type and refers to an <see cref="T:System.Data.Edm.EdmRefType"/>; otherwise returns <c>false</c>.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReferenceElementType.RefType">
            <summary>
            Gets this collection element type's <see cref="P:System.Data.Edm.EdmTypeReferenceElementType.EdmType"/> as an <see cref="T:System.Data.Edm.EdmRefType"/>, or <code>null</code> if this element type's parent <see cref="T:System.Data.Edm.EdmTypeReference"/> does not represent a collection type or does not refer to a Ref type.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReferenceElementType.IsRowType">
            <summary>
            Returns <c>true</c> if this element type's parent <see cref="T:System.Data.Edm.EdmTypeReference"/> represents a collection type and refers to an <see cref="T:System.Data.Edm.EdmRowType"/>; otherwise returns <c>false</c>.
            </summary>
        </member>
        <member name="P:System.Data.Edm.EdmTypeReferenceElementType.RowType">
            <summary>
            Gets this collection element type's <see cref="P:System.Data.Edm.EdmTypeReferenceElementType.EdmType"/> as an <see cref="T:System.Data.Edm.EdmRowType"/>, or <code>null</code> if this element type's parent <see cref="T:System.Data.Edm.EdmTypeReference"/> does not represent a collection type or does not refer to a row type.
            </summary>
        </member>
        <member name="T:System.Data.Edm.EdmConstants">
            <summary>
            Contains constant values that apply to the EDM model, regardless of source (for CSDL specific constants see <see cref="T:System.Data.Edm.Parsing.Xml.Internal.Csdl.CsdlConstants"/>).
            </summary>
        </member>
        <member name="M:System.Data.Edm.EdmUtil.IsValidUndottedName(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:System.Data.Edm.Parsing.DataModelArtifactParser">
            <summary>
            DataModelArtifactParser is the base class for all parsers of Entity Data Model (EDM) artifacts.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Common.DataModelItemParsedPropertyInfo">
            <summary>
            Represents the name and source artifact location of the definition of a parsed <see cref="T:System.Data.Edm.Common.DataModelItem"/> property when the value of that property is not another DataModelItem with its own location.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Common.DataModelItemParsedPropertyInfo.PropertyName">
            <summary>
            Gets the name of the parsed property.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Common.DataModelItemParsedPropertyInfo.LineNumber">
            <summary>
            Gets a value indicating the location in the source artifact of the line where the property is defined.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Common.DataModelItemParsedPropertyInfo.LinePosition">
            <summary>
            Gets a value indicating the position in the source artifact line indicated by <see cref="P:System.Data.Edm.Common.DataModelItemParsedPropertyInfo.LineNumber"/> where the property is defined.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Common.DataModelItemParsedEventArgs">
            <summary>
            Provides source artifact location information about a new item created by a data model artifact parser.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Common.DataModelItemParsedEventArgs.Artifact">
            <summary>
            Gets a value indicating the source artifact of the item.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Common.DataModelItemParsedEventArgs.LineNumber">
            <summary>
            Gets a value indicating the location in the source artifact of the line where the definition of the item begins.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Common.DataModelItemParsedEventArgs.LinePosition">
            <summary>
            Gets a value indicating the position in the source artifact line indicated by <see cref="P:System.Data.Edm.Common.DataModelItemParsedEventArgs.LineNumber"/> where the definition of the item begins.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Common.DataModelItemParsedEventArgs.PropertyLocations">
            <summary>
            Gets the names and locations of properties of the item that are not also <see cref="T:System.Data.Edm.Common.DataModelItem"/>s with their own item locations.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Parsing.DataModelParserErrorEventArgs">
            <summary>
            Represents the arguments provided when the <see cref="E:System.Data.Edm.Parsing.DataModelArtifactParser.OnError"/> is raised.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Parsing.DataModelParserErrorEventArgs.PropertyName">
            <summary>
            Gets an optional value indicating which property of the source item caused the event to be raised.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Parsing.DataModelParserErrorEventArgs.Artifact">
            <summary>
            Gets a value indicating the source artifact of the item.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Parsing.DataModelParserErrorEventArgs.LineNumber">
            <summary>
            Gets an optional value indicating the location in the source artifact of the line where the error ocurred.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Parsing.DataModelParserErrorEventArgs.LinePosition">
            <summary>
            Gets an optional value indicating the position in the source artifact line indicated by <see cref="P:System.Data.Edm.Parsing.DataModelParserErrorEventArgs.LineNumber"/> where the error ocurred.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Parsing.DataModelParserErrorEventArgs.ErrorCode">
            <summary>
            Gets a value that identifies the specific error that is being raised.
            </summary>
        </member>
        <member name="P:System.Data.Edm.Parsing.DataModelParserErrorEventArgs.ErrorMessage">
            <summary>
            Gets an optional descriptive message the describes the error that is being raised.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Parsing.Xml.CsdlParser">
            <summary>
            Provides for the loading and conversion of one or more CSDL XML readers into an <see cref="T:System.Data.Edm.EdmModel"/>
            </summary>
        </member>
        <member name="T:System.Data.Edm.Parsing.Xml.Internal.Csdl.CsdlConstants">
            <summary>
            Constants for CSDL XML.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Parsing.Xml.Internal.Csdl.CsdlDocumentParser">
            <summary>
            CSDL document parser.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Parsing.Xml.Internal.EdmXmlDocumentParser`1">
            <summary>
            Base class for XML readers used by parsers of XML EDM artifacts (CSDL, SSDL, Provider Manifest)
            </summary>
        </member>
        <member name="T:System.Data.Edm.Parsing.Xml.Internal.XmlDocumentParser">
            <summary>
            Base class for parsers of XML documents
            </summary>
        </member>
        <member name="M:System.Data.Edm.Parsing.Xml.Internal.EdmXmlDocumentParser`1.OnSchemaValidationEvent(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Called by the validating reader when the schema is xsd invalid
            </summary>
            <param name="sender">the validating reader</param>
            <param name="e">information about the validation error</param>
        </member>
        <member name="M:System.Data.Edm.Parsing.Xml.Internal.EdmXmlDocumentParser`1.BeginItem``1(``0)">
            <summary>
            Begins a new item that uses attribute values from the current XML element. 
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:System.Data.Edm.Parsing.Xml.Internal.Csdl.CsdlParserAction">
            <summary>
            Base class for all delayed resolution actions produced by the <see cref="T:System.Data.Edm.Parsing.Xml.Internal.Csdl.CsdlDocumentParser"/>.
            </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.Csdl.CsdlParserAction.Phase1">
            <summary>
            Indicates that a CSDL parser action should execute in the first action execution phase before the actions of any other phases.
            </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.Csdl.CsdlParserAction.Phase2">
            <summary>
            Indicates that a CSDL parser action should execute only after all actions from <see cref="F:System.Data.Edm.Parsing.Xml.Internal.Csdl.CsdlParserAction.Phase1"/> are complete.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Parsing.Xml.Internal.Csdl.CsdlParserAction.Execute(System.Data.Edm.EdmModel)">
            <summary>
            Executes the parser action in the context of the given <see cref="T:System.Data.Edm.EdmModel"/>.
            </summary>
            <param name="context">The <see cref="T:System.Data.Edm.EdmModel"/> within which the action should execute.</param>
        </member>
        <member name="P:System.Data.Edm.Parsing.Xml.Internal.Csdl.CsdlParserAction.Phase">
            <summary>
            Indicates which CSDL parser action execution phase this action should be executed in. Valid values are <see cref="F:System.Data.Edm.Parsing.Xml.Internal.Csdl.CsdlParserAction.Phase1"/> and <see cref="F:System.Data.Edm.Parsing.Xml.Internal.Csdl.CsdlParserAction.Phase2"/>.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Parsing.Xml.Internal.Csdl.CsdlSchemaResource.AddCsdlSchemaResourceMapEntries(System.Collections.Generic.Dictionary{System.String,System.Data.Edm.Parsing.Xml.Internal.XmlSchemaResource},System.Double)">
            <summary>
            Adds CSDL schema resource entries to the given XmlNamespace to XmlSchemaResoure map,
            when calling from XmlEdmParserReader.ComputeSchemaSet(), all the imported XSDs will be included.
            </summary>
            <param name="schemaResourceMap">The XmlNamespace to XmlSchemaResource map to add entries to.</param>
        </member>
        <member name="T:System.Data.Edm.Parsing.Xml.Internal.Csdl.EdmItemFactory">
            <summary>
            EdmItemFactory abstracts callers from the details of read-only vs. mutable DataModel items and modification of read-only instances.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Parsing.Xml.Internal.Csdl.ResolveAssociationSetEndsAction">
            <summary>
            Attempts to assign the 'SourceSet' and 'TargetSet' properties of an <see cref="T:System.Data.Edm.EdmAssociationSet"/> based on the 'Role' and 'EntitySet' attribute values from 'End'
            child elements of an 'AssociationSet' element. SetEndInfo instances representing the set information from these attributes are populated by the <see cref="T:System.Data.Edm.Parsing.Xml.Internal.Csdl.ResolveAssociationSetEndEntitySetAction"/> CSDL parser action.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Parsing.Xml.Internal.MslConstants">
            <summary>
            Constants for C-S MSL XML.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Parsing.Xml.Internal.PrimitiveValueParser">
            <summary>
            Methods taken from System.Data.Entity's SOM ScalarType class.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Parsing.Xml.Internal.PrimitiveValueParser.TryParseTime(System.String,System.Object@)">
            <summary>
            Parses the default value for Edm Type Time based on the DateTime format "HH:mm:ss.fffffffz".
            The value is first converted to DateTime value and then converted to TimeSpan.  
            </summary>
            <param name="text"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:System.Data.Edm.Parsing.Xml.Internal.ProviderManifestConstants">
            <summary>
            Class that contains all the constants for various schemas
            </summary>
        </member>
        <member name="T:System.Data.Edm.Parsing.Xml.Internal.SsdlConstants">
            <summary>
            Constants for SSDL XML.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Parsing.Xml.Internal.XmlConstants">
            <summary>
            XML-related constants that are not artifact-specific.
            </summary>
        </member>
        <member name="T:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode">
            <summary>
            The acceptable range for this enum is 0000 - 0999; the range 10,000-15,000 is reserved for tools.
            </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidErrorCodeValue">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.SecurityError">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.IOException">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.XmlError">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.TooManyErrors">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.MalformedXml">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.UnexpectedXmlNodeType">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.UnexpectedXmlAttribute">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.UnexpectedXmlElement">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.TextNotAllowed">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.EmptyFile">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.XsdError">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidAlias">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.MissingAttribute">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.IntegerExpected">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidName">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.AlreadyDefined">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.ElementNotInSchema">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidBaseType">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.NoConcreteDescendants">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.CycleInTypeHierarchy">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidVersionNumber">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidSize">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidBoolean">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.BadType">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidVersioningClass">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidVersionIntroduced">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.BadNamespace">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.UnresolvedReferenceSchema">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.NotInNamespace">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.NotUnnestedType">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.BadProperty">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.UndefinedProperty">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidPropertyType">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidAsNestedType">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidChangeUnit">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.UnauthorizedAccessException">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.PrecisionOutOfRange">
            <summary> Precision out of range </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.ScaleOutOfRange">
            <summary> Scale out of range </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.DefaultNotAllowed">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidDefault">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.RequiredFacetMissing">
            <summary>One of the required facets is missing</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.BadImageFormatException">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.MissingSchemaXml">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.BadPrecisionAndScale">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidChangeUnitUsage">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.NameTooLong">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.CircularlyDefinedType">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidAssociation">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.FacetNotAllowedByType">
            <summary>
            The facet isn't allow by the property type.
            </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.ConstantFacetSpecifiedInSchema">
            <summary>
            This facet value is constant and is specified in the schema
            </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.BadNavigationProperty">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidKey">
            <summary></summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidMultiplicity">
            <summary>Multiplicity value was malformed</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidAction">
            <summary>The value for the Action attribute is invalid or not allowed in the current context</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidOperation">
            <summary>An error occured processing the On&lt;Operation&gt;  elements</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidContainerTypeForEnd">
            <summary>Ends were given for the Property element of a EntityContainer that is not a RelationshipSet</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidEndEntitySet">
            <summary>The extent name used in the EntittyContainerType End does not match the name of any of the EntityContainerProperties in the containing EntityContainer</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.AmbiguousEntityContainerEnd">
            <summary>An end element was not given, and cannot be inferred because too many EntityContainerEntitySet elements that are good possibilities.</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.MissingExtentEntityContainerEnd">
            <summary>An end element was not given, and cannot be infered because there is no EntityContainerEntitySets that are the correct type to be used as an EntitySet.</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.BadParameterDirection">
            <summary>Not a valid parameter direction for the parameter in a function</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.FailedInference">
            <summary>Unable to infer an optional schema part, to resolve this; be more explicit</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidFacetInProviderManifest">
            <summary> Invalid facet attribute(s) specified in provider manifest</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidRoleInRelationshipConstraint">
            <summary> Invalid role value in the relationship constraint</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidPropertyInRelationshipConstraint">
            <summary> Invalid Property in relationship constraint</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.TypeMismatchRelationshipConstraint">
            <summary> Type mismatch between ToProperty and FromProperty in the relationship constraint</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidMultiplicityInRoleInRelationshipConstraint">
            <summary> Invalid multiplicty in FromRole in the relationship constraint</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.MismatchNumberOfPropertiesInRelationshipConstraint">
            <summary> The number of properties in the FromProperty and ToProperty in the relationship constraint must be identical</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.MissingPropertyInRelationshipConstraint">
            <summary> No Properties defined in either FromProperty or ToProperty in the relationship constraint</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.MissingConstraintOnRelationshipType">
            <summary> Missing constraint in relationship type in ssdl</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.SameRoleReferredInReferentialConstraint">
            <summary> Same role referred in the ToRole and FromRole of a referential constraint </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidValueForParameterTypeSemantics">
            <summary> Invalid value for attribute ParameterTypeSemantics </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidRelationshipEndType">
            <summary> Invalid type used for a Relationship End Type</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidPrimitiveTypeKind">
            <summary> Invalid PrimitiveTypeKind</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidTypeConversionDestinationType">
            <summary> Invalid TypeConversion DestinationType</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.ByteValueExpected">
            <summary>Expected a integer value between 0 - 255</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.FunctionWithNonScalarTypeNotSupported">
            <summary> Invalid Type specified in function</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.PrecisionMoreThanAllowedMax">
            <summary> Precision must not be greater than 28 </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.EntityKeyMustBeScalar">
            <summary> Properties that are part of entity key must be of scalar type</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.BinaryEntityKeyCurrentlyNotSupported">
            <summary> Binary type properties which are part of entity key are currently not supported </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.NoPreferredMappingForPrimitiveTypeKind">
            <summary>The primitive type kind does not have a prefered mapping</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.TooManyPreferredMappingsForPrimitiveTypeKind">
            <summary>More than one PreferredMapping for a PrimitiveTypeKind</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.EndWithManyMultiplicityCannotHaveOperationsSpecified">
            <summary>End with * multiplicity cannot have operations specified</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.EntitySetTypeHasNoKeys">
            <summary>EntitySet type has no keys</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidNumberOfParametersForAggregateFunction">
            <summary>InvalidNumberOfParametersForAggregateFunction</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidParameterTypeForAggregateFunction">
            <summary>InvalidParameterTypeForAggregateFunction</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.ComposableFunctionWithoutReturnType">
            <summary>Composable functions must declare a return type.</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.NonComposableFunctionWithReturnType">
            <summary>Non-composable functions must not declare a return type.</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.NonComposableFunctionAttributesNotValid">
            <summary>Non-composable functions do not permit the aggregate; niladic; or built-in attributes.</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.ComposableFunctionWithCommandText">
            <summary>Composable functions can not include command text attribute.</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.FunctionDeclaresCommandTextAndStoreFunctionName">
            <summary>Functions should not declare both a store name and command text (only one or the other
            can be used).</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.SystemNamespace">
            <summary>SystemNamespace</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.EmptyDefiningQuery">
            <summary>Empty DefiningQuery text</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.TableAndSchemaAreMutuallyExclusiveWithDefiningQuery">
            <summary>Schema, Table and DefiningQuery are all specified, and are mutualy exlusive</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidConcurrencyMode">
            <summary>ConcurrencyMode value was malformed</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.ConcurrencyRedefinedOnSubTypeOfEntitySetType">
            <summary>Conurency can't change for any sub types of an EntitySet type.</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.FunctionImportUnsupportedReturnType">
            <summary>Function import return type must be either empty, a collection of entities, or a singleton scalar.</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.FunctionImportUnknownEntitySet">
            <summary>Function import specifies a non-existent entity set.</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.FunctionImportReturnsEntitiesButDoesNotSpecifyEntitySet">
            <summary>Function import specifies entity type return but no entity set.</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.FunctionImportEntityTypeDoesNotMatchEntitySet">
            <summary>Function import specifies entity type that does not derive from element type of entity set.</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.FunctionImportSpecifiesEntitySetButDoesNotReturnEntityType">
            <summary>Function import specifies a binding to an entity set but does not return entities.</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InternalError">
            <summary>InternalError</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.SimilarRelationshipEnd">
            <summary>Same Entity Set Taking part in the same role of the relationship set in two different relationship sets</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.DuplicatePropertySpecifiedInEntityKey">
            <summary> Entity key refers to the same property twice</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.AmbiguousFunctionReturnType">
            <summary> Function declares a ReturnType attribute and element</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.NullableComplexType">
            <summary> Nullable Complex Type not supported in Edm V1</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.NonComplexCollections">
            <summary> Only Complex Collections supported in Edm V1.1</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.KeyMissingOnEntityType">
            <summary>No Key defined on Entity Type </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidNamespaceInUsing">
            <summary> Invalid namespace specified in using element</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.NeedNotUseSystemNamespaceInUsing">
            <summary> Need not specify system namespace in using </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.CannotUseSystemNamespaceAsAlias">
            <summary> Cannot use a reserved/system namespace as alias </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidNamespaceName">
            <summary> Invalid qualification specified for type </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidEntityContainerNameInExtends">
            <summary> Invalid Entity Container Name in extends attribute </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidCollectionKind">
            <summary> Invalid CollectionKind value in property CollectionKind attribute</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidNamespaceOrAliasSpecified">
            <summary> Must specify namespace or alias of the schema in which this type is defined </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.EntityContainerCannotExtendItself">
            <summary> Entity Container cannot extend itself </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.FailedToRetrieveProviderManifest">
            <summary> Failed to retrieve provider manifest </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.ProviderManifestTokenMismatch">
            <summary> Mismatched Provider Manifest token values in SSDL artifacts </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.ProviderManifestTokenNotFound">
            <summary> Missing Provider Manifest token value in SSDL artifact(s) </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.EmptyCommandText">
            <summary>Empty CommandText element</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InconsistentProvider">
            <summary> Inconsistent Provider values in SSDL artifacts </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InconsistentProviderManifestToken">
            <summary> Inconsistent Provider Manifest token values in SSDL artifacts </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.DuplicatedFunctionoverloads">
            <summary> Duplicated Function overloads </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidProvider">
            <summary>InvalidProvider</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.FunctionWithNonEdmTypeNotSupported">
            <summary>FunctionWithNonEdmTypeNotSupported</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.ComplexTypeAsReturnTypeAndDefinedEntitySet">
            <summary>ComplexTypeAsReturnTypeAndDefinedEntitySet</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.ComplexTypeAsReturnTypeAndNestedComplexProperty">
            <summary>ComplexTypeAsReturnTypeAndDefinedEntitySet</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.FacetOnNonScalarType">
            unused 179,
            unused 180,
            unused 181,
            <summary>In model functions facet attribute is allowed only on ScalarTypes</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.IncorrectlyPlacedFacet">
            <summary>Captures several conditions where facets are placed on element where it should not exist.</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.ReturnTypeNotDeclared">
            <summary>Return type has not been declared</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.InvalidValueInEnumOption">
            <summary>Invalid value in the EnumTypeOption</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.NoCodeGenNamespaceInStructuralAnnotation">
            <summary> The structural annotation cannot use codegen namespaces </summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.AmbiguousFunctionAndType">
            <summary> Function and type cannot have the same fully qualified name</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.CannotLoadDifferentVersionOfSchemaInTheSameItemCollection">
            <summary> Cannot load different version of schema in the same ItemCollection</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.BoolValueExpected">
            <summary> Expected bool value</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.EndWithoutMultiplicity">
            <summary> End without Multiplicity specified</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.TVFReturnTypeRowHasNonScalarProperty">
            <summary>In SSDL, if composable function returns a collection of rows (TVF), all row properties must be of scalar types.</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.EdmModel_NameMustNotBeEmptyOrWhiteSpace">
            <summary> The name of NamedEdmItem must not be empty or white space only</summary>
        </member>
        <member name="F:System.Data.Edm.Parsing.Xml.Internal.XmlErrorCode.EdmAssociationType_AssocationEndMustNotBeNull">
            <summary> EdmTypeReference is empty</summary>
            Unused 199;
        </member>
        <member name="M:System.Data.Edm.Parsing.Xml.Internal.XmlSchemaResource.GetMetadataSchemaResourceMap">
            <summary>
            Builds a dictionary from XmlNamespace to XmlSchemaResource from both CSDL and SSDL up to the latest version.
            </summary>
            <returns>The built XmlNamespace to XmlSchemaResource dictionary.</returns>
        </member>
        <member name="M:System.Data.Edm.Parsing.Xml.Internal.XmlSchemaResource.GetMetadataSchemaResourceMap(System.Double)">
            <summary>
            Builds a dictionary from XmlNamespace to XmlSchemaResource from both CSDL and SSDL up to the specified version.
            </summary>
            <returns>The built XmlNamespace to XmlSchemaResource dictionary.</returns>
        </member>
        <member name="M:System.Data.Edm.Parsing.Xml.Internal.XmlSchemaResource.AddStoreSchemaResourceMapEntries(System.Collections.Generic.Dictionary{System.String,System.Data.Edm.Parsing.Xml.Internal.XmlSchemaResource},System.Double)">
            <summary>
            Adds Store schema resource entries to the given XmlNamespace to XmlSchemaResoure map
            </summary>
            <param name="schemaResourceMap">The XmlNamespace to XmlSchemaResource map to add entries to.</param>
        </member>
        <member name="M:System.Data.Edm.Parsing.Xml.Internal.XmlSchemaResource.AddMappingSchemaResourceMapEntries(System.Collections.Generic.Dictionary{System.String,System.Data.Edm.Parsing.Xml.Internal.XmlSchemaResource},System.Double)">
            <summary>
            Adds Mapping schema resource entries to the given XmlNamespace to XmlSchemaResoure map
            </summary>
            <param name="schemaResourceMap">The XmlNamespace to XmlSchemaResource map to add entries to.</param>
        </member>
        <member name="T:System.Data.Edm.Serialization.CsdlSerializer">
            <summary>
            Serializes an <see cref="T:System.Data.Edm.EdmModel"/> that conforms to the restrictions of a single CSDL schema file to an XML writer.
            The model to be serialized must contain a single <see cref="T:System.Data.Edm.EdmNamespace"/> and a single <see cref="T:System.Data.Edm.EdmEntityContainer"/>.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Serialization.CsdlSerializer.#ctor">
            <summary>
            The CSDL Serializer for the EdmModel.
            </summary>
        </member>
        <member name="M:System.Data.Edm.Serialization.CsdlSerializer.Serialize(System.Data.Edm.EdmModel,System.Xml.XmlWriter)">
            <summary>
            Serialize the <see cref="T:System.Data.Edm.EdmModel"/> to the XmlWriter.
            </summary>
            <param name="model">The EdmModel to serialize, mut have only one <see cref="T:System.Data.Edm.EdmNamespace"/>and one <see cref="T:System.Data.Edm.EdmEntityContainer"/></param>
            <param name="xmlWriter">The XmlWriter to serialize to</param>
        </member>
        <member name="M:System.Data.Edm.Serialization.MslSerializer.#ctor">
            <summary>
            MSL Serializer for DbDatabaseMapping
            </summary>
        </member>
        <member name="M:System.Data.Edm.Serialization.MslSerializer.Serialize(System.Data.Edm.Db.Mapping.DbDatabaseMapping,System.Xml.XmlWriter)">
            <summary>
            Serialize the <see cref="T:System.Data.Edm.Db.Mapping.DbDatabaseMapping"/> to the XmlWriter
            </summary>
            <param name="dbDatabaseMapping">The DbDatabaseMapping to serialize</param>
            <param name="xmlWriter">The XmlWriter to serialize to</param>
        </member>
        <member name="M:System.Data.Edm.Serialization.SsdlSerializer.#ctor">
            <summary>
            SSDL Serializer for DbDatabaseMetadata
            </summary>
        </member>
        <member name="M:System.Data.Edm.Serialization.SsdlSerializer.Serialize(System.Data.Edm.Db.DbDatabaseMetadata,System.String,System.String,System.Xml.XmlWriter)">
            <summary>
            Serialize the <see cref="T:System.Data.Edm.Db.DbDatabaseMetadata"/> to the <see cref="T:System.Xml.XmlWriter"/>
            </summary>
            <param name="dbDatabase">The DbDatabaseMetadata to serialize</param>
            <param name="provider">Provider information on the Schema element</param>
            <param name="providerManifestToken">ProviderManifestToken information on the Schema element</param>
            <param name="xmlWriter">The XmlWriter to serialize to</param>
            <returns></returns>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndAuthorEmail">
            <summary>author/email</summary>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndAuthorName">
            <summary>author/name</summary>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndAuthorUri">
            <summary>author/uri</summary>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndPublished">
            <summary>published</summary>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndRights">
            <summary>rights</summary>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndSummary">
            <summary>summary</summary>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndTitle">
            <summary>title</summary>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndContributorEmail">
            <summary>contributor/email</summary>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndContributorName">
            <summary>contributor/name</summary>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndContributorUri">
            <summary>contributor/uri</summary>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndCategoryLabel">
            <summary>category/@label</summary>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndContentKindPlaintext">
            <summary>Plaintext</summary>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndContentKindHtml">
            <summary>HTML</summary>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndContentKindXHtml">
            <summary>XHTML</summary>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndUpdated">
            <summary>updated</summary>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndLinkHref">
            <summary>link/@href</summary>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndLinkRel">
            <summary>link/@rel</summary>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndLinkType">
            <summary>link/@type</summary>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndLinkHrefLang">
            <summary>link/@hreflang</summary>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndLinkTitle">
            <summary>link/@title</summary>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndLinkLength">
            <summary>link/@length</summary>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndCategoryTerm">
            <summary>category/@term</summary>
        </member>
        <member name="F:System.Data.Edm.Serialization.Xml.Internal.Csdl.EdmModelCsdlSchemaWriter.XmlConstants.SyndCategoryScheme">
            <summary>category/@scheme</summary>
        </member>
        <member name="M:System.Data.Edm.Serialization.Xml.Internal.Ssdl.DbModelSsdlHelper.GetRoleNamePair(System.Data.Edm.Db.DbTableMetadata,System.Data.Edm.Db.DbTableMetadata)">
            <summary>
            Return role name pair
            </summary>
            <param name="firstTable"></param>
            <param name="secondTable"></param>
            <returns></returns>
        </member>
        <member name="T:System.Data.Edm.Validation.Internal.DataModelValidationContext">
            <summary>
            The context for DataModel Validation
            </summary>
        </member>
        <member name="M:System.Data.Edm.Validation.Internal.DataModelValidationHelper.AreRelationshipEndsEqual(System.Collections.Generic.KeyValuePair{System.Data.Edm.EdmAssociationSet,System.Data.Edm.EdmEntitySet},System.Collections.Generic.KeyValuePair{System.Data.Edm.EdmAssociationSet,System.Data.Edm.EdmEntitySet})">
            <summary>
            Returns true if the given two ends are similar - the relationship type that this ends belongs to is the same
            and the entity set refered by the ends are same and they are from the same role
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.Edm.Validation.Internal.DataModelValidationHelper.IsReferentialConstraintReadyForValidation(System.Data.Edm.EdmAssociationType)">
            <summary>
            Return true if the Referential Constraint on the association is ready for further validation, otherwise return false.
            </summary>
            <param name="association"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.Edm.Validation.Internal.DataModelValidationHelper.IsKeyProperty(System.Collections.Generic.List{System.Data.Edm.EdmProperty},System.Data.Edm.EdmAssociationEnd,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Resolves the given property names to the property in the item
            Also checks whether the properties form the key for the given type and whether all the properties are nullable or not
            </summary>
            <param name="roleProperties"></param>
            <param name="roleElement"></param>
            <param name="isKeyProperty"></param>
            <param name="areAllPropertiesNullable"></param>
            <param name="isAnyPropertyNullable"></param>
            <param name="isSubsetOfKeyProperties"></param>
        </member>
        <member name="M:System.Data.Edm.Validation.Internal.DataModelValidationHelper.IsEdmSystemNamespace(System.String)">
            <summary>
            Return true if the namespaceName is a Edm System Namespace
            </summary>
            <param name="namespaceName"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.Edm.Validation.Internal.DataModelValidationHelper.TypeIsSubTypeOf(System.Data.Edm.EdmEntityType,System.Collections.Generic.Dictionary{System.Data.Edm.EdmEntityType,System.Data.Edm.EdmEntitySet},System.Data.Edm.EdmEntitySet@)">
            <summary>
            Return true if the entityType is a subtype of any entity type in the dictionary keys, 
            and return the corresponding entry EntitySet value. Otherwise return false.
            </summary>
            <param name="entityType"></param>
            <param name="baseEntitySetTypes"></param>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.Edm.Validation.Internal.DataModelValidationHelper.IsTypeDefinesNewConcurrencyProperties(System.Data.Edm.EdmEntityType)">
            <summary>
            Return true if any of the properties in the EdmEntityType defines ConcurrencyMode. Otherwise return false.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.Edm.Validation.Internal.DataModelValidationHelper.AddMemberNameToHashSet(System.Data.Edm.EdmNamedMetadataItem,System.Collections.Generic.HashSet{System.String},System.Data.Edm.Validation.Internal.DataModelValidationContext,System.Func{System.String,System.String})">
            <summary>
            Add member name to the Hash set, raise an error if the name exists already.
            </summary>
            <param name="item"></param>
            <param name="memberNameList"></param>
            <param name="context"></param>
            <param name="getErrorString"></param>
        </member>
        <member name="M:System.Data.Edm.Validation.Internal.DataModelValidationHelper.HasContent(System.String)">
            <summary>
            If the string is null, empty, or only whitespace, return false, otherwise return true
            </summary>
            <param name="stringToCheck"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.Edm.Validation.Internal.DataModelValidationHelper.IsOfType(System.Data.Edm.EdmEntityType,System.Data.Edm.EdmEntityType)">
            <summary>
            Determines whether this type is of the same type as baseType, 
            or is derived from baseType.
            </summary>
            <param name="baseType"></param>
            <returns>true if this type is of the baseType, false otherwise</returns>
        </member>
        <member name="M:System.Data.Edm.Validation.Internal.DataModelValidationHelper.CheckForInheritanceCycle``1(``0,System.Func{``0,``0})">
            <summary>
            Determine if a cycle exists in the type hierarchy: use two pointers to
            walk the chain, if one catches up with the other, we have a cycle.
            </summary>
            <returns>true if a cycle exists in the type hierarchy, false otherwise</returns>
        </member>
        <member name="T:System.Data.Edm.Validation.Internal.DataModelValidationRuleSet">
            <summary>
            RuleSet for DataModel Validation
            </summary>
        </member>
        <member name="M:System.Data.Edm.Validation.Internal.DataModelValidationRuleSet.GetRules(System.Data.Edm.Common.DataModelItem)">
            <summary>
            Get the related rules given certain DataModelItem
            </summary>
            <param name="itemToValidate">The <see cref="T:System.Data.Edm.Common.DataModelItem"/> to validate</param>
            <returns>A collection of <see cref="T:System.Data.Edm.Validation.Internal.DataModelValidationRule"/></returns>
        </member>
        <member name="T:System.Data.Edm.Validation.Internal.DataModelValidator">
            <summary>
            Data Model Validator
            </summary>
        </member>
        <member name="M:System.Data.Edm.Validation.Internal.DataModelValidator.Validate(System.Data.Edm.EdmModel,System.Boolean)">
            <summary>
            Validate the <see cref="T:System.Data.Edm.EdmModel"/> and all of its properties given certain version.
            </summary>
            <param name="root">The root of the model to be validated</param>
            <param name="validateSyntax">True to validate the syntax, otherwise false</param>
        </member>
        <member name="T:System.Data.Edm.Validation.Internal.EdmModelValidation.EdmModelRuleSet">
            <summary>
            The RuleSet for EdmModel
            </summary>
        </member>
        <member name="M:System.Data.Edm.Validation.Internal.EdmModelValidation.EdmModelRuleSet.CreateEdmModelRuleSet(System.Double,System.Boolean)">
            <summary>
            Get <see cref="T:System.Data.Edm.Validation.Internal.EdmModelValidation.EdmModelRuleSet"/> based on version
            </summary>
            <param name="version">a double value of version</param>
            <returns><see cref="T:System.Data.Edm.Validation.Internal.EdmModelValidation.EdmModelRuleSet"/></returns>
        </member>
        <member name="T:System.Data.Edm.Validation.Internal.EdmModelValidation.EdmModelValidationContext">
            <summary>
            The context for EdmModel Validation
            </summary>
        </member>
        <member name="T:System.Data.Edm.Validation.Internal.EdmModelValidation.EdmModelValidationVisitor">
            <summary>
            Visitor for EdmModel Validation
            </summary>
        </member>
        <member name="T:System.Data.Edm.Validation.Internal.EdmModelValidation.EdmModelValidator">
            <summary>
            Edm Model Validator
            </summary>
        </member>
        <member name="M:System.Data.Edm.Validation.Internal.EdmModelValidation.EdmModelValidator.Validate(System.Data.Edm.EdmModel,System.Data.Edm.Validation.Internal.EdmModelValidation.EdmModelValidationContext)">
            <summary>
            validate the <see cref="T:System.Data.Edm.EdmModel"/> from the root with the context
            </summary>
            <param name="validateRoot">The root to validate from</param>
            <param name="context">The validation context</param>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Resources.Strings">
            <summary>
               Strongly-typed and parameterized string resources.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.ArgumentIsNullOrWhitespace(System.Object)">
            <summary>
            A string like "The argument '{0}' cannot be null, empty or contain only white space."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.ArgumentPropertyIsNull(System.Object)">
            <summary>
            A string like "The argument property '{0}' cannot be null."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.EntityTypeConfigurationMismatch(System.Object)">
            <summary>
            A string like "The type '{0}' has already been configured as a complex type. It cannot be reconfigured as an entity type."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.ComplexTypeConfigurationMismatch(System.Object)">
            <summary>
            A string like "The type '{0}' has already been configured as an entity type. It cannot be reconfigured as a complex type."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.KeyPropertyNotFound(System.Object,System.Object)">
            <summary>
            A string like "The key component '{0}' is not a declared property on the entity '{1}'. Verify that it has not been explicitly excluded from the model and that it is a valid primitive property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.ForeignKeyPropertyNotFound(System.Object,System.Object)">
            <summary>
            A string like "The foreign key component '{0}' is not a declared property on the entity '{1}'. Verify that it has not been explicitly excluded from the model and that it is a valid primitive property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.PropertyNotFound(System.Object,System.Object)">
            <summary>
            A string like "The configured property '{0}' is not a declared property on the entity '{1}'. Verify that it has not been explicitly excluded from the model and that it is a valid primitive property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidPropertyExpression(System.Object)">
            <summary>
            A string like "The expression '{0}' is not a valid property expression. It must be of the form 'e => e.Property'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidComplexPropertyExpression(System.Object)">
            <summary>
            A string like "The expression '{0}' is not a valid property expression. It must be of the form 'e => e.Property[.Property]'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidPropertiesExpression(System.Object)">
            <summary>
            A string like "The properties expression '{0}' is not valid. It must either be of the form 'e => e.Property' or 'e => new {{ e.Property1, e.Property2 }}.'"
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidComplexPropertiesExpression(System.Object)">
            <summary>
            A string like "The properties expression '{0}' is not valid. It must either be of the form 'e => e.Property[.Property]' or 'e => new {{ e.Property1[.Property], e.Property2[.Property] }}.'"
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.StructuralTypeNotFound(System.Object)">
            <summary>
            A string like "The type '{0}' cannot be configured as it does not exist in the model. Verify that it is a valid structural type and that it has not been explicitly excluded from the model."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.ModelConfiguration.Resources.Strings.DuplicateStructuralTypeConfiguration(System.Object)" -->
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidComplexType(System.Object)">
            <summary>
            A string like "The type '{0}' is not a supported complex type."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidEntityType(System.Object)">
            <summary>
            A string like "The type '{0}' is not a supported entity type."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.NavigationInverseItself(System.Object,System.Object)">
            <summary>
            A string like "Navigation property '{0}' of '{1}' cannot be the inverse of itself."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.ConflictingConstraint(System.Object,System.Object)">
            <summary>
            A string like "The navigation property '{0}' declared on type '{1}' has been configured with conflicting foreign keys."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.ConflictingMapping(System.Object,System.Object)">
            <summary>
            A string like "The navigation property '{0}' declared on type '{1}' has been configured with conflicting mapping information."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.ConflictingCascadeDeleteOperation(System.Object,System.Object)">
            <summary>
            A string like "The navigation property '{0}' declared on type '{1}' has been configured with conflicting cascade delete operations using 'WillCascadeOnDelete'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.ConflictingPrincipalEnd(System.Object,System.Object)">
            <summary>
            A string like "The navigation property '{0}' declared on type '{1}' has been configured with conflicting principal ends."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.ConflictingMultiplicities(System.Object,System.Object)">
            <summary>
            A string like "The navigation property '{0}' declared on type '{1}' has been configured with conflicting multiplicities."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.MaxLengthAttribute_InvalidMaxLength(System.Object,System.Object)">
            <summary>
            A string like "MaxLengthAttribute must have a Length value that is greater than zero on property '{0}' on type '{1}. Use the MaxLengthAttribute() constructor to indicate that the string or array can have the maximum allowable length."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.StringLengthAttributeConvention_InvalidMaximumLength(System.Object,System.Object)">
            <summary>
            A string like "StringLengthAttribute must have a maximum length that is greater than zero on property '{0}' on type '{1}'. Use the MaxLengthAttribute with no arguments to specify maximum allowable length."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.TableNameAttributeConvention_InvalidTableName(System.Object)">
            <summary>
            A string like "TableNameAttribute must have a valid database table name on type '{0}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.ColumnAttributeConvention_InvalidColumnName(System.Object,System.Object)">
            <summary>
            A string like "ColumnAttribute must have a valid database column name on property '{0}' on type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.ModelGeneration_UnableToDetermineKeyOrder(System.Object)">
            <summary>
            A string like "Unable to determine composite primary key ordering for type '{0}'. Use the ColumnAttribute or the HasKey method to specify an order for composite primary keys."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.ForeignKeyAttributeConvention_EmptyKey(System.Object,System.Object)">
            <summary>
            A string like "Empty key names are not allowed on the ForeignKey.ForeignKeyMetadata value on property '{0}' on type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.ForeignKeyAttributeConvention_InvalidKey(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "An invalid key name was found in the ForeignKey.ForeignKeyMetadata value on property '{0}' on type '{1}'. The foreign key name '{2}' was not found on the dependent type '{3}'. The ForeignKeyMetadata value should be a comma separated list of foreign key property names."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InversePropertyAttributeConvention_PropertyNotFound(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The navigation property '{0}' that was specified by the InversePropertyAttribute.Property value cannot be found on the related type '{1}'. Check that the InversePropertyAttribute on property '{2}' on type '{3}' is correct."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InversePropertyAttributeConvention_SelfInverseDetected(System.Object,System.Object)">
            <summary>
            A string like "A relationship cannot be established from property '{0}' on type '{1}' to property '{0}' on type '{1}'. Check the values in the InversePropertyAttribute to make sure relationship definitions are unique and reference from one navigation property to its corresponding inverse navigation property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.ValidationItemFormat(System.Object,System.Object,System.Object)">
            <summary>
            A string like "\t{0}: {1}: {2}"
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.KeyRegisteredOnDerivedType(System.Object,System.Object)">
            <summary>
            A string like "A key is registered for the derived type '{0}'. Keys must be registered for the root type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.DuplicateEntryInUserDictionary(System.Object,System.Object)">
            <summary>
            A string like "The {0} value '{1}' already exists in the user-defined dictionary."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidTableMapping(System.Object,System.Object)">
            <summary>
            A string like "The type '{0}' has already been mapped to table '{1}'. Specify all mapping aspects of a table in a single Map call."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidChainedMappingSyntax(System.Object)">
            <summary>
            A string like "The derived type '{0}' has already been mapped using the chaining syntax. A derived type can only be mapped once using the chaining syntax."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidNullCondition(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The table '{0}' that type '{1}' maps to doesn't have a column called '{2}'. IsNull condition can only be specified on an existing column."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidNotNullCondition(System.Object,System.Object)">
            <summary>
            A string like "A Non-nullability condition cannot be specified on property '{0}' of type '{1}' since this property is not included in the model. Check that the property has not been ignored."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidDiscriminatorType(System.Object)">
            <summary>
            A string like "Values of type {0} cannot be used as type discriminator values."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.ConventionNotFound(System.Object,System.Object)">
            <summary>
            A string like "Unable to add the convention '{0}'. Could not find an existing convention of type '{1}' in the current convention set."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidEntitySplittingTableName(System.Object)">
            <summary>
            A string like "Invalid entity splitting specified for type '{0}'. Specify which table the properties must map to by using the ToTable API."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidEntitySplittingConditions(System.Object)">
            <summary>
            A string like "Invalid entity splitting specified for type '{0}'. Conditions cannot be specified along with Properties call."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidEntitySplittingProperties(System.Object)">
            <summary>
            A string like "Not all properties for type '{0}' have been mapped. Either map those properties or ignore them from the model."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidEntitySplittingProperty(System.Object,System.Object)">
            <summary>
            A string like "Property '{0}' of type '{1}' cannot be included in its mapping. Check to see if it has been ignored from the model."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidEntitySplittingInheritance(System.Object)">
            <summary>
            A string like "Entity splitting cannot be specified for type '{0}' since it is part of an inheritance hierarchy."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidTableSplittingConditions(System.Object)">
            <summary>
            A string like "Invalid table splitting specified for type '{0}'. Conditions cannot be specified along with table splitting call."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidTableSplittingInheritance(System.Object)">
            <summary>
            A string like "Table splitting cannot be specified for type '{0}' since it is part of an inheritance hierarchy."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidTableSplittingWithTPH(System.Object,System.Object)">
            <summary>
            A string like "Type '{0}' cannot be mapped to table '{1}' since this table is also being used to map an inheritance hierarchy and type {0} is not a part of that hierarchy."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidTableSplittingPrimaryKeysMismatch(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Type '{0}' cannot be mapped to table '{1}' since type '{2}' also maps to the same table and their primary key names don't match. Change either of the primary key property names so that they match."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidTPCMappingAbstractType(System.Object)">
            <summary>
            A string like "Type '{0}' cannot be mapped using 'MapInheritedProperties' API since it is an abstract type. This API is used for specifying 'Table Per Concrete class' mapping."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.ModelBuilder_ProviderNameNotFound(System.Object)">
            <summary>
            A string like "Unable to determine the provider name for connection of type '{0}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidTableMappingForAbstractTypesWithTPC(System.Object)">
            <summary>
            A string like "The table mapping specified for type '{0}' is not valid. Use MapInheritedProperties API to map Type '{0}' since part of the hierarchy tree has been mapped using the same API."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.ToTable_InvalidSchemaName(System.Object)">
            <summary>
            A string like "The qualified table name '{0}' contains an invalid schema name. Schema names must have a non-zero length."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Strings.ToTable_InvalidTableName(System.Object)">
            <summary>
            A string like "The qualified table name '{0}' contains an invalid table name. Table names must have a non-zero length."
            </summary>
        </member>
        <member name="P:System.Data.Entity.ModelConfiguration.Resources.Strings.InvalidTableName">
            <summary>
            A string like "The given string is not a valid table name. The name must consist of one or two CLS compliant identifiers separated by '.'. Identifiers may be escaped using '[' and ']' as well."
            </summary>
        </member>
        <member name="P:System.Data.Entity.ModelConfiguration.Resources.Strings.ValidationHeader">
            <summary>
            A string like "One or more validation errors were detected during model generation:"
            </summary>
        </member>
        <member name="P:System.Data.Entity.ModelConfiguration.Resources.Strings.ReconfiguringSubclassedStringLengthNotSupported">
            <summary>
            A string like "Updating validation attributes derived from the StringLengthAttribute class is not supported."
            </summary>
        </member>
        <member name="P:System.Data.Entity.ModelConfiguration.Resources.Strings.IsMaxLengthNotSupportedOnStringLengthAttributeWithMinimumLength">
            <summary>
            A string like "Configuring property with maximum length is not supported if the property is decorated with the StringLengthAttribute attribute whose Minimum property value is greater than zero or an attribute derived from the StringLengthAttribute class."
            </summary>
        </member>
        <member name="P:System.Data.Entity.ModelConfiguration.Resources.Strings.IsMaxLengthNotSupportedOnSubclassedMaxLengthAttributes">
            <summary>
            A string like "Configuring property with maximum length is not supported if the property is decorated with an attribute derived from the MaxLengthAttribute class."
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Resources.Error">
            <summary>
               Strongly-typed and parameterized exception factory.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.ArgumentIsNullOrWhitespace(System.Object)">
            <summary>
            ArgumentException with message like "The argument '{0}' cannot be null, empty or contain only white space."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.ArgumentPropertyIsNull(System.Object)">
            <summary>
            ArgumentException with message like "The argument property '{0}' cannot be null."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.InvalidTableName">
            <summary>
            ArgumentException with message like "The given string is not a valid table name. The name must consist of one or two CLS compliant identifiers separated by '.'. Identifiers may be escaped using '[' and ']' as well."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.EntityTypeConfigurationMismatch(System.Object)">
            <summary>
            InvalidOperationException with message like "The type '{0}' has already been configured as a complex type. It cannot be reconfigured as an entity type."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.ComplexTypeConfigurationMismatch(System.Object)">
            <summary>
            InvalidOperationException with message like "The type '{0}' has already been configured as an entity type. It cannot be reconfigured as a complex type."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.KeyPropertyNotFound(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The key component '{0}' is not a declared property on the entity '{1}'. Verify that it has not been explicitly excluded from the model and that it is a valid primitive property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.ForeignKeyPropertyNotFound(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The foreign key component '{0}' is not a declared property on the entity '{1}'. Verify that it has not been explicitly excluded from the model and that it is a valid primitive property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.PropertyNotFound(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The configured property '{0}' is not a declared property on the entity '{1}'. Verify that it has not been explicitly excluded from the model and that it is a valid primitive property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.InvalidPropertyExpression(System.Object)">
            <summary>
            InvalidOperationException with message like "The expression '{0}' is not a valid property expression. It must be of the form 'e => e.Property'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.InvalidComplexPropertyExpression(System.Object)">
            <summary>
            InvalidOperationException with message like "The expression '{0}' is not a valid property expression. It must be of the form 'e => e.Property[.Property]'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.InvalidPropertiesExpression(System.Object)">
            <summary>
            InvalidOperationException with message like "The properties expression '{0}' is not valid. It must either be of the form 'e => e.Property' or 'e => new {{ e.Property1, e.Property2 }}.'"
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.InvalidComplexPropertiesExpression(System.Object)">
            <summary>
            InvalidOperationException with message like "The properties expression '{0}' is not valid. It must either be of the form 'e => e.Property[.Property]' or 'e => new {{ e.Property1[.Property], e.Property2[.Property] }}.'"
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.StructuralTypeNotFound(System.Object)">
            <summary>
            InvalidOperationException with message like "The type '{0}' cannot be configured as it does not exist in the model. Verify that it is a valid structural type and that it has not been explicitly excluded from the model."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.ModelConfiguration.Resources.Error.DuplicateStructuralTypeConfiguration(System.Object)" -->
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.InvalidComplexType(System.Object)">
            <summary>
            InvalidOperationException with message like "The type '{0}' is not a supported complex type."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.InvalidEntityType(System.Object)">
            <summary>
            InvalidOperationException with message like "The type '{0}' is not a supported entity type."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.NavigationInverseItself(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Navigation property '{0}' of '{1}' cannot be the inverse of itself."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.ConflictingConstraint(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The navigation property '{0}' declared on type '{1}' has been configured with conflicting foreign keys."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.ConflictingMapping(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The navigation property '{0}' declared on type '{1}' has been configured with conflicting mapping information."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.ConflictingCascadeDeleteOperation(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The navigation property '{0}' declared on type '{1}' has been configured with conflicting cascade delete operations using 'WillCascadeOnDelete'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.ConflictingPrincipalEnd(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The navigation property '{0}' declared on type '{1}' has been configured with conflicting principal ends."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.ConflictingMultiplicities(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The navigation property '{0}' declared on type '{1}' has been configured with conflicting multiplicities."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.MaxLengthAttribute_InvalidMaxLength(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "MaxLengthAttribute must have a Length value that is greater than zero on property '{0}' on type '{1}. Use the MaxLengthAttribute() constructor to indicate that the string or array can have the maximum allowable length."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.StringLengthAttributeConvention_InvalidMaximumLength(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "StringLengthAttribute must have a maximum length that is greater than zero on property '{0}' on type '{1}'. Use the MaxLengthAttribute with no arguments to specify maximum allowable length."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.TableNameAttributeConvention_InvalidTableName(System.Object)">
            <summary>
            InvalidOperationException with message like "TableNameAttribute must have a valid database table name on type '{0}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.ColumnAttributeConvention_InvalidColumnName(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "ColumnAttribute must have a valid database column name on property '{0}' on type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.ModelGeneration_UnableToDetermineKeyOrder(System.Object)">
            <summary>
            InvalidOperationException with message like "Unable to determine composite primary key ordering for type '{0}'. Use the ColumnAttribute or the HasKey method to specify an order for composite primary keys."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.ForeignKeyAttributeConvention_EmptyKey(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Empty key names are not allowed on the ForeignKey.ForeignKeyMetadata value on property '{0}' on type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.ForeignKeyAttributeConvention_InvalidKey(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "An invalid key name was found in the ForeignKey.ForeignKeyMetadata value on property '{0}' on type '{1}'. The foreign key name '{2}' was not found on the dependent type '{3}'. The ForeignKeyMetadata value should be a comma separated list of foreign key property names."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.InversePropertyAttributeConvention_PropertyNotFound(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The navigation property '{0}' that was specified by the InversePropertyAttribute.Property value cannot be found on the related type '{1}'. Check that the InversePropertyAttribute on property '{2}' on type '{3}' is correct."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.InversePropertyAttributeConvention_SelfInverseDetected(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "A relationship cannot be established from property '{0}' on type '{1}' to property '{0}' on type '{1}'. Check the values in the InversePropertyAttribute to make sure relationship definitions are unique and reference from one navigation property to its corresponding inverse navigation property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.KeyRegisteredOnDerivedType(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "A key is registered for the derived type '{0}'. Keys must be registered for the root type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.InvalidTableMapping(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The type '{0}' has already been mapped to table '{1}'. Specify all mapping aspects of a table in a single Map call."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.InvalidChainedMappingSyntax(System.Object)">
            <summary>
            InvalidOperationException with message like "The derived type '{0}' has already been mapped using the chaining syntax. A derived type can only be mapped once using the chaining syntax."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.InvalidNullCondition(System.Object,System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The table '{0}' that type '{1}' maps to doesn't have a column called '{2}'. IsNull condition can only be specified on an existing column."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.InvalidNotNullCondition(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "A Non-nullability condition cannot be specified on property '{0}' of type '{1}' since this property is not included in the model. Check that the property has not been ignored."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.InvalidDiscriminatorType(System.Object)">
            <summary>
            InvalidOperationException with message like "Values of type {0} cannot be used as type discriminator values."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.ConventionNotFound(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Unable to add the convention '{0}'. Could not find an existing convention of type '{1}' in the current convention set."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.InvalidEntitySplittingTableName(System.Object)">
            <summary>
            InvalidOperationException with message like "Invalid entity splitting specified for type '{0}'. Specify which table the properties must map to by using the ToTable API."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.InvalidEntitySplittingProperties(System.Object)">
            <summary>
            InvalidOperationException with message like "Not all properties for type '{0}' have been mapped. Either map those properties or ignore them from the model."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.InvalidEntitySplittingProperty(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Property '{0}' of type '{1}' cannot be included in its mapping. Check to see if it has been ignored from the model."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.InvalidTableSplittingPrimaryKeysMismatch(System.Object,System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Type '{0}' cannot be mapped to table '{1}' since type '{2}' also maps to the same table and their primary key names don't match. Change either of the primary key property names so that they match."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.InvalidTPCMappingAbstractType(System.Object)">
            <summary>
            InvalidOperationException with message like "Type '{0}' cannot be mapped using 'MapInheritedProperties' API since it is an abstract type. This API is used for specifying 'Table Per Concrete class' mapping."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.ModelBuilder_ProviderNameNotFound(System.Object)">
            <summary>
            NotSupportedException with message like "Unable to determine the provider name for connection of type '{0}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.InvalidTableMappingForAbstractTypesWithTPC(System.Object)">
            <summary>
            InvalidOperationException with message like "The table mapping specified for type '{0}' is not valid. Use MapInheritedProperties API to map Type '{0}' since part of the hierarchy tree has been mapped using the same API."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.ToTable_InvalidSchemaName(System.Object)">
            <summary>
            ArgumentException with message like "The qualified table name '{0}' contains an invalid schema name. Schema names must have a non-zero length."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.ToTable_InvalidTableName(System.Object)">
            <summary>
            ArgumentException with message like "The qualified table name '{0}' contains an invalid table name. Table names must have a non-zero length."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.ReconfiguringSubclassedStringLengthNotSupported">
            <summary>
            NotSupportedException with message like "Updating validation attributes derived from the StringLengthAttribute class is not supported."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.IsMaxLengthNotSupportedOnStringLengthAttributeWithMinimumLength">
            <summary>
            NotSupportedException with message like "Configuring property with maximum length is not supported if the property is decorated with the StringLengthAttribute attribute whose Minimum property value is greater than zero or an attribute derived from the StringLengthAttribute class."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.IsMaxLengthNotSupportedOnSubclassedMaxLengthAttributes">
            <summary>
            NotSupportedException with message like "Configuring property with maximum length is not supported if the property is decorated with an attribute derived from the MaxLengthAttribute class."
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.ArgumentNull(System.String)">
            <summary>
            The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.ArgumentOutOfRange(System.String)">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.NotImplemented">
            <summary>
            The exception that is thrown when the author has yet to implement the logic at this point in the program. This can act as an exception based TODO tag.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.Error.NotSupported">
            <summary>
            The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality. 
            </summary>
        </member>
        <member name="T:System.Data.Entity.Resources.Strings">
            <summary>
               Strongly-typed and parameterized string resources.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyEntry_CannotGetCurrentValue(System.Object,System.Object)">
            <summary>
            A string like "Cannot get value for property '{0}' from entity of type '{1}' because the property has no get accessor."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyEntry_CannotSetCurrentValue(System.Object,System.Object)">
            <summary>
            A string like "Cannot set value for property '{0}' on entity of type '{1}' because the property has no set accessor."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Strings.DbPropertyEntry_NotSupportedForDetached(System.Object,System.Object,System.Object)" -->
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyEntry_NotSupportedForPropertiesNotInTheModel(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Member '{0}' cannot be called for property '{1}' on entity of type '{2}' because the property is not part of the Entity Data Model."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Strings.DbEntityEntry_NotSupportedForDetached(System.Object,System.Object)" -->
        <member name="M:System.Data.Entity.Resources.Strings.DbSet_BadTypeForAddAttachRemove(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Cannot call the {0} method for an entity of type '{1}' on a DbSet for entities of type '{2}'. Only entities of type '{2}' or derived from type '{2}' can be added, attached, or removed."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbSet_BadTypeForCreate(System.Object,System.Object)">
            <summary>
            A string like "Cannot call the Create method for the type '{0}' on a DbSet for entities of type '{1}'. Only entities of type '{1}' or derived from type '{1}' can be created."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Strings.DbEntity_BadTypeForCast(System.Object,System.Object,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Strings.DbMember_BadTypeForCast(System.Object,System.Object,System.Object,System.Object,System.Object)" -->
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_UsedReferenceForCollectionProp(System.Object,System.Object)">
            <summary>
            A string like "The '{0}' property on entity of type '{1}' is a collection navigation property. The Collection method should be used instead of the Reference method."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_UsedCollectionForReferenceProp(System.Object,System.Object)">
            <summary>
            A string like "The '{0}' property on entity of type '{1}' is a reference navigation property. The Reference method should be used instead of the Collection method."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_NotANavigationProperty(System.Object,System.Object)">
            <summary>
            A string like "'{0}' is not a navigation property on entity of type '{1}'. The Reference and Collection methods can only be used with navigation properties."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_NotAScalarProperty(System.Object,System.Object)">
            <summary>
            A string like "'{0}' is not a primitive or complex property on entity of type '{1}'. The Property method can only be used with primitive or complex properties."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_NotAComplexProperty(System.Object,System.Object)">
            <summary>
            A string like "'{0}' is not a complex property on entity of type '{1}'. The ComplexProperty method can only be used with complex properties."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_NotAProperty(System.Object,System.Object)">
            <summary>
            A string like "'{0}' is not a primitive property, complex property, collection navigation property, or reference navigation property on entity of type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_DottedPartNotComplex(System.Object,System.Object,System.Object)">
            <summary>
            A string like ""The property name '{0}' from the property name path '{1}' is not a complex property for type '{2}'. Property name paths must be composed of complex property names for all except the final name.""
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_DottedPathMustBeProperty(System.Object)">
            <summary>
            A string like ""The property name path '{0}' cannot be used for navigation properties. Property name paths can only be used to access primitive or complex properties.""
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_WrongGenericForNavProp(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The navigation property '{0}' on entity type '{1}' cannot be used for entities of type '{2}' because it refers to entities of type '{3}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_WrongGenericForProp(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' on entity type '{1}' cannot be used for objects of type '{2}' because it is a property for objects of type '{3}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbEntityEntry_BadPropertyExpression(System.Object,System.Object)">
            <summary>
            A string like "The expression passed to method {0} must represent a property defined on the type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyValues_CannotGetValuesForState(System.Object,System.Object)">
            <summary>
            A string like "{0} cannot be used for entities in the {1} state."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyValues_CannotSetNullValue(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Cannot set non-nullable property '{0}' of type '{1}' to null on object of type '{2}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyValues_CannotGetStoreValuesWhenComplexPropertyIsNull(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' in the entity of type '{1}' is null. Store values cannot be obtained for an entity with a null complex property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyValues_WrongTypeForAssignment(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "Cannot assign value of type '{0}' to property '{1}' of type '{2}' in property values for type '{3}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyValues_PropertyDoesNotExist(System.Object,System.Object)">
            <summary>
            A string like "The '{0}' property does not exist or is not mapped for the type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyValues_AttemptToSetValuesFromWrongObject(System.Object,System.Object)">
            <summary>
            A string like "Cannot copy values from DbPropertyValues for type '{0}' into DbPropertyValues for type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyValues_AttemptToSetValuesFromWrongType(System.Object,System.Object)">
            <summary>
            A string like "Cannot copy from property values for object of type '{0}' into property values for object of type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyValues_ComplexObjectCannotBeNull(System.Object,System.Object)">
            <summary>
            A string like "The value of the complex property '{0}' on entity of type '{1}' is null. Complex properties cannot be set to null and values cannot be set for null complex properties."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbPropertyValues_NestedPropertyValuesNull(System.Object,System.Object)">
            <summary>
            A string like "The value of the nested property values property '{0}' on the values for entity of type '{1}' is null. Nested property values cannot be set to null and values cannot be set for null complex properties."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DatabaseInitializationStrategy_ModelMismatch(System.Object)">
            <summary>
            A string like "The model backing the '{0}' context has changed since the database was created. Either manually delete/update the database, or call Database.SetInitializer with an IDatabaseInitializer instance. For example, the DropCreateDatabaseIfModelChanges strategy will automatically delete and recreate the database, and optionally seed it with new data."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbDatabase_BadInitializerEntry(System.Object,System.Object)">
            <summary>
            A string like "The DbContextDatabaseInitializer entry 'key="{0}" value="{1}"' in the application configuration is not valid.  Entries should be of the form 'key="DatabaseInitializerForType MyNamespace.MyDbContextClass, MyAssembly" value="MyNamespace.MyInitializerClass, MyAssembly"' or 'key="DatabaseInitializerForType MyNamespace.MyDbContextClass, MyAssembly" value="Disabled"'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbDatabase_InitializeFromConfigFailed(System.Object,System.Object)">
            <summary>
            A string like "Failed to set database initializer of type '{0}' for DbContext type '{1}' specified in the application configuration. See inner exception for details."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbSet_WrongEntityTypeFound(System.Object,System.Object)">
            <summary>
            A string like "The entity found was of type {0} when an entity of type {1} was requested."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbSet_DbSetUsedWithComplexType(System.Object)">
            <summary>
            A string like "The type '{0}' is mapped as a complex type. The Set method, DbSet objects, and DbEntityEntry objects can only be used with entity types, not complex types."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbSet_PocoAndNonPocoMixedInSameAssembly(System.Object)">
            <summary>
            A string like "The type '{0}' is not attributed with EdmEntityTypeAttribute but is contained in an assembly attributed with EdmSchemaAttribute. POCO entities that do not use EdmEntityTypeAttribute cannot be contained in the same assembly as Non-POCO entities that use EdmEntityTypeAttribute."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbSet_EntityTypeNotInModel(System.Object)">
            <summary>
            A string like "The entity type {0} is not part of the model for the current context."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbContext_ConnectionStringNotFound(System.Object)">
            <summary>
            A string like "No connection string named '{0}' could be found in the application config file."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.DbCollectionEntry_CannotSetCollectionProp(System.Object,System.Object)">
            <summary>
            A string like "The collection navigation property '{0}' on the entity of type '{1}' cannot be set because the entity type does not define a navigation property with a set accessor."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.Mapping_MESTNotSupported(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Multiple object sets per type are not supported. The object sets '{0}' and '{1}' can both contain instances of type '{2}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.ModelBuilder_MissingRequiredCtor(System.Object)">
            <summary>
            A string like "The context type '{0}' must have a public constructor taking an EntityConnection."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Strings.SqlConnectionFactory_MdfNotSupported(System.Object)">
            <summary>
            A string like "The database name '{0}' is not supported because it is an MDF file name. A full connection string must be provided to attach an MDF file."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbPropertyEntry_CannotMarkPropertyUnmodified">
            <summary>
            A string like "Setting IsModified to false for a modified property is not supported."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbUpdateException_WrongContext">
            <summary>
            A string like "The context provided was not the context being used to save changes."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbContext_IndependentAssociationUpdateException">
            <summary>
            A string like "An error occurred while saving entities that do not expose foreign key properties for their relationships. The GetEntityEntry method will return null because a single entity cannot be identified as the source of the exception. Handling of exceptions while saving can be made easier by exposing foreign key properties in your entity types. See the InnerException for details."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbEntityValidationException_DeserializationFailure">
            <summary>
            A string like "The serialization stream contains no entity validation results."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbPropertyValues_PropertyValueNamesAreReadonly">
            <summary>
            A string like "The set of property value names is read-only."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbPropertyValues_AttemptToSetNonValuesOnComplexProperty">
            <summary>
            A string like "A property of a complex type must be set to an instance of the generic or non-generic DbPropertyValues class for that type."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbDatabase_NoModelHash">
            <summary>
            A string like "Model compatibility cannot be checked because the DbContext instance was not created using Code First patterns. DbContext instances created from an ObjectContext or using an EDMX file cannot be checked for compatibility."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbDatabase_MetadataNotMapped">
            <summary>
            A string like "Model compatibility cannot be checked because the EdmMetadata type was not included in the model.  Ensure that IncludeMetadataConvention has been added to the ModelBuilder conventions."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbDatabase_NoDatabaseHash">
            <summary>
            A string like "Model compatibility cannot be checked because the database does not contain model metadata."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbContext_ContextUsedInModelCreating">
            <summary>
            A string like "The context cannot be used while the model is being created."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbContext_MESTNotSupported">
            <summary>
            A string like "The DbContext class cannot be used with models that have multiple entity sets per type (MEST)."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbContext_Disposed">
            <summary>
            A string like "The operation cannot be completed because the DbContext has been disposed."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbContext_ProviderReturnedNullConnection">
            <summary>
            A string like "The provider factory returned a null connection."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbContext_ConnectionFactoryReturnedNullConnection">
            <summary>
            A string like "The DbConnectionFactory instance returned a null connection."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbSet_WrongNumberOfKeyValuesPassed">
            <summary>
            A string like "The number of primary key values passed must match number of primary key values defined on the entity."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbSet_WrongKeyValueType">
            <summary>
            A string like "The type of one of the primary key values did not match the type defined in the entity. See inner exception for details."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbSet_MultipleAddedEntitiesFound">
            <summary>
            A string like "Multiple entities were found in the Added state that match the given primary key values."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbQuery_BindingToDbQueryNotSupported">
            <summary>
            A string like "Data binding directly to a store query (DbSet, DbQuery, DbSqlQuery) is not supported. Instead populate a DbSet with data, for example by calling Load on the DbSet, and then bind to local data. For WPF bind to DbSet.Local. For WinForms bind to DbSet.Local.ToBindingList()."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbExtensions_InvalidIncludePathExpression">
            <summary>
            A string like "The include path expression must refer to a property defined by the entity, optionally also with nested properties or calls to Select."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbContext_ConnectionHasModel">
            <summary>
            A string like "Cannot initialize a DbContext from an entity connection string or an EntityConnection instance together with a DbModel. If an entity connection string or EntityConnection instance is used, then the model will be created from the metadata in the connection. If a DbModel is used, then the connection supplied should be a standard database connection (for example, a SqlConnection instance) rather than an entity connection."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.CodeFirstCachedMetadataWorkspace_SameModelDifferentProvidersNotSupported">
            <summary>
            A string like "Using the same DbModel to create contexts against different types of database servers is not supported. Instead, create a separate DbModel for each type of server being used."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.CodeFirstCachedMetadataWorkspace_WriteEdmxInvokedAgainstMetadataWorkspace">
            <summary>
            A string like "WriteEdmx can only be used before a context has been created from the model."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.ModelBuilder_WriteEdmxUsedInModelFirstMode">
            <summary>
            A string like "WriteEdmx cannot be used after registration of an existing model. It can only be used in conjunction with the Code First fluent API."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.Utility_ArgumentEmptyOrWhitespace">
            <summary>
            A string like "The argument cannot be empty or contain only white space."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbEntityValidationException_ValidationFailed">
            <summary>
            A string like "Validation failed for one or more entities. See 'EntityValidationErrors' property for more details."
            </summary>
        </member>
        <member name="P:System.Data.Entity.Resources.Strings.DbDatabase_InitializationException">
            <summary>
            A string like "An exception occurred while initializing the database. See the InnerException for details."
            </summary>
        </member>
        <member name="T:System.Data.Entity.Resources.Error">
            <summary>
               Strongly-typed and parameterized exception factory.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyEntry_CannotGetCurrentValue(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Cannot get value for property '{0}' from entity of type '{1}' because the property has no get accessor."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyEntry_CannotSetCurrentValue(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Cannot set value for property '{0}' on entity of type '{1}' because the property has no set accessor."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Error.DbPropertyEntry_NotSupportedForDetached(System.Object,System.Object,System.Object)" -->
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyEntry_NotSupportedForPropertiesNotInTheModel(System.Object,System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Member '{0}' cannot be called for property '{1}' on entity of type '{2}' because the property is not part of the Entity Data Model."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Error.DbEntityEntry_NotSupportedForDetached(System.Object,System.Object)" -->
        <member name="M:System.Data.Entity.Resources.Error.DbSet_BadTypeForAddAttachRemove(System.Object,System.Object,System.Object)">
            <summary>
            ArgumentException with message like "Cannot call the {0} method for an entity of type '{1}' on a DbSet for entities of type '{2}'. Only entities of type '{2}' or derived from type '{2}' can be added, attached, or removed."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbSet_BadTypeForCreate(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "Cannot call the Create method for the type '{0}' on a DbSet for entities of type '{1}'. Only entities of type '{1}' or derived from type '{1}' can be created."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Error.DbEntity_BadTypeForCast(System.Object,System.Object,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Resources.Error.DbMember_BadTypeForCast(System.Object,System.Object,System.Object,System.Object,System.Object)" -->
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_UsedReferenceForCollectionProp(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "The '{0}' property on entity of type '{1}' is a collection navigation property. The Collection method should be used instead of the Reference method."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_UsedCollectionForReferenceProp(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "The '{0}' property on entity of type '{1}' is a reference navigation property. The Reference method should be used instead of the Collection method."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_NotANavigationProperty(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "'{0}' is not a navigation property on entity of type '{1}'. The Reference and Collection methods can only be used with navigation properties."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_NotAScalarProperty(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "'{0}' is not a primitive or complex property on entity of type '{1}'. The Property method can only be used with primitive or complex properties."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_NotAComplexProperty(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "'{0}' is not a complex property on entity of type '{1}'. The ComplexProperty method can only be used with complex properties."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_NotAProperty(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "'{0}' is not a primitive property, complex property, collection navigation property, or reference navigation property on entity of type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_DottedPartNotComplex(System.Object,System.Object,System.Object)">
            <summary>
            ArgumentException with message like ""The property name '{0}' from the property name path '{1}' is not a complex property for type '{2}'. Property name paths must be composed of complex property names for all except the final name.""
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_DottedPathMustBeProperty(System.Object)">
            <summary>
            ArgumentException with message like ""The property name path '{0}' cannot be used for navigation properties. Property name paths can only be used to access primitive or complex properties.""
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_WrongGenericForNavProp(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            ArgumentException with message like "The navigation property '{0}' on entity type '{1}' cannot be used for entities of type '{2}' because it refers to entities of type '{3}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_WrongGenericForProp(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            ArgumentException with message like "The property '{0}' on entity type '{1}' cannot be used for objects of type '{2}' because it is a property for objects of type '{3}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyEntry_CannotMarkPropertyUnmodified">
            <summary>
            NotSupportedException with message like "Setting IsModified to false for a modified property is not supported."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbEntityEntry_BadPropertyExpression(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "The expression passed to method {0} must represent a property defined on the type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbUpdateException_WrongContext">
            <summary>
            ArgumentException with message like "The context provided was not the context being used to save changes."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_CannotGetValuesForState(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "{0} cannot be used for entities in the {1} state."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_CannotSetNullValue(System.Object,System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Cannot set non-nullable property '{0}' of type '{1}' to null on object of type '{2}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_CannotGetStoreValuesWhenComplexPropertyIsNull(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The property '{0}' in the entity of type '{1}' is null. Store values cannot be obtained for an entity with a null complex property."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_WrongTypeForAssignment(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Cannot assign value of type '{0}' to property '{1}' of type '{2}' in property values for type '{3}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_PropertyValueNamesAreReadonly">
            <summary>
            NotSupportedException with message like "The set of property value names is read-only."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_PropertyDoesNotExist(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "The '{0}' property does not exist or is not mapped for the type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_AttemptToSetValuesFromWrongObject(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "Cannot copy values from DbPropertyValues for type '{0}' into DbPropertyValues for type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_AttemptToSetValuesFromWrongType(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "Cannot copy from property values for object of type '{0}' into property values for object of type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_AttemptToSetNonValuesOnComplexProperty">
            <summary>
            ArgumentException with message like "A property of a complex type must be set to an instance of the generic or non-generic DbPropertyValues class for that type."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_ComplexObjectCannotBeNull(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The value of the complex property '{0}' on entity of type '{1}' is null. Complex properties cannot be set to null and values cannot be set for null complex properties."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbPropertyValues_NestedPropertyValuesNull(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The value of the nested property values property '{0}' on the values for entity of type '{1}' is null. Nested property values cannot be set to null and values cannot be set for null complex properties."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DatabaseInitializationStrategy_ModelMismatch(System.Object)">
            <summary>
            InvalidOperationException with message like "The model backing the '{0}' context has changed since the database was created. Either manually delete/update the database, or call Database.SetInitializer with an IDatabaseInitializer instance. For example, the DropCreateDatabaseIfModelChanges strategy will automatically delete and recreate the database, and optionally seed it with new data."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbDatabase_NoModelHash">
            <summary>
            NotSupportedException with message like "Model compatibility cannot be checked because the DbContext instance was not created using Code First patterns. DbContext instances created from an ObjectContext or using an EDMX file cannot be checked for compatibility."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbDatabase_MetadataNotMapped">
            <summary>
            NotSupportedException with message like "Model compatibility cannot be checked because the EdmMetadata type was not included in the model.  Ensure that IncludeMetadataConvention has been added to the ModelBuilder conventions."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbDatabase_NoDatabaseHash">
            <summary>
            NotSupportedException with message like "Model compatibility cannot be checked because the database does not contain model metadata."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbDatabase_BadInitializerEntry(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The DbContextDatabaseInitializer entry 'key="{0}" value="{1}"' in the application configuration is not valid.  Entries should be of the form 'key="DatabaseInitializerForType MyNamespace.MyDbContextClass, MyAssembly" value="MyNamespace.MyInitializerClass, MyAssembly"' or 'key="DatabaseInitializerForType MyNamespace.MyDbContextClass, MyAssembly" value="Disabled"'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbDatabase_InitializeFromConfigFailed(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Failed to set database initializer of type '{0}' for DbContext type '{1}' specified in the application configuration. See inner exception for details."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbContext_ContextUsedInModelCreating">
            <summary>
            InvalidOperationException with message like "The context cannot be used while the model is being created."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbContext_MESTNotSupported">
            <summary>
            InvalidOperationException with message like "The DbContext class cannot be used with models that have multiple entity sets per type (MEST)."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbContext_Disposed">
            <summary>
            InvalidOperationException with message like "The operation cannot be completed because the DbContext has been disposed."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbContext_ProviderReturnedNullConnection">
            <summary>
            InvalidOperationException with message like "The provider factory returned a null connection."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbContext_ConnectionFactoryReturnedNullConnection">
            <summary>
            InvalidOperationException with message like "The DbConnectionFactory instance returned a null connection."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbSet_WrongNumberOfKeyValuesPassed">
            <summary>
            ArgumentException with message like "The number of primary key values passed must match number of primary key values defined on the entity."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbSet_WrongKeyValueType">
            <summary>
            ArgumentException with message like "The type of one of the primary key values did not match the type defined in the entity. See inner exception for details."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbSet_WrongEntityTypeFound(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "The entity found was of type {0} when an entity of type {1} was requested."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbSet_MultipleAddedEntitiesFound">
            <summary>
            InvalidOperationException with message like "Multiple entities were found in the Added state that match the given primary key values."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbSet_DbSetUsedWithComplexType(System.Object)">
            <summary>
            InvalidOperationException with message like "The type '{0}' is mapped as a complex type. The Set method, DbSet objects, and DbEntityEntry objects can only be used with entity types, not complex types."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbSet_PocoAndNonPocoMixedInSameAssembly(System.Object)">
            <summary>
            InvalidOperationException with message like "The type '{0}' is not attributed with EdmEntityTypeAttribute but is contained in an assembly attributed with EdmSchemaAttribute. POCO entities that do not use EdmEntityTypeAttribute cannot be contained in the same assembly as Non-POCO entities that use EdmEntityTypeAttribute."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbSet_EntityTypeNotInModel(System.Object)">
            <summary>
            InvalidOperationException with message like "The entity type {0} is not part of the model for the current context."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbQuery_BindingToDbQueryNotSupported">
            <summary>
            NotSupportedException with message like "Data binding directly to a store query (DbSet, DbQuery, DbSqlQuery) is not supported. Instead populate a DbSet with data, for example by calling Load on the DbSet, and then bind to local data. For WPF bind to DbSet.Local. For WinForms bind to DbSet.Local.ToBindingList()."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbExtensions_InvalidIncludePathExpression">
            <summary>
            ArgumentException with message like "The include path expression must refer to a property defined by the entity, optionally also with nested properties or calls to Select."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbContext_ConnectionStringNotFound(System.Object)">
            <summary>
            InvalidOperationException with message like "No connection string named '{0}' could be found in the application config file."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbContext_ConnectionHasModel">
            <summary>
            InvalidOperationException with message like "Cannot initialize a DbContext from an entity connection string or an EntityConnection instance together with a DbModel. If an entity connection string or EntityConnection instance is used, then the model will be created from the metadata in the connection. If a DbModel is used, then the connection supplied should be a standard database connection (for example, a SqlConnection instance) rather than an entity connection."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbCollectionEntry_CannotSetCollectionProp(System.Object,System.Object)">
            <summary>
            NotSupportedException with message like "The collection navigation property '{0}' on the entity of type '{1}' cannot be set because the entity type does not define a navigation property with a set accessor."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.CodeFirstCachedMetadataWorkspace_SameModelDifferentProvidersNotSupported">
            <summary>
            NotSupportedException with message like "Using the same DbModel to create contexts against different types of database servers is not supported. Instead, create a separate DbModel for each type of server being used."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.CodeFirstCachedMetadataWorkspace_WriteEdmxInvokedAgainstMetadataWorkspace">
            <summary>
            InvalidOperationException with message like "WriteEdmx can only be used before a context has been created from the model."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.Mapping_MESTNotSupported(System.Object,System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Multiple object sets per type are not supported. The object sets '{0}' and '{1}' can both contain instances of type '{2}'."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ModelBuilder_MissingRequiredCtor(System.Object)">
            <summary>
            InvalidOperationException with message like "The context type '{0}' must have a public constructor taking an EntityConnection."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ModelBuilder_WriteEdmxUsedInModelFirstMode">
            <summary>
            InvalidOperationException with message like "WriteEdmx cannot be used after registration of an existing model. It can only be used in conjunction with the Code First fluent API."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.Utility_ArgumentEmptyOrWhitespace">
            <summary>
            ArgumentException with message like "The argument cannot be empty or contain only white space."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.SqlConnectionFactory_MdfNotSupported(System.Object)">
            <summary>
            NotSupportedException with message like "The database name '{0}' is not supported because it is an MDF file name. A full connection string must be provided to attach an MDF file."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.DbDatabase_InitializationException">
            <summary>
            DataException with message like "An exception occurred while initializing the database. See the InnerException for details."
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ArgumentNull(System.String)">
            <summary>
            The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.ArgumentOutOfRange(System.String)">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.NotImplemented">
            <summary>
            The exception that is thrown when the author has yet to implement the logic at this point in the program. This can act as an exception based TODO tag.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.Error.NotSupported">
            <summary>
            The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality. 
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ForeignKeyAttribute">
            <summary>
              Annotates a CLR property with associated foreign key metadata.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ForeignKeyAttribute.#ctor(System.String)">
            <summary>
            Creates a foreign key constraint using the supplied foreign key name or names
            </summary>
            <param name="foreignKeyName">The name of the foreign key property on the target object, or a comma separated list of foreign key property names if the foreign key is a composite key.</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ForeignKeyAttribute.ForeignKeyName">
            <summary>
              The foreign key name or names associated with the target property.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.InversePropertyAttribute">
            <summary>
              Annotates a CLR property with associated inverse property metadata.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.InversePropertyAttribute.Property">
            <summary>
              The name of the property that is the inverse of the target property. 
            </summary>
        </member>
        <member name="T:System.Data.Entity.Database.DropCreateDatabaseAlways`1">
            <summary>
            An implementation of IDatabaseInitializer that will always recreate and optionally re-seed the
            database the first time that a context is used in the app domain.
            To seed the database, create a derived class and override the Seed method.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "T:System.Data.Entity.Database.IDatabaseInitializer`1" -->
        <member name="M:System.Data.Entity.Database.IDatabaseInitializer`1.InitializeDatabase(`0)">
            <summary>
            Executes the strategy to initialize the database for the given context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:System.Data.Entity.Database.DropCreateDatabaseAlways`1.InitializeDatabase(`0)">
            <summary>
            Executes the strategy to initialize the database for the given context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:System.Data.Entity.Database.DropCreateDatabaseAlways`1.Seed(`0)">
            <summary>
            A that should be overridden to actually add data to the context for seeding. 
            The default implementation does nothing.
            </summary>
            <param name="context">The context to seed.</param>
        </member>
        <member name="T:System.Data.Entity.Database.CreateDatabaseIfNotExists`1">
            <summary>
            An implementation of IDatabaseInitializer that will recreate and optionally re-seed the
            database only if the database does not exist.
            To seed the database, create a derived class and override the Seed method.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Database.CreateDatabaseIfNotExists`1.InitializeDatabase(`0)">
            <summary>
            Executes the strategy to initialize the database for the given context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:System.Data.Entity.Database.CreateDatabaseIfNotExists`1.Seed(`0)">
            <summary>
            A that should be overridden to actually add data to the context for seeding. 
            The default implementation does nothing.
            </summary>
            <param name="context">The context to seed.</param>
        </member>
        <member name="T:System.Data.Entity.Database.DbDatabase">
            <summary>
            An instances of this class is obtained from an <see cref="T:System.Data.Entity.DbContext"/> object and can be used
            to manage the actual database backing a DbContext or connection.
            This includes creating, deleting, and checking for the existence of a database.
            Note that deletion and checking for existence of a database can be performed using just a
            connection (i.e. without a full context) by using the static methods of this class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Database.DbDatabase.#ctor(System.Data.Entity.Internal.InternalContext)">
            <summary>
            Creates a DbDatabase backed by the given context.  This object can be used to create a database,
            check for database existence, and delete a database.
            </summary>
            <param name="context">The context that defines the database connection and model.</param>
        </member>
        <member name="M:System.Data.Entity.Database.DbDatabase.#cctor">
            <summary>
            Initializes the <see cref="T:System.Data.Entity.Database.DbDatabase"/> class.
            Reads database initializer config from the application config file and sets or disables initializers as specified.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Database.DbDatabase.SetInitializer``1(System.Data.Entity.Database.IDatabaseInitializer{``0})">
            <summary>
            Gets or sets the database initialization strategy.  The database initialization strategy is called when <see cref="T:System.Data.Entity.DbContext"/> instance
            is initialized from a <see cref="T:System.Data.Entity.Infrastructure.DbModel"/>.  The strategy can optionally check for database existence, create a new database, and
            seed the database with data.
            The default strategy is an instance of <see cref="T:System.Data.Entity.Database.DropCreateDatabaseIfModelChanges`1"/> created with useSeedData set
            to true.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <param name="strategy">The strategy.</param>
            <value>The database creation strategy.</value>
        </member>
        <member name="M:System.Data.Entity.Database.DbDatabase.SetInitializerInternal``1(System.Data.Entity.Database.IDatabaseInitializer{``0},System.Boolean)">
            <summary>
            Internal version of SetInitializer that allows the strategy to be locked such that it cannot be replaced
            by another call to SetInitializer.  This allows strategies set in the app.config to win over strategies set
            in code.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <param name="strategy">The strategy.</param>
            <param name="lockStrategy">if set to <c>true</c> then the strategy is locked.</param>
        </member>
        <member name="M:System.Data.Entity.Database.DbDatabase.Initialize(System.Boolean)">
            <summary>
            Runs the the registered <see cref="T:System.Data.Entity.Database.IDatabaseInitializer`1"/> on this context.
            
            If "force" is set to true, then the initializer is run regardless of whether or not it
            has been run before.  This can be useful if a database is deleted while an app is running
            and needs to be reinitialized.
            
            If "force" is set to false, then the initializer is only run if it has not already been
            run for this context, model, and connection in this app domain. This method is typically
            used when it is necessary to ensure that the database has been created and seeded
            before starting some operation where doing so lazily will cause issues, such as when the
            operation is part of a transaction.
            </summary>
            <param name="force">if set to <c>true</c> the initializer is run even if it has already been run.</param>
        </member>
        <member name="M:System.Data.Entity.Database.DbDatabase.CompatibleWithModel(System.Boolean)">
            <summary>
            This method returns true if the context has a model hash and the database contains a model hash
            and these hashes match.  This indicates that the model used to create the database is the same
            as the current model and so the two can be used together.
            </summary>
            <param name="throwIfNoMetadata">If set to <c>true</c> then an exception will be thrown if no
            model metadata is found either in the model associated with the context or in the database
            itself.  If set to <c>false</c> then this method will return <c>true</c> if metadata is
            not found.</param>
            <returns>
            True if the model hash in the context and the database match; false otherwise.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Database.DbDatabase.Create">
            <summary>
            Creates a new database on the database server for the model defined in the backing context.
            Note that calling this method before the database initialization strategy has run will disable
            executing that strategy.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Database.DbDatabase.CreateIfNotExists">
            <summary>
            Creates a new database on the database server for the model defined in the backing context, but only
            if a database with the same name does not already exist on the server.
            </summary>
            <returns>True if the database did not exist and was created; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.DbDatabase.Exists">
            <summary>
            Checks whether or not the database exists on the server.
            </summary>
            <returns>True if the database exists; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.DbDatabase.Delete">
            <summary>
            Deletes the database on the database server if it exists, otherwise does nothing.
            </summary>
            <returns>True if the database did exist and was deleted; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.DbDatabase.Exists(System.String)">
            <summary>
            Checks whether or not the database exists on the server.
            The connection to the database is created using the given database name or connection string
            in the same way as is described in the documentation for the <see cref="T:System.Data.Entity.DbContext"/> class.
            </summary>
            <param name="nameOrConnectionString">The database name or a connection string to the database.</param>
            <returns>True if the database exists; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.DbDatabase.Delete(System.String)">
            <summary>
            Deletes the database on the database server if it exists, otherwise does nothing.
            The connection to the database is created using the given database name or connection string
            in the same way as is described in the documentation for the <see cref="T:System.Data.Entity.DbContext"/> class.
            </summary>
            <param name="nameOrConnectionString">The database name or a connection string to the database.</param>
            <returns>True if the database did exist and was deleted; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.DbDatabase.Exists(System.Data.Common.DbConnection)">
            <summary>
            Checks whether or not the database exists on the server.
            </summary>
            <param name="existingConnection">An existing connection to the database.</param>
            <returns>True if the database exists; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.DbDatabase.Delete(System.Data.Common.DbConnection)">
            <summary>
            Deletes the database on the database server if it exists, otherwise does nothing.
            </summary>
            <param name="existingConnection">An existing connection to the database.</param>
            <returns>True if the database did exist and was deleted; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.DbDatabase.PerformDatabaseOp(System.Data.Entity.Internal.LazyInternalConnection,System.Func{System.Data.Objects.ObjectContext,System.Boolean})">
            <summary>
            Performs the operation defined by the given delegate using the given lazy connection, ensuring
            that the lazy connection is disposed after use.
            </summary>
            <param name="lazyConnection">Information used to create a DbConnection.</param>
            <param name="operation">The operation to perform.</param>
            <returns>The return value of the operation.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.DbDatabase.PerformDatabaseOp(System.Data.Common.DbConnection,System.Func{System.Data.Objects.ObjectContext,System.Boolean})">
            <summary>
            Performs the operation defined by the given delegate against a connection.  The connection
            is either the connection accessed from the context backing this object, or is obtained from
            the connection information passed to one of the static methods.
            </summary>
            <param name="connection">The connection to use.</param>
            <param name="operation">The operation to perform.</param>
            <returns>The return value of the operation.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.DbDatabase.CreateEmptyObjectContext(System.Data.Common.DbConnection)">
            <summary>
            Returns an empty ObjectContext that can be used to perform delete/exists operations.
            </summary>
            <param name="connection">The connection for which to create an ObjectContext</param>
            <returns>The empty context.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.DbDatabase.SqlQuery``1(System.String,System.Object[])">
            <summary>
            Creates a raw SQL query that will return elements of the given generic type.
            The type can be any type that has properties that match the names of the columns returned
            from the query, or can be a simple primitive type.  The type does not have to be an
            entity type. The results of this query are never tracked by the context even if the
            type of object returned is an entity type.  Use the <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])"/>
            method to return entities that are tracked by the context.
            </summary>
            <typeparam name="TElement">The type of object returned by the query.</typeparam>
            <param name="sql">The SQL query string.</param>
            <param name="parameters">The parameters to apply to the SQL query string.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> object that will execute the query when it is enumerated.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.DbDatabase.SqlQuery(System.Type,System.String,System.Object[])">
            <summary>
            Creates a raw SQL query that will return elements of the given type.
            The type can be any type that has properties that match the names of the columns returned
            from the query, or can be a simple primitive type.  The type does not have to be an
            entity type. The results of this query are never tracked by the context even if the
            type of object returned is an entity type.  Use the <see cref="M:System.Data.Entity.Infrastructure.DbSet.SqlQuery(System.String,System.Object[])"/>
            method to return entities that are tracked by the context.
            </summary>
            <param name="elementType">The type of object returned by the query.</param>
            <param name="sql">The SQL query string.</param>
            <param name="parameters">The parameters to apply to the SQL query string.</param>
            <returns>A <see cref="T:System.Collections.IEnumerable"/> object that will execute the query when it is enumerated.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.DbDatabase.SqlCommand(System.String,System.Object[])">
            <summary>
            Executes the given DDL/DML command against the database.
            </summary>
            <param name="sql">The command string.</param>
            <param name="parameters">The parameters to apply to the command string.</param>
            <returns>The result returned by the database after executing the command.</returns>
        </member>
        <member name="P:System.Data.Entity.Database.DbDatabase.Connection">
            <summary>
            Returns the connection being used by this context.  This may cause the context to be initialized
            and the connection to be created if it does not already exist.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
        </member>
        <member name="P:System.Data.Entity.Database.DbDatabase.DefaultConnectionFactory">
            <summary>
            The connection factory to use when creating a <see cref="T:System.Data.Common.DbConnection"/> from just
            a database name or a connection string.
            </summary>
            <remarks>
            This is used when just a database name or connection string is given to <see cref="T:System.Data.Entity.DbContext"/> or when
            the no database name or connection is given to DbContext in which case the name of
            the context class is passed to this factory in order to generate a DbConnection.
            The default connection factory creates a connection to SQL Express on the local machine.  However,
            this default may be changed by an application framework.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Database.DbSqlQuery">
            <summary>
            Represents a SQL query for entities that is created from a <see cref="T:System.Data.Entity.DbContext"/> 
            and is executed using the connection from that context.
            Instances of this class are obtained from the <see cref="T:System.Data.Entity.Infrastructure.DbSet"/> instance for the 
            entity type. The query is not executed when this object is created; it is executed
            each time it is enumerated, for example by using foreach.
            SQL queries for non-entities are created using the <see cref="P:System.Data.Entity.DbContext.Database"/>.
            See <see cref="T:System.Data.Entity.Database.DbSqlQuery`1"/> for a generic version of this class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Database.DbSqlQuery.#ctor(System.Data.Entity.Internal.InternalSqlQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Database.DbSqlQuery"/> class.
            </summary>
            <param name="internalQuery">The internal query.</param>
        </member>
        <member name="M:System.Data.Entity.Database.DbSqlQuery.GetEnumerator">
            <summary>
            Executes the query and returns an enumerator for the elements.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the elements.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Database.DbSqlQuery.AsNoTracking">
            <summary>
            Returns a new query where the results of the query will not be tracked by the associated
            <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <returns>A new query with no-tracking applied.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.DbSqlQuery.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that contains the SQL string that was set
            when the query was created.  The parameters are not included.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Database.DbSqlQuery.System#ComponentModel#IListSource#GetList">
            <summary>
            Throws an exception indicating that binding directly to a store query is not supported.
            </summary>
            <returns>
            Never returns; always throws.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Database.DbSqlQuery.InternalQuery">
            <summary>
            Gets the internal query.
            </summary>
            <value>The internal query.</value>
        </member>
        <member name="P:System.Data.Entity.Database.DbSqlQuery.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
            Returns <c>false</c>.
            </summary>
            <returns><c>false</c>.</returns>
        </member>
        <member name="T:System.Data.Entity.Database.DbSqlQuery`1">
            <summary>
            Represents a SQL query for entities that is created from a <see cref="T:System.Data.Entity.DbContext"/> 
            and is executed using the connection from that context.
            Instances of this class are obtained from the <see cref="T:System.Data.Entity.DbSet`1"/> instance for the 
            entity type. The query is not executed when this object is created; it is executed
            each time it is enumerated, for example by using foreach.
            SQL queries for non-entities are created using the <see cref="P:System.Data.Entity.DbContext.Database"/>.
            See <see cref="T:System.Data.Entity.Database.DbSqlQuery"/> for a non-generic version of this class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Database.DbSqlQuery`1.GetEnumerator">
            <summary>
            Executes the query and returns an enumerator for the elements.
            </summary>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the elements.
        </member>
        <member name="M:System.Data.Entity.Database.DbSqlQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Executes the query and returns an enumerator for the elements.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the elements.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Database.DbSqlQuery`1.AsNoTracking">
            <summary>
            Returns a new query where the results of the query will not be tracked by the associated
            <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <returns>A new query with no-tracking applied.</returns>
        </member>
        <member name="M:System.Data.Entity.Database.DbSqlQuery`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that contains the SQL string that was set
            when the query was created.  The parameters are not included.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Database.DbSqlQuery`1.System#ComponentModel#IListSource#GetList">
            <summary>
            Throws an exception indicating that binding directly to a store query is not supported.
            </summary>
            <returns>
            Never returns; always throws.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Database.DbSqlQuery`1.InternalQuery">
            <summary>
            Gets the internal query.
            </summary>
            <value>The internal query.</value>
        </member>
        <member name="P:System.Data.Entity.Database.DbSqlQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
            Returns <c>false</c>.
            </summary>
            <returns><c>false</c>.</returns>
        </member>
        <member name="T:System.Data.Entity.Database.IDbConnectionFactory">
            <summary>
            Implementations of this interface are used to create DbConnection objects for
            a type of database server based on a given database name.  
            An Instance is set on the <see cref="T:System.Data.Entity.Database.DbDatabase"/> class to
            cause all DbContexts created with no connection information or just a database
            name or connection string to use a certain type of database server by default.
            Two implementations of this interface are provided: <see cref="T:System.Data.Entity.Database.SqlConnectionFactory"/>
            is used to create connections to Microsoft SQL Server, including EXPRESS editions.
            <see cref="T:System.Data.Entity.Database.SqlCeConnectionFactory"/> is used to create connections to Microsoft SQL
            Server Compact Editions.
            Other implementations for other database servers can be added as needed.
            Note that implementations should be thread safe or immutable since they may
            be accessed by multiple threads at the same time.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Database.IDbConnectionFactory.CreateConnection(System.String)">
            <summary>
            Creates a connection based on the given database name or connection string.
            </summary>
            <param name="nameOrConnectionString">The database name or connection string.</param>
            <returns>An initialized DbConnection.</returns>
        </member>
        <member name="T:System.Data.Entity.Database.DropCreateDatabaseIfModelChanges`1">
            <summary>
            An implementation of IDatabaseInitializer that will <b>DELETE</b>, recreate, and optionally re-seed the
            database only if the model has changed since the database was created.  This is achieved by writing a
            hash of the store model to the database when it is created and then comparing that hash with one
            generated from the current model.
            To seed the database, create a derived class and override the Seed method.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Database.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(`0)">
            <summary>
            Executes the strategy to initialize the database for the given context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:System.Data.Entity.Database.DropCreateDatabaseIfModelChanges`1.Seed(`0)">
            <summary>
            A that should be overridden to actually add data to the context for seeding. 
            The default implementation does nothing.
            </summary>
            <param name="context">The context to seed.</param>
        </member>
        <member name="T:System.Data.Entity.Database.IncludeMetadataConvention">
            <summary>
            This <see cref="T:System.Data.Entity.ModelConfiguration.ModelBuilder"/> convention causes ModelBuilder to include metadata about the model 
            when it builds the model. When <see cref="T:System.Data.Entity.DbContext"/> creates a model by convention it will
            add this convention to the list of those used by the ModelBuilder.  This will then result in
            model metadata being written to the database if the DbContext is used to create the database.
            This can then be used as a quick check to see if the model has changed since the last time it was
            used against the database.
            This convention can be removed from the <see cref="T:System.Data.Entity.ModelConfiguration.ModelBuilder"/> conventions by overriding
            the OnModelCreating method on a derived DbContext class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Database.IncludeMetadataConvention.System#Data#Entity#ModelConfiguration#Conventions#Configuration#IConfigurationConvention#Apply(System.Data.Entity.ModelConfiguration.Configuration.ModelConfiguration)">
            <summary>
            Adds metadata to the given model configuration.
            </summary>
            <param name="modelConfiguration">The model configuration.</param>
        </member>
        <member name="T:System.Data.Entity.Database.SqlCeConnectionFactory">
            <summary>
            Instances of this class are used to create DbConnection objects for
            SQL Server Compact Edition based on a given database name or connection string.
            </summary>
            <remarks>
            It is necessary to provide the provider invariant name of the SQL Server Compact
            Edition to use when creating an instance of this class.  This is because different
            versions of SQL Server Compact Editions use different invariant names.
            An instance of this class can be set on the <see cref="T:System.Data.Entity.Database.DbDatabase"/> class to
            cause all DbContexts created with no connection information or just a database
            name or connection string to use SQL Server Compact Edition by default.
            This class is immutable since multiple threads may access instances simultaneously
            when creating connections.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Database.SqlCeConnectionFactory.#ctor(System.String)">
            <summary>
            Creates a new connection factory with empty (default) DatabaseDirectory and BaseConnectionString
            properties.
            </summary>
            <param name="providerInvariantName">The provider invariant name that specifies the version of SQL Server Compact Edition that should be used.</param>
        </member>
        <member name="M:System.Data.Entity.Database.SqlCeConnectionFactory.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new connection factory with the given DatabaseDirectory and BaseConnectionString properties.
            </summary>
            <param name="providerInvariantName">
            The provider invariant name that specifies the version of SQL Server Compact Edition that should be used.
            </param>
            <param name="databaseDirectory">
            The path to prepend to the database name that will form the file name used by SQL Server Compact Edition
            when it creates or reads the database file. An empty string means that SQL Server Compact Edition will use
            its default for the database file location.
            </param>
            <param name="baseConnectionString">
            The connection string to use for options to the database other than the 'Data Source'. The Data Source will
            be prepended to this string based on the database name when CreateConnection is called.
            </param>
        </member>
        <member name="M:System.Data.Entity.Database.SqlCeConnectionFactory.CreateConnection(System.String)">
            <summary>
            Creates a connection for SQL Server Compact Edition based on the given database name or connection string.
            If the given string contains an '=' character then it is treated as a full connection string,
            otherwise it is treated as a database name only.
            </summary>
            <param name="nameOrConnectionString">The database name or connection string.</param>
            <returns>An initialized DbConnection.</returns>
        </member>
        <member name="P:System.Data.Entity.Database.SqlCeConnectionFactory.DatabaseDirectory">
            <summary>
            The path to prepend to the database name that will form the file name used by
            SQL Server Compact Edition when it creates or reads the database file.
            The default value is "|DataDirectory|", which means the file will be placed
            in the designated data directory.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Database.SqlCeConnectionFactory.BaseConnectionString">
            <summary>
            The connection string to use for options to the database other than the 'Data Source'.
            The Data Source will be prepended to this string based on the database name when
            CreateConnection is called.
            The default is the empty string, which means no other options will be used.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Database.SqlCeConnectionFactory.ProviderInvariantName">
            <summary>
            The provider invariant name that specifies the version of SQL Server Compact Edition
            that should be used.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Database.SqlConnectionFactory">
            <summary>
            Instances of this class are used to create DbConnection objects for
            SQL Server based on a given database name or connection string. By default, the connection is
            made to '.\SQLEXPRESS'.  This can be changed by changing the base connection
            string when constructing a factory instance.
            </summary>
            <remarks>
            An instance of this class can be set on the <see cref="T:System.Data.Entity.Database.DbDatabase"/> class to
            cause all DbContexts created with no connection information or just a database
            name or connection string to use SQL Server by default.
            This class is immutable since multiple threads may access instances simultaneously
            when creating connections.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Database.SqlConnectionFactory.#ctor">
            <summary>
            Creates a new connection factory with a default BaseConnectionString property of
            'Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True'.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Database.SqlConnectionFactory.#ctor(System.String)">
            <summary>
            Creates a new connection factory with the given BaseConnectionString property.
            </summary>
            <param name="baseConnectionString">
            The connection string to use for options to the database other than the 'Initial Catalog'. The 'Initial Catalog' will
            be prepended to this string based on the database name when CreateConnection is called.
            </param>
        </member>
        <member name="M:System.Data.Entity.Database.SqlConnectionFactory.CreateConnection(System.String)">
            <summary>
            Creates a connection for SQL Server based on the given database name or connection string.
            If the given string contains an '=' character then it is treated as a full connection string,
            otherwise it is treated as a database name only.
            </summary>
            <param name="nameOrConnectionString">The database name or connection string.</param>
            <returns>An initialized DbConnection.</returns>
        </member>
        <member name="P:System.Data.Entity.Database.SqlConnectionFactory.BaseConnectionString">
            <summary>
            The connection string to use for options to the database other than the 'Initial Catalog'.
            The 'Initial Catalog' will  be prepended to this string based on the database name when
            CreateConnection is called.
            The default is 'Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True'.
            </summary>
        </member>
        <member name="T:System.Data.Entity.DbContext">
            <summary>
            A DbContext instance represents a combination of the Unit Of Work and Repository patterns such that
            it can be used to query from a database and group together changes that will then be written
            back to the store as a unit.
            DbContext is conceptually similar to ObjectContext.
            </summary>
            <remarks>
            DbContext is usually used with a derived type that contains <see cref="T:System.Data.Entity.DbSet`1"/> properties for
            the root entities of the model. These sets are automatically initialized when the
            instance of the derived class is created.  This behavior can be modified by applying the
            <see cref="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute"/>  attribute to either the entire derived context
            class, or to individual properties on the class.
            
            The Entity Data Model backing the context can be specified in several ways.  When using the Code First
            approach, the <see cref="T:System.Data.Entity.DbSet`1"/> properties on the derived context are used to build a model
            by convention.  The protected OnModelCreating method can be overridden to tweak this model.  More
            control over the model used for the Model First approach can be obtained by creating a <see cref="T:System.Data.Entity.Infrastructure.DbModel"/>
            explicitly from a <see cref="T:System.Data.Entity.ModelConfiguration.ModelBuilder"/> and passing this model to one of the DbContext constructors.
            
            When using the Database First or Model First approach the Entity Data Model can be created using the
            Entity Designer (or manually through creation of an EDMX file) and then this model can be specified using
            entity connection string or an <see cref="T:System.Data.EntityClient.EntityConnection"/> object.
            
            The connection to the database (including the name of the database) can be specified in several ways.
            If the parameterless DbContext constructor is called from a derived context, then the name of the derived context
            is used to find a connection string in the app.config or web.config file.  If no connection string is found, then
            the name is passed to the DefaultConnectionFactory registered on the <see cref="T:System.Data.Entity.Database.DbDatabase"/> class.  The connection
            factory then uses the context name as the database name in a default connection string.  (This default connection
            string points to .\SQLEXPRESS on the local machine unless a different DefaultConnectionFactory is registered.)
            
            Instead of using the derived context name, the connection/database name can also be specified explicitly by
            passing the name to one of the DbContext constructors that takes a string.  The name can also be passed in
            the form "name=myname", in which case the name must be found in the config file or an exception will be thrown.
            
            Note that the connection found in the app.config or web.config file can be a normal database connection
            string (not a special Entity Framework connection string) in which case the DbContext will use Code First.
            However, if the connection found in the config file is a special Entity Framework connection string, then the
            DbContext will use Database/Model First and the model specified in the connection string will be used.
            
            An existing or explicitly created DbConnection can also be used instead of the database/connection name.
            
            A <see cref="T:System.Data.Entity.ModelBuilderVersionAttribute"/> can be applied to a class derived from DbContext to set the
            version of conventions used by the context when it creates a model. If no attribute is applied then the
            latest version of conventions will be used.
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.IObjectContextAdapter">
            <summary>
            Interface implemented by objects that can provide an <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext"/> instance.
            The <see cref="T:System.Data.Entity.DbContext"/> class implements this interface to provide access to the underlying
            ObjectContext.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext">
            <summary>
            Gets the object context.
            </summary>
            <value>The object context.</value>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor">
            <summary>
            Constructs a new context instance using conventions to create the name of the database to
            which a connection will be made.  The by-convention name is the full name (namespace + class name)
            of the derived context class.
            See the class remarks for how this is used to create a connection.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Infrastructure.DbModel)">
            <summary>
            Constructs a new context instance using conventions to create the name of the database to
            which a connection will be made, and initializes it from the given model.
            The by-convention name is the full name (namespace + class name) of the derived context class.
            See the class remarks for how this is used to create a connection.
            </summary>
            <param name="model">The model that will back this context.</param>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.String)">
            <summary>
            Constructs a new context instance using the given string as the name or connection string for the
            database to which a connection will be made.
            See the class remarks for how this is used to create a connection.
            </summary>
            <param name="nameOrConnectionString">Either the database name or a connection string.</param>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.String,System.Data.Entity.Infrastructure.DbModel)">
            <summary>
            Constructs a new context instance using the given string as the name or connection string for the
            database to which a connection will be made, and initializes it from the given model.
            See the class remarks for how this is used to create a connection.
            </summary>
            <param name="nameOrConnectionString">Either the database name or a connection string.</param>
            <param name="model">The model that will back this context.</param>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            Constructs a new context instance using the existing connection to connect to a database.
            The connection will not be disposed when the context is disposed.
            </summary>
            <param name="existingConnection">An existing connection to use for the new context.</param>
            <param name="contextOwnsConnection">If set to <c>true</c> the connection is disposed when
            the context is disposed, otherwise the caller must dispose the connection.</param>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbModel,System.Boolean)">
            <summary>
            Constructs a new context instance using the existing connection to connect to a database,
            and initializes it from the given model.
            The connection will not be disposed when the context is disposed.
            <param name="existingConnection">An existing connection to use for the new context.</param>
            <param name="model">The model that will back this context.</param>
            <param name="contextOwnsConnection">If set to <c>true</c> the connection is disposed when
            the context is disposed, otherwise the caller must dispose the connection.</param>
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Objects.ObjectContext,System.Boolean)">
            <summary>
            Constructs a new context instance around an existing ObjectContext.
            <param name="objectContext">An existing ObjectContext to wrap with the new context.</param>
            <param name="dbContextOwnsObjectContext">If set to <c>true</c> the ObjectContext is disposed when
            the DbContext is disposed, otherwise the caller must dispose the connection.</param>
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbContext.InitializeLazyInternalContext(System.Data.Entity.Internal.IInternalConnection,System.Data.Entity.Infrastructure.DbModel)">
            <summary>
            Initializes the internal context, discovers and initializes sets, and initializes from a model if one is provided.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbContext.DiscoverAndInitializeSets">
            <summary>
            Discovers DbSets and initializes them.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.ModelConfiguration.ModelBuilder)">
            <summary>
            This method is called when the model for a derived context has been initialized, but
            before the model has been locked down and used to initialize the context.  The default
            implementation of this method does nothing, but it can be overridden in a derived class
            such that the model can be further configured before it is locked down.
            </summary>
            <remarks>
            Typically, this method is called only once when the first instance of a derived context
            is created.  The model for that context is then cached and is for all further instances of
            the context in the app domain.  This caching can be disabled by setting the ModelCaching
            property on the given ModelBuidler, but note that this can seriously degrade performance.
            More control over caching is provided through use of the ModelBuilder and DbContextFactory
            classes directly.
            </remarks>
            <param name="modelBuilder">The builder that defines the model for the context being created.</param>
        </member>
        <member name="M:System.Data.Entity.DbContext.Set``1">
            <summary>
            Returns a DbSet instance for access to entities of the given type in the context,
            the ObjectStateManager, and the underlying store.
            </summary>
            <remarks>
            See the DbSet class for more details.
            </remarks>
            <typeparam name="TEntity">The type entity for which a set should be returned.</typeparam>
            <returns>A set for the given entity type.</returns>
        </member>
        <member name="M:System.Data.Entity.DbContext.Set(System.Type)">
            <summary>
            Returns a non-generic DbSet instance for access to entities of the given type in the context,
            the ObjectStateManager, and the underlying store.
            </summary>
            <param name="entityType">The type of entity for which a set should be returned.</param>
            <returns>A set for the given entity type.</returns>
            <remarks>
            See the DbSet class for more details.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbContext.SaveChanges">
            <summary>
            Saves all changes made in this context to the underlying database.
            </summary>
            <returns>The number of objects written to the underlying database.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
        </member>
        <member name="M:System.Data.Entity.DbContext.GetValidationErrors">
            <summary>
            Validates tracked entities and returns a Collection of <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult"/> containing validation results.
            </summary>
            <returns>
            Collection of validation results for invalid entities. The collection is never null and must not contain null 
            values or results for valid entities.
            </returns>
            <remarks>
            1. This method calls DetectChanges() to determine states of the tracked entities unless 
               DbContextConfiguration.AutoDetectChangesEnabled is set to false.
            2. By default only Added on Modified entities are validated. The user is able to change this behavior 
               by overriding ShouldValidateEntity method.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbContext.ShouldValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
            <summary>
            Extension point allowing the user to override the default behavior of validating only
            Added and modified entities.
            </summary>
            <param name="entityEntry">DbEntityEntry instance that is supposed to be validated.</param>
            <returns>true to proceed with validation. false otherwise.</returns>
        </member>
        <member name="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Extension point allowing the user to customize validation of an entity or filter out validation results.
            </summary>
            <param name="entityEntry">DbEntityEntry instance to be validated.</param>
            <returns>Entity validation result. Possibly null when overriden.</returns>
        </member>
        <member name="M:System.Data.Entity.DbContext.Entry``1(``0)">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> object for the given entity providing access to
            information about the entity and the ability to perform actions on the entity.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="entity">The entity.</param>
            <returns>An entry for the entity.</returns>
        </member>
        <member name="M:System.Data.Entity.DbContext.Entry(System.Object)">
            <summary>
            Gets a <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> object for the given entity providing access to
            information about the entity and the ability to perform actions on the entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>An entry for the entity.</returns>
        </member>
        <member name="M:System.Data.Entity.DbContext.Dispose">
            <summary>
            Calls the protected Dispose method.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbContext.Dispose(System.Boolean)">
            <summary>
            Disposes the context. The underlying <see cref="T:System.Data.Objects.ObjectContext"/> is also disposed if it was created
            is by this context or ownership was passed to this context when this context was created.
            The connection to the database (<see cref="T:System.Data.Common.DbConnection"/> object) is also disposed if it was created
            is by this context or ownership was passed to this context when this context was created.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:System.Data.Entity.DbContext.Database">
            <summary>
            Creates a DbDatabase instance for this context that allows for creation/deletion/existence checks
            for the underlying database.
            </summary>
        </member>
        <member name="P:System.Data.Entity.DbContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
            <summary>
            Returns the Entity Framework ObjectContext that is underlying this context.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
        </member>
        <member name="P:System.Data.Entity.DbContext.ChangeTracker">
            <summary>
            Provides access to features of the context that deal with change tracking of entities.
            </summary>
            <value>An object used to access features that deal with change tracking.</value>
        </member>
        <member name="P:System.Data.Entity.DbContext.Configuration">
            <summary>
            Provides access to configuration options for the context.
            </summary>
            <value>An object used to access configuration options.</value>
        </member>
        <member name="P:System.Data.Entity.DbContext.InternalContext">
            <summary>
            Provides access to the underlying InternalContext for other parts of the internal design.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.DbExtensions.Include``1(System.Linq.IQueryable{``0},System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.DbExtensions.Include(System.Linq.IQueryable,System.String)" -->
        <member name="M:System.Data.Entity.DbExtensions.CommonInclude``1(``0,System.String)">
            <summary>
            Common code for generic and non-generic string Include.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.DbExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" -->
        <member name="M:System.Data.Entity.DbExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
            <summary>
            Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext"/>
            or <see cref="T:System.Data.Objects.ObjectContext"/>.  This method works by calling the AsNoTracking method of the
            underlying query object.  If the underlying query object does not have a AsNoTracking method,
            then calling this method will have no affect.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The source query.</param>
            <returns>A new query with NoTracking applied, or the source query if NoTracking is not supported.</returns>
        </member>
        <member name="M:System.Data.Entity.DbExtensions.AsNoTracking(System.Linq.IQueryable)">
            <summary>
            Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext"/>
            or <see cref="T:System.Data.Objects.ObjectContext"/>.  This method works by calling the AsNoTracking method of the
            underlying query object.  If the underlying query object does not have a AsNoTracking method,
            then calling this method will have no affect.
            </summary>
            <param name="source">The source query.</param>
            <returns>A new query with NoTracking applied, or the source query if NoTracking is not supported.</returns>
        </member>
        <member name="M:System.Data.Entity.DbExtensions.CommonAsNoTracking``1(``0)">
            <summary>
            Common code for generic and non-generic AsNoTracking.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbExtensions.Load(System.Linq.IQueryable)">
            <summary>
            Enumerates the query such that for server queries such as those of <see cref="T:System.Data.Entity.DbSet`1"/>, <see cref="T:System.Data.Objects.ObjectSet`1"/>,
            <see cref="T:System.Data.Objects.ObjectQuery`1"/>, and others the results of the query will be loaded into the associated <see cref="T:System.Data.Entity.DbContext"/>,
            <see cref="T:System.Data.Objects.ObjectContext"/> or other cache on the client.
            This is equivalent to calling ToList and then throwing away the list without the overhead of actually creating the list.
            </summary>
            <param name="source">The source query.</param>
        </member>
        <member name="M:System.Data.Entity.DbExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Returns an <see cref="T:System.ComponentModel.BindingList`1"/> implementation that stays in sync with the given <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="source">The collection that the binding list will stay in sync with.</param>
            <returns>The binding list.</returns>
        </member>
        <member name="T:System.Data.Entity.DbSet`1">
            <summary>
            A DbSet represents the collection of all entities in the context, or that can be queried from the
            database, of a given type.  DbSet objects are created from a DbContext using the DbContext.Set method.
            </summary>
            <remarks>
            Note that DbSet does not support MEST (Multiple Entity Sets per Type) meaning that there is always a
            one-to-one correlation between a type and a set. 
            </remarks>
            <typeparam name="TEntity">The type that defines the set.</typeparam>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbQuery`1">
            <summary>
            Represents a LINQ to Entities query against a DbContext.
            </summary>
            <typeparam name="TResult">The type of entity to query for.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.#ctor(System.Linq.IQueryable{`0})">
            <summary>
            Creates a new query that will be backed by the given internal IQueryable.
            </summary>
            <param name="internalQuery">The backing query.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)" -->
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsNoTracking">
            <summary>
            Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <returns> A new query with NoTracking applied.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#GetList">
            <summary>
            Throws an exception indicating that binding directly to a store query is not supported.
            Instead populate a DbSet with data, for example by using the Load extension method, and
            then bind to local data.  For WPF bind to DbSet.Local.  For Windows Forms bind to
            DbSet.Local.ToBindingList().
            </summary>
            <returns>
            Never returns; always throws.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#Generic#IEnumerable{TResult}#GetEnumerator">
            <summary>
            Gets the enumeration of this query causing it to be executed against the store.
            </summary>
            <returns>An enumerator for the query</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumeration of this query causing it to be executed against the store.
            </summary>
            <returns>An enumerator for the query</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of the underlying query.
            </summary>
            <returns>
            The query string.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.op_Implicit(System.Data.Entity.Infrastructure.DbQuery{`0})~System.Data.Entity.Infrastructure.DbQuery">
            <summary>
            Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/> class for this query. 
            </summary>
            <returns>A non-generic version.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
            Returns <c>false</c>.
            </summary>
            <returns><c>false</c>.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#ElementType">
            <summary>
            The IQueryable element type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Expression">
            <summary>
            The IQueryable LINQ Expression.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Provider">
            <summary>
            The IQueryable provider.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.InternalQuery">
            <summary>
            The internal IQueryable that is backing this DbQuery
            </summary>
        </member>
        <member name="T:System.Data.Entity.IDbSet`1">
            <summary>
            An IDbSet represents the collection of all entities in the context, or that can be queried from the
            database, of a given type.  DbSet is a concrete implementation of IDbSet.
            </summary>
            <typeparam name="TEntity">The type that defines the set.</typeparam>
        </member>
        <member name="M:System.Data.Entity.IDbSet`1.Find(System.Object[])">
            <summary>
            Finds an entity with the given primary key values.
            If an entity with the given primary key values exists in the context, then it is
            returned immediately without making a request to the store.  Otherwise, a request
            is made to the store for an entity with the given primary key values and this entity,
            if found, is attached to the context and returned.  If no entity is found in the
            context or the store, then null is returned.
            </summary>
            <remarks>
            The ordering of composite key values is as defined in the EDM, which is in turn as defined in
            the designer, by the Code First fluent API, or by the DataMember attribute.
            </remarks>
            <param name="keyValues">The values of the primary key for the entity to be found.</param>
            <returns>The entity found, or null.</returns>
        </member>
        <member name="M:System.Data.Entity.IDbSet`1.Add(`0)">
            <summary>
            Adds the given entity to the context underlying the set in the Added state such that it will
            be inserted into the database when SaveChanges is called.
            </summary>
            <param name="entity">The entity to add.</param>
            <returns>The entity.</returns>
            <remarks>
            Note that entities that are already in the context in some other state will have their state set
            to Added.  Add is a no-op if the entity is already in the context in the Added state.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.IDbSet`1.Remove(`0)">
            <summary>
            Marks the given entity as Deleted such that it will be deleted from the database when SaveChanges
            is called.  Note that the entity must exist in the context in some other state before this method
            is called.
            </summary>
            <param name="entity">The entity to remove.</param>
            <returns>The entity.</returns>
            <remarks>
            Note that if the entity exists in the context in the Added state, then this method
            will cause it to be detached from the context.  This is because an Added entity is assumed not to
            exist in the database such that trying to delete it does not make sense.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.IDbSet`1.Attach(`0)">
            <summary>
            Attaches the given entity to the context underlying the set.  That is, the entity is placed
            into the context in the Unchanged state, just as if it had been read from the database.
            </summary>
            <param name="entity">The entity to attach.</param>
            <returns>The entity.</returns>
            <remarks>
            Attach is used to repopulate a context with an entity that is known to already exist in the database.
            SaveChanges will therefore not attempt to insert an attached entity into the database because
            it is assumed to already be there.
            Note that entities that are already in the context in some other state will have their state set
            to Unchanged.  Attach is a no-op if the entity is already in the context in the Unchanged state.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.IDbSet`1.Create">
            <summary>
            Creates a new instance of an entity for the type of this set.
            Note that this instance is NOT added or attached to the set.
            The instance returned will be a proxy if the underlying context is configured to create
            proxies and the entity type meets the requirements for creating a proxy.
            </summary>
            <returns>The entity instance, which may be a proxy.</returns>
        </member>
        <member name="M:System.Data.Entity.IDbSet`1.Create``1">
            <summary>
            Creates a new instance of an entity for the type of this set or for a type derived
            from the type of this set.
            Note that this instance is NOT added or attached to the set.
            The instance returned will be a proxy if the underlying context is configured to create
            proxies and the entity type meets the requirements for creating a proxy.
            </summary>
            <typeparam name="TDerivedEntity">The type of entity to create.</typeparam>
            <returns> The entity instance, which may be a proxy. </returns>
        </member>
        <member name="P:System.Data.Entity.IDbSet`1.Local">
            <summary>
            Gets an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> that represents a local view of all Added, Unchanged,
            and Modified entities in this set.  This local view will stay in sync as entities are added or
            removed from the context.  Likewise, entities added to or removed from the local view will automatically
            be added to or removed from the context.
            </summary>
            <remarks>
            This property can be used for data binding by populating the set with data, for example by using the Load
            extension method, and then binding to the local data through this property.  For WPF bind to this property
            directly.  For Windows Forms bind to the result of calling ToBindingList on this property
            </remarks>
            <value>The local view.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.Linq.IInternalSetAdapter">
            <summary>
            An internal interface implemented by <see cref="T:System.Data.Entity.DbSet`1"/> that allows access to
            the internal set.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.IInternalSetAdapter.InternalSet">
            <summary>
            The underlying internal set.
            </summary>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.#ctor(System.Data.Entity.Internal.Linq.InternalSet{`0})">
            <summary>
            Creates a new set that will be backed by the given <see cref="T:System.Data.Entity.Internal.Linq.InternalSet`1"/>.
            </summary>
            <param name="internalSet">The internal set.</param>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.Find(System.Object[])">
            <summary>
            Finds an entity with the given primary key values.
            If an entity with the given primary key values exists in the context, then it is
            returned immediately without making a request to the store.  Otherwise, a request
            is made to the store for an entity with the given primary key values and this entity,
            if found, is attached to the context and returned.  If no entity is found in the
            context or the store, then null is returned.
            </summary>
            <remarks>
            The ordering of composite key values is as defined in the EDM, which is in turn as defined in
            the designer, by the Code First fluent API, or by the DataMember attribute.
            </remarks>
            <param name="keyValues">The values of the primary key for the entity to be found.</param>
            <returns>The entity found, or null.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if multiple entities exist in the context with the primary key values given.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the type of entity is not part of the data model for this context.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the types of the key values do not match the types of the key values for the entity type to be found.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.Attach(`0)">
            <summary>
            Attaches the given entity to the context underlying the set.  That is, the entity is placed
            into the context in the Unchanged state, just as if it had been read from the database.
            </summary>
            <param name="entity">The entity to attach.</param>
            <returns>The entity.</returns>
            <remarks>
            Attach is used to repopulate a context with an entity that is known to already exist in the database.
            SaveChanges will therefore not attempt to insert an attached entity into the database because
            it is assumed to already be there.
            Note that entities that are already in the context in some other state will have their state set
            to Unchanged.  Attach is a no-op if the entity is already in the context in the Unchanged state.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.Add(`0)">
            <summary>
            Adds the given entity to the context underlying the set in the Added state such that it will
            be inserted into the database when SaveChanges is called.
            </summary>
            <param name="entity">The entity to add.</param>
            <returns>The entity.</returns>
            <remarks>
            Note that entities that are already in the context in some other state will have their state set
            to Added.  Add is a no-op if the entity is already in the context in the Added state.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.Remove(`0)">
            <summary>
            Marks the given entity as Deleted such that it will be deleted from the database when SaveChanges
            is called.  Note that the entity must exist in the context in some other state before this method
            is called.
            </summary>
            <param name="entity">The entity to remove.</param>
            <returns>The entity.</returns>
            <remarks>
            Note that if the entity exists in the context in the Added state, then this method
            will cause it to be detached from the context.  This is because an Added entity is assumed not to
            exist in the database such that trying to delete it does not make sense.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.Create">
            <summary>
            Creates a new instance of an entity for the type of this set.
            Note that this instance is NOT added or attached to the set.
            The instance returned will be a proxy if the underlying context is configured to create
            proxies and the entity type meets the requirements for creating a proxy.
            </summary>
            <returns>The entity instance, which may be a proxy.</returns>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.Create``1">
            <summary>
            Creates a new instance of an entity for the type of this set or for a type derived
            from the type of this set.
            Note that this instance is NOT added or attached to the set.
            The instance returned will be a proxy if the underlying context is configured to create
            proxies and the entity type meets the requirements for creating a proxy.
            </summary>
            <typeparam name="TDerivedEntity">The type of entity to create.</typeparam>
            <returns> The entity instance, which may be a proxy. </returns>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.op_Implicit(System.Data.Entity.DbSet{`0})~System.Data.Entity.Infrastructure.DbSet">
            <summary>
            Returns the equivalent non-generic <see cref="T:System.Data.Entity.Infrastructure.DbSet"/> object.
            </summary>
            <returns>The non-generic set object.</returns>
        </member>
        <member name="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])">
            <summary>
            Creates a raw SQL query that will return entities in this set.  By default, the
            entities returned are tracked by the context; this can be changed by calling
            AsNoTracking on the <see cref="T:System.Data.Entity.Database.DbSqlQuery`1"/> returned.
            Note that the entities returned are always of the type for this set and never of
            a derived type.  If the table or tables queried may contain data for other entity
            types, then the SQL query must be written appropriately to ensure that only entities of
            the correct type are returned.
            </summary>
            <param name="sql">The SQL query string.</param>
            <param name="parameters">The parameters to apply to the SQL query string.</param>
            <returns>A <see cref="T:System.Data.Entity.Database.DbSqlQuery`1"/> object that will execute the query when it is enumerated.</returns>
        </member>
        <member name="P:System.Data.Entity.DbSet`1.Local">
            <summary>
            Gets an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> that represents a local view of all Added, Unchanged,
            and Modified entities in this set.  This local view will stay in sync as entities are added or
            removed from the context.  Likewise, entities added to or removed from the local view will automatically
            be added to or removed from the context.
            </summary>
            <remarks>
            This property can be used for data binding by populating the set with data, for example by using the Load
            extension method, and then binding to the local data through this property.  For WPF bind to this property
            directly.  For Windows Forms bind to the result of calling ToBindingList on this property
            </remarks>
            <value>The local view.</value>
        </member>
        <member name="P:System.Data.Entity.DbSet`1.System#Data#Entity#Internal#Linq#IInternalSetAdapter#InternalSet">
            <summary>
            The internal IQueryable that is backing this DbQuery
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
            <summary>
            A non-generic version of the <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2"/> class.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry">
            <summary>
            A non-generic version of the <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2"/> class.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry">
            <summary>
            This is an abstract base class use to represent a scalar or complex property, or a navigation property
            of an entity.  Scalar and complex properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/>,
            reference navigation properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry"/>, and collection
            navigation properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Create(System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry"/> from information in the given <see cref="P:System.Data.Entity.Infrastructure.DbMemberEntry.InternalMemberEntry"/>.
            This method will create an instance of the appropriate subclass depending on the metadata contained
            in the InternalMemberEntry instance.
            </summary>
            <param name="internalMemberEntry">The internal member entry.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetValidationErrors">
            <summary>
            Validates this property.
            </summary>
            <returns>
            Collection of <see cref="T:System.Data.Entity.Validation.DbValidationError"/> objects. Never null. If the entity is valid the collection will be empty.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Cast``2">
            <summary>
            Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2"/> object.
            </summary>
            <typeparam name="TEntity">The type of entity on which the member is declared.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <returns>The equivalent generic object.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.Name">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.CurrentValue">
            <summary>
            Gets or sets the current value of this property.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.EntityEntry">
            <summary>
            The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> to which this member belongs.
            </summary>
            <value>An entry for the entity that owns this member.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.InternalMemberEntry">
            <summary>
            Gets the <see cref="P:System.Data.Entity.Infrastructure.DbMemberEntry.InternalMemberEntry"/> backing this object.
            </summary>
            <value>The internal member entry.</value>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.Create(System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/> from information in the given <see cref="T:System.Data.Entity.Internal.InternalPropertyEntry"/>.
            Use this method in preference to the constructor since it may potentially create a subclass depending on
            the type of member represented by the InternalCollectionEntry instance.
            </summary>
            <param name="internalPropertyEntry">The internal property entry.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.#ctor(System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/> class.
            </summary>
            <param name="internalPropertyEntry">The internal entry.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.Cast``2">
            <summary>
            Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2"/> object.
            </summary>
            <typeparam name="TEntity">The type of entity on which the member is declared.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <returns>The equivalent generic object.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.Name">
            <summary>
            Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.OriginalValue">
            <summary>
            Gets or sets the original value of this property.
            </summary>
            <value>The original value.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.CurrentValue">
            <summary>
            Gets or sets the current value of this property.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.IsModified">
            <summary>
            Gets or sets a value indicating whether the value of this property has been modified since
            it was loaded from the database.
            </summary>
            <value>
            	<c>true</c> if this instance is modified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.EntityEntry">
            <summary>
            The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> to which this property belongs.
            </summary>
            <value>An entry for the entity that owns this property.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.ParentProperty">
            <summary>
            The <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/> of the property for which this is a nested property.
            This method will only return a non-null entry for properties of complex objects; it will
            return null for properties of the entity itself.
            </summary>
            <value>An entry for the parent complex property, or null if this is an entity property.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.InternalMemberEntry">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Internal.InternalPropertyEntry"/> backing this object.
            </summary>
            <value>The internal member entry.</value>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Create(System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2"/> from information in the given <see cref="T:System.Data.Entity.Internal.InternalPropertyEntry"/>.
            Use this method in preference to the constructor since it may potentially create a subclass depending on
            the type of member represented by the InternalCollectionEntry instance.
            </summary>
            <param name="internalPropertyEntry">The internal property entry.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.#ctor(System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/> class.
            </summary>
            <param name="internalPropertyEntry">The internal entry.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Property(System.String)">
            <summary>
            Gets an object that represents a nested property of this property.
            This method can be used for both scalar or complex properties.
            </summary>
            <param name="propertyName">The name of the nested property.</param>
            <returns>An object representing the nested property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.ComplexProperty(System.String)">
            <summary>
            Gets an object that represents a nested complex property of this property.
            </summary>
            <param name="property">The name of the nested property.</param>
            <returns>An object representing the nested property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Cast``2">
            <summary>
            Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2"/> object.
            </summary>
            <typeparam name="TEntity">The type of entity on which the member is declared.</typeparam>
            <typeparam name="TComplexProperty">The type of the complex property.</typeparam>
            <returns>The equivalent generic object.</returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2">
            <summary>
            Instances of this class are returned from the ComplexProperty method of
            <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> and allow access to the state of a complex property.
            </summary>
            <typeparam name="TEntity">The type of the entity to which this property belongs.</typeparam>
            <typeparam name="TComplexProperty">The type of the property.</typeparam>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2">
            <summary>
            Instances of this class are returned from the Property method of
            <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> and allow access to the state of the scalar
            or complex property.
            </summary>
            <typeparam name="TEntity">The type of the entity to which this property belongs.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry`2">
            <summary>
            This is an abstract base class use to represent a scalar or complex property, or a navigation property
            of an entity.  Scalar and complex properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2"/>,
            reference navigation properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2"/>, and collection
            navigation properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity to which this property belongs.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.Create(System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2"/> from information in the given <see cref="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.InternalMemberEntry"/>.
            This method will create an instance of the appropriate subclass depending on the metadata contained
            in the InternalMemberEntry instance.
            </summary>
            <param name="internalMemberEntry">The internal member entry.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbMemberEntry{`0,`1})~System.Data.Entity.Infrastructure.DbMemberEntry">
            <summary>
            Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry"/> class for 
            the property represented by this object.
            </summary>
            <returns>A non-generic version.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetValidationErrors">
            <summary>
            Validates this property.
            </summary>
            <returns>
            Collection of <see cref="T:System.Data.Entity.Validation.DbValidationError"/> objects. Never null. If the entity is valid the collection will be empty.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.CurrentValue">
            <summary>
            Gets or sets the current value of this property.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.InternalMemberEntry">
            <summary>
            Gets the underlying <see cref="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.InternalMemberEntry"/>.
            </summary>
            <value>The internal member entry.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.EntityEntry">
            <summary>
            The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> to which this member belongs.
            </summary>
            <value>An entry for the entity that owns this member.</value>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.Create(System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2"/> from information in the given <see cref="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.InternalPropertyEntry"/>.
            Use this method in preference to the constructor since it may potentially create a subclass depending on
            the type of member represented by the InternalCollectionEntry instance.
            </summary>
            <param name="internalPropertyEntry">The internal property entry.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.#ctor(System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2"/> class.
            </summary>
            <param name="internalPropertyEntry">The internal entry.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbPropertyEntry">
            <summary>
            Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/> class for 
            the property represented by this object.
            </summary>
            <returns>A non-generic version.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.Name">
            <summary>
            Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.OriginalValue">
            <summary>
            Gets or sets the original value of this property.
            </summary>
            <value>The original value.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.CurrentValue">
            <summary>
            Gets or sets the current value of this property.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.IsModified">
            <summary>
            Gets or sets a value indicating whether the value of this property has been modified since
            it was loaded from the database.
            </summary>
            <value>
            	<c>true</c> if this instance is modified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.EntityEntry">
            <summary>
            The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> to which this property belongs.
            </summary>
            <value>An entry for the entity that owns this property.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.ParentProperty">
            <summary>
            The <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/> of the property for which this is a nested property.
            This method will only return a non-null entry for properties of complex objects; it will
            return null for properties of the entity itself.
            </summary>
            <value>An entry for the parent complex property, or null if this is an entity property.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.InternalMemberEntry">
            <summary>
            Gets the underlying <see cref="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.InternalPropertyEntry"/> as an <see cref="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.InternalMemberEntry"/>.
            </summary>
            <value>The internal member entry.</value>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Create(System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry"/> from information in the given <see cref="T:System.Data.Entity.Internal.InternalPropertyEntry"/>.
            Use this method in preference to the constructor since it may potentially create a subclass depending on
            the type of member represented by the InternalCollectionEntry instance.
            </summary>
            <param name="internalPropertyEntry">The internal property entry.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.#ctor(System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2"/> class.
            </summary>
            <param name="internalPropertyEntry">The internal entry.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbComplexPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
            <summary>
            Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry"/> class for 
            the property represented by this object.
            </summary>
            <returns>A non-generic version.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property(System.String)">
            <summary>
            Gets an object that represents a nested property of this property.
            This method can be used for both scalar or complex properties.
            </summary>
            <param name="propertyName">The name of the nested property.</param>
            <returns>An object representing the nested property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.String)">
            <summary>
            Gets an object that represents a nested property of this property.
            This method can be used for both scalar or complex properties.
            </summary>
            <typeparam name="TNestedProperty">The type of the nested property.</typeparam>
            <param name="propertyName">The name of the nested property.</param>
            <returns>An object representing the nested property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Gets an object that represents a nested property of this property.
            This method can be used for both scalar or complex properties.
            </summary>
            <typeparam name="TNestedProperty">The type of the nested property.</typeparam>
            <param name="navigationProperty">An expression representing the nested property.</param>
            <returns>An object representing the nested property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty(System.String)">
            <summary>
            Gets an object that represents a nested complex property of this property.
            </summary>
            <param name="propertyName">The name of the nested property.</param>
            <returns>An object representing the nested property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.String)">
            <summary>
            Gets an object that represents a nested complex property of this property.
            </summary>
            <typeparam name="TNestedComplexProperty">The type of the nested property.</typeparam>
            <param name="propertyName">The name of the nested property.</param>
            <returns>An object representing the nested property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Gets an object that represents a nested complex property of this property.
            </summary>
            <typeparam name="TNestedComplexProperty">The type of the nested property.</typeparam>
            <param name="navigationProperty">An expression representing the nested property.</param>
            <returns>An object representing the nested property.</returns>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalNestedPropertyEntry">
            <summary>
            A concrete implementation of <see cref="T:System.Data.Entity.Internal.InternalPropertyEntry"/> used for properties of complex objects.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalPropertyEntry">
            <summary>
            The internal class used to implement <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/> and 
            <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2"/>.
            This internal class contains all the common implementation between the generic and non-generic
            entry classes and also allows for a clean internal factoring without compromising the public API.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalMemberEntry">
            <summary>
            Base class for all internal entries that represent different kinds of properties.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalMemberEntry.#ctor(System.Data.Entity.Internal.InternalEntityEntry,System.Data.Entity.Internal.MemberEntryMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalMemberEntry"/> class.
            </summary>
            <param name="internalEntityEntry">The internal entity entry.</param>
            <param name="memberMetadata">The member metadata.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalMemberEntry.GetValidationErrors">
            <summary>
            Validates this property.
            </summary>
            <returns>A sequence of validation errors for this property. Empty if no errors. Never null.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalMemberEntry.CreateDbMemberEntry">
            <summary>
            Creates a new non-generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry"/> backed by this internal entry.
            The actual subtype of the DbMemberEntry created depends on the metadata of this internal entry.
            </summary>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalMemberEntry.CreateDbMemberEntry``2">
            <summary>
            Creates a new generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2"/> backed by this internal entry.
            The actual subtype of the DbMemberEntry created depends on the metadata of this internal entry.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <returns>The new entry.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalMemberEntry.Name">
            <summary>
            Gets the property name.
            The property is virtual to allow mocking.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalMemberEntry.CurrentValue">
            <summary>
            Gets or sets the current value of the navigation property.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalMemberEntry.InternalEntityEntry">
            <summary>
            Gets the internal entity entry property belongs to.
            This property is virtual to allow mocking.
            </summary>
            <value>The internal entity entry.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalMemberEntry.EntryMetadata">
            <summary>
            Gets the entry metadata.
            </summary>
            <value>The entry metadata.</value>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.#ctor(System.Data.Entity.Internal.InternalEntityEntry,System.Data.Entity.Internal.PropertyEntryMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalPropertyEntry"/> class.
            </summary>
            <param name="internalEntityEntry">The internal entry.</param>
            <param name="propertyMetadata">The property info.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.CreateGetter">
            <summary>
            Creates a delegate that will get the value of this property.
            </summary>
            <returns>The delegate.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.CreateSetter">
            <summary>
            Creates a delegate that will set the value of this property.
            </summary>
            <returns>The delegate.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.EntityPropertyIsModified">
            <summary>
            Returns true if the property of the entity that this property is ultimately part
            of is set as modified.  If this is a property of an entity, then this method returns
            true if the property is modified.  If this is a property of a complex object, then
            this method returns true if the top-level complex property on the entity is modified.
            </summary>
            <returns>True if the entity property is modified.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.SetEntityPropertyModified">
            <summary>
            Sets the property of the entity that this property is ultimately part of to modified.
            If this is a property of an entity, then this method marks it as modified.
            If this is a property of a complex object, then this method marks the top-level
            complex property as modified.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.CheckNotSettingComplexPropertyToNull(System.Object)">
            <summary>
            Throws if the user attempts to set a complex property to null.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.SetCurrentValueOnClrObject(System.Object)">
            <summary>
            Sets the given value directly onto the underlying entity object.
            </summary>
            <param name="value">The value.</param>
            <returns>True if the property had a setter that we could attempt to call; false if no setter was available.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.SetPropertyValueUsingValues(System.Data.Entity.Internal.InternalPropertyValues,System.Object)">
            <summary>
            Sets the property value, potentially by setting individual nested values for a complex
            property.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.Property(System.String,System.Type,System.Boolean)">
            <summary>
            Gets an internal object representing a scalar or complex property of this property,
            which must be a mapped complex property.
            This method is virtual to allow mocking.
            </summary>
            <param name="property">The property.</param>
            <param name="requestedType">The type of object requested, which may be null or 'object' if any type can be accepted.</param>
            <param name="requireComplex">if set to <c>true</c> then the found property must be a complex property.</param>
            <returns>The entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.ValidateNotDetachedAndInModel(System.String)">
            <summary>
            Validates that the owning entity entry is associated with an underlying <see cref="T:System.Data.Objects.ObjectStateEntry"/> and
            is not just wrapping a non-attached entity.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.CreateDbMemberEntry">
            <summary>
            Creates a new non-generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry"/> backed by this internal entry.
            The runtime type of the DbMemberEntry created will be <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/> or a subtype of it.
            </summary>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyEntry.CreateDbMemberEntry``2">
            <summary>
            Creates a new generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2"/> backed by this internal entry.
            The runtime type of the DbMemberEntry created will be <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2"/> or a subtype of it.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <returns>The new entry.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyEntry.ParentPropertyEntry">
            <summary>
            Returns parent property, or null if this is a property on the top-level entity.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyEntry.ParentCurrentValues">
            <summary>
            Gets the current values of the parent entity or complex property.
            That is, the current values that contains the value for this property.
            </summary>
            <value>The parent current values.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyEntry.ParentOriginalValues">
            <summary>
            Gets the original values of the parent entity or complex property.
            That is, the original values that contains the value for this property.
            </summary>
            <value>The parent original values.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyEntry.Getter">
            <summary>
            A delegate that reads the value of this property.
            May be null if there is no way to set the value due to missing accessors on the type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyEntry.Setter">
            <summary>
            A delegate that sets the value of this property.
            May be null if there is no way to set the value due to missing accessors on the type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyEntry.OriginalValue">
            <summary>
            Gets or sets the original value.
            Note that complex properties are returned as objects, not property values.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyEntry.CurrentValue">
            <summary>
            Gets or sets the current value.
            Note that complex properties are returned as objects, not property values.
            Also, for complex properties, the object returned is the actual complex object from the entity
            and setting the complex object causes the actual object passed to be set onto the entity.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyEntry.IsModified">
            <summary>
            Gets or sets a value indicating whether this property is modified.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyEntry.EntryMetadata">
            <summary>
            Gets the property metadata.
            </summary>
            <value>The property metadata.</value>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNestedPropertyEntry.#ctor(System.Data.Entity.Internal.InternalPropertyEntry,System.Data.Entity.Internal.PropertyEntryMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalNestedPropertyEntry"/> class.
            </summary>
            <param name="parentPropertyEntry">The parent property entry.</param>
            <param name="propertyMetadata">The property metadata.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNestedPropertyEntry.CreateGetter">
            <summary>
            Creates a delegate that will get the value of this property.
            </summary>
            <returns>The delegate.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNestedPropertyEntry.CreateSetter">
            <summary>
            Creates a delegate that will set the value of this property.
            </summary>
            <returns>The delegate.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNestedPropertyEntry.EntityPropertyIsModified">
            <summary>
            Returns true if the property of the entity that this property is ultimately part
            of is set as modified.  Since this is a property of a complex object
            this method returns true if the top-level complex property on the entity is modified.
            </summary>
            <returns>True if the entity property is modified.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNestedPropertyEntry.SetEntityPropertyModified">
            <summary>
            Sets the property of the entity that this property is ultimately part of to modified.
            Since this is a property of a complex object this method marks the top-level
            complex property as modified.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalNestedPropertyEntry.ParentPropertyEntry">
            <summary>
            Returns parent property, or null if this is a property on the top-level entity.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalNestedPropertyEntry.ParentCurrentValues">
            <summary>
            Gets the current values of the parent complex property.
            That is, the current values that contains the value for this property.
            </summary>
            <value>The parent current values.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalNestedPropertyEntry.ParentOriginalValues">
            <summary>
            Gets the original values of the parent complex property.
            That is, the original values that contains the value for this property.
            </summary>
            <value>The parent original values.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.MemberEntryMetadata">
            <summary>
            Contains metadata about a member of an entity type or complex type.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.MemberEntryMetadata.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.MemberEntryMetadata"/> class.
            </summary>
            <param name="declaringType">The type that the property is declared on.</param>
            <param name="elementType">Type of the property.</param>
            <param name="memberName">The property name.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.MemberEntryMetadata.CreateMemberEntry(System.Data.Entity.Internal.InternalEntityEntry,System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Internal.InternalMemberEntry"/> the runtime type of which will be
            determined by the metadata.
            </summary>
            <param name="internalEntityEntry">The entity entry to which the member belongs.</param>
            <param name="parentPropertyEntry">The parent property entry if the new entry is nested, otherwise null.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.MemberEntryMetadata.MemberEntryType">
            <summary>
            Gets the type of the member for which this is metadata.
            </summary>
            <value>The type of the member entry.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.MemberEntryMetadata.MemberName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.MemberEntryMetadata.DeclaringType">
            <summary>
            Gets the type of the entity or complex object that on which the member is declared.
            </summary>
            <value>The type that the member is declared on.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.MemberEntryMetadata.ElementType">
            <summary>
            Gets the type of element for the property, which for non-collection properties
            is the same as the MemberType and which for collection properties is the type
            of element contained in the collection.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.MemberEntryMetadata.MemberType">
            <summary>
            Gets the type of the member, which for collection properties is the type
            of the collection rather than the type in the collection.
            </summary>
            <value>The type of the member.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.MemberEntryType">
            <summary>
            The types of member entries supported.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.NavigationEntryMetadata.#ctor(System.Type,System.Type,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.NavigationEntryMetadata"/> class.
            </summary>
            <param name="declaringType">The type that the property is declared on.</param>
            <param name="propertyType">Type of the property.</param>
            <param name="propertyName">The property name.</param>
            <param name="isCollection">if set to <c>true</c> this is a collection nav prop.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.NavigationEntryMetadata.CreateMemberEntry(System.Data.Entity.Internal.InternalEntityEntry,System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Internal.InternalMemberEntry"/> the runtime type of which will be
            determined by the metadata.
            </summary>
            <param name="internalEntityEntry">The entity entry to which the member belongs.</param>
            <param name="parentPropertyEntry">The parent property entry which will always be null for navigation entries.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.NavigationEntryMetadata.MemberEntryType">
            <summary>
            Gets the type of the member for which this is metadata.
            </summary>
            <value>The type of the member entry.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.NavigationEntryMetadata.MemberType">
            <summary>
            Gets the type of the member, which for collection properties is the type
            of the collection rather than the type in the collection.
            </summary>
            <value>The type of the member.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalSqlQuery`1">
            <summary>
            Generic wrapper around <see cref="T:System.Data.Entity.Internal.InternalSqlQuery"/> to allow results to be
            returned as generic <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlQuery`1.GetEnumerator">
            <summary>
            Executes the query and returns an enumerator for the elements.
            </summary>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the elements.
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Executes the query and returns an enumerator for the elements.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the elements.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlQuery`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that contains the SQL string that was set
            when the query was created.  The parameters are not included.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlQuery`1.System#ComponentModel#IListSource#GetList">
            <summary>
            Throws an exception indicating that binding directly to a store query is not supported.
            </summary>
            <returns>
            Never returns; always throws.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalSqlQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
            Returns <c>false</c>.
            </summary>
            <returns><c>false</c>.</returns>
        </member>
        <member name="T:System.Data.Entity.Internal.CodeFirstCachedMetadataWorkspace">
            <summary>
              Implements ICachedMetadataWorkspace for a code first model.  The workspace is created the first
              time it is requested.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.ICachedMetadataWorkspace">
            <summary>
              Represents an object that holds a cached copy of a MetadataWorkspace and optionally the
              assemblies containing entity types to use with that workspace.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.ICachedMetadataWorkspace.GetMetadataWorkspace(System.Data.Common.DbConnection)">
            <summary>
              Gets the MetadataWorkspace, potentially lazily creating it if it does not already exist.
              If the workspace is not compatible with the provider manifest obtained from the given
              connection then an exception is thrown.
            </summary>
            <param name = "storeConnection">The connection to use to create or check SSDL provider info.</param>
            <returns>The workspace.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.ICachedMetadataWorkspace.Assemblies">
            <summary>
              The list of assemblies that contain entity types for this workspace, which may be empty, but
              will never be null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.ICachedMetadataWorkspace.ModelHash">
            <summary>
              An SHA256 hash of the store model (SSDL) that can be used later to check if the model has changed or not.
              Note that this is currently only supported for Code First.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.ICachedMetadataWorkspace.DefaultContainerName">
            <summary>
              The default container name for code first is the container name that is set from the ModelBuilder
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.ICachedMetadataWorkspace.EntityValidators">
            <summary>
            Validators used to validate entities. 
            Note that validation is currently supported only for Code First.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Internal.CodeFirstCachedMetadataWorkspace._entityValidators">
            <summary>
            Validators for entities.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.CodeFirstCachedMetadataWorkspace.#ctor(System.Data.Edm.Db.Mapping.DbDatabaseMapping)">
            <summary>
              Constructs a cache that will build a workspace based on the given code first configuration.
            </summary>
            <param name = "databaseMapping">The code first EDM model.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.CodeFirstCachedMetadataWorkspace.GetMetadataWorkspace(System.Data.Common.DbConnection)">
            <summary>
              Gets the MetadataWorkspace, potentially lazily creating it if it does not already exist.
              If the workspace is not compatible with the provider manifest obtained from the given
              connection then an exception is thrown.
            </summary>
            <param name = "storeConnection">The connection to use to create or check SSDL provider info.</param>
            <returns>The workspace.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.CodeFirstCachedMetadataWorkspace.DefaultContainerName">
            <summary>
              The default container name for code first is the container name that is set from the ModelBuilder
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.CodeFirstCachedMetadataWorkspace.Assemblies">
            <summary>
              The list of assemblies that contain entity types for this workspace, which may be empty, but
              will never be null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.CodeFirstCachedMetadataWorkspace.ModelHash">
            <summary>
              An SHA256 hash of the store model (SSDL) that can be used later to check if the model has changed or not.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.CodeFirstCachedMetadataWorkspace.EntityValidators">
            <summary>
            Validators used to validate entities.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbChangeTracker">
            <summary>
            Returned by the ChangeTracker method of <see cref="T:System.Data.Entity.DbContext"/> to provide access to features of
            the context that are related to change tracking of entities.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.#ctor(System.Data.Entity.Internal.InternalContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker"/> class.
            </summary>
            <param name="internalContext">The internal context.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries">
            <summary>
            Gets <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> objects for all the entities tracked by this context.
            </summary>
            <returns>The entries.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries``1">
            <summary>
            Gets <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> objects for all the entities of the given type
            tracked by this context.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns>The entries.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges">
            <summary>
            Detects changes made to the properties and relationships of POCO entities.  Note that some types of
            entity (such as change tracking proxies and entities that derive from <see cref="T:System.Data.Objects.DataClasses.EntityObject"/>)
            report changes automatically and a call to DetectChanges is not normally needed for these types of entities.
            Also note that normally DetectChanges is called automatically by many of the methods of <see cref="T:System.Data.Entity.DbContext"/>
            and its related classes such that it is rare that this method will need to be called explicitly.
            However, it may be desirable, usually for performance reasons, to turn off this automatic calling of
            DetectChanges using the AutoDetectChangesEnabled flag from <see cref="P:System.Data.Entity.DbContext.Configuration"/>.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry">
            <summary>
            A non-generic version of the <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Create(System.Data.Entity.Internal.InternalCollectionEntry)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry"/> from information in the given <see cref="T:System.Data.Entity.Internal.InternalCollectionEntry"/>.
            Use this method in preference to the constructor since it may potentially create a subclass depending on
            the type of member represented by the InternalCollectionEntry instance.
            </summary>
            <param name="internalCollectionEntry">The internal collection entry.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.#ctor(System.Data.Entity.Internal.InternalCollectionEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry"/> class.
            </summary>
            <param name="internalCollectionEntry">The internal entry.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Load">
            <summary>
            Loads the collection of entities from the database.
            Note that entities that already exist in the context are not overwritten with values from the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Query">
            <summary>
            Returns the query that would be used to load this collection from the database.
            The returned query can be modified using LINQ to perform filtering or operations in the database, such
            as counting the number of entities in the collection in the database without actually loading them.
            </summary>
            <returns>A query for the collection.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Cast``2">
            <summary>
            Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/> object.
            </summary>
            <typeparam name="TEntity">The type of entity on which the member is declared.</typeparam>
            <typeparam name="TElement">The type of the collection element.</typeparam>
            <returns>The equivalent generic object.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.Name">
            <summary>
            Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.CurrentValue">
            <summary>
            Gets or sets the current value of the navigation property.  The current value is
            the entity that the navigation property references.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.IsLoaded">
            <summary>
            Gets a value indicating whether the collection of entities has been loaded from the database.
            </summary>
            <value><c>true</c> if the collection is loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.EntityEntry">
            <summary>
            The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> to which this navigation property belongs.
            </summary>
            <value>An entry for the entity that owns this navigation property.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.InternalMemberEntry">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Internal.InternalCollectionEntry"/> backing this object as an <see cref="P:System.Data.Entity.Infrastructure.DbCollectionEntry.InternalMemberEntry"/>.
            </summary>
            <value>The internal member entry.</value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2">
            <summary>
            Instances of this class are returned from the Collection method of
            <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> and allow operations such as loading to
            be performed on the an entity's collection navigation properties.
            </summary>
            <typeparam name="TEntity">The type of the entity to which this property belongs.</typeparam>
            <typeparam name="TElement">The type of the element in the collection of entities.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Create(System.Data.Entity.Internal.InternalCollectionEntry)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/> from information in the given <see cref="T:System.Data.Entity.Internal.InternalCollectionEntry"/>.
            Use this method in preference to the constructor since it may potentially create a subclass depending on
            the type of member represented by the InternalCollectionEntry instance.
            </summary>
            <param name="internalCollectionEntry">The internal collection entry.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.#ctor(System.Data.Entity.Internal.InternalCollectionEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/> class.
            </summary>
            <param name="internalCollectionEntry">The internal entry.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Load">
            <summary>
            Loads the collection of entities from the database.
            Note that entities that already exist in the context are not overwritten with values from the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Query">
            <summary>
            Returns the query that would be used to load this collection from the database.
            The returned query can be modified using LINQ to perform filtering or operations in the database, such
            as counting the number of entities in the collection in the database without actually loading them.
            </summary>
            <returns>A query for the collection.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbCollectionEntry{`0,`1})~System.Data.Entity.Infrastructure.DbCollectionEntry">
            <summary>
            Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry"/> class for 
            the navigation property represented by this object.
            </summary>
            <returns>A non-generic version.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Name">
            <summary>
            Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.CurrentValue">
            <summary>
            Gets or sets the current value of the navigation property.  The current value is
            the entity that the navigation property references.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.IsLoaded">
            <summary>
            Gets a value indicating whether the collection of entities has been loaded from the database.
            </summary>
            <value><c>true</c> if the collection is loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.InternalMemberEntry">
            <summary>
            Gets the underlying <see cref="T:System.Data.Entity.Internal.InternalCollectionEntry"/> as an <see cref="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.InternalMemberEntry"/>.
            </summary>
            <value>The internal member entry.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.EntityEntry">
            <summary>
            The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> to which this navigation property belongs.
            </summary>
            <value>An entry for the entity that owns this navigation property.</value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
            <summary>
            Exception thrown by <see cref="T:System.Data.Entity.DbContext"/> when it was expected that SaveChanges for an entity would
            result in a database update but in fact no rows in the database were affected.  This usually indicates
            that the database has been concurrently updated such that a concurrency token that was expected to match
            did not actually match.
            Note that state entries referenced by this exception are not serialized due to security and accesses to
            the state entries after serialization will return null.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:System.Data.Entity.Infrastructure.DbUpdateException" -->
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.Data.Entity.Internal.InternalContext,System.Data.UpdateException,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> class.
            </summary>
            <param name="internalContext">The internal context.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.GetEntry(System.Data.Entity.DbContext)">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> object that represents the entity that could not
            be saved to the database.
            </summary>
            <param name="context">The context on which SaveChanges was called.</param>
            <returns>The entry representing the entity that could not be saved.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.SubscribeToSerializeObjectState">
            <summary>
            Subscribes the SerializeObjectState event.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbUpdateException.DbUpdateExceptionState">
            <summary>
            Holds exception state that will be serialized when the exception is serialized.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.DbUpdateExceptionState.CompleteDeserialization(System.Object)">
            <summary>
            Completes the deserialization.
            </summary>
            <param name="deserialized">The deserialized object.</param>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbUpdateException.DbUpdateExceptionState.InvolvesIndependentAssociations">
            <summary>
            Gets or sets a value indicating whether the exception involved independent associations.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.Data.Entity.Internal.InternalContext,System.Data.OptimisticConcurrencyException)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbContextConfiguration">
            <summary>
            Returned by the Configuration method of <see cref="T:System.Data.Entity.DbContext"/> to provide access to configuration
            options for the context.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.#ctor(System.Data.Entity.Internal.InternalContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbContextConfiguration"/> class.
            </summary>
            <param name="internalContext">The internal context.</param>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.LazyLoadingEnabled">
            <summary>
            Gets or sets a value indicating whether lazy loading of relationships exposed as\
            navigation properties is enabled.  Lazy loading is enabled by default.
            </summary>
            <value><c>true</c> if lazy loading is enabled; otherwise, <c>false</c>.</value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled" -->
        <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ValidateOnSaveEnabled">
            <summary>
            Gets or sets a value indicating whether tracked entities should be validated automatically when
            <see cref="M:System.Data.Entity.DbContext.SaveChanges"/> is invoked.
            The default value is true.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry">
            <summary>
            A non-generic version of the <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.#ctor(System.Data.Entity.Internal.InternalEntityEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> class.
            </summary>
            <param name="internalEntityEntry">The internal entry.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValues">
            <summary>
            Queries the database for copies of the values of the tracked entity as they currently exist in the database.
            Note that changing the values in the returned dictionary will not update the values in the database.
            If the entity is not found in the database then null is returned.
            </summary>
            <returns>The store values.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reload">
            <summary>
            Reloads the entity from the database overwriting any property values with values from the database.
            The entity will be in the Unchanged state after calling this method.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reference(System.String)">
            <summary>
            Gets an object that represents the reference (i.e. non-collection) navigation property from this
            entity to another entity.
            </summary>
            <param name="navigationProperty">The name of the navigation property.</param>
            <returns>An object representing the navigation property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Collection(System.String)">
            <summary>
            Gets an object that represents the collection navigation property from this
            entity to a collection of related entities.
            </summary>
            <param name="navigationProperty">The name of the navigation property.</param>
            <returns>An object representing the navigation property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Property(System.String)">
            <summary>
            Gets an object that represents a scalar or complex property of this entity.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>An object representing the property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ComplexProperty(System.String)">
            <summary>
            Gets an object that represents a complex property of this entity.
            </summary>
            <param name="propertyName">The name of the complex property.</param>
            <returns>An object representing the complex property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Member(System.String)">
            <summary>
            Gets an object that represents a member of the entity.  The runtime type of the returned object will
            vary depending on what kind of member is asked for.  The currently supported member types and their return
            types are:
            Reference navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry"/>.
            Collection navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry"/>.
            Primitive/scalar property: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/>.
            Complex property: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry"/>.
            </summary>
            <param name="propertyName">The name of the member.</param>
            <returns>An object representing the member.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Cast``1">
            <summary>
            Returns a new instance of the generic <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> class for the given
            generic type for the tracked entity represented by this object.
            Note that the type of the tracked entity must be compatible with the generic type or
            an exception will be thrown.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns>A generic version.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetValidationResult">
            <summary>
            Validates this <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> instance and returns validation result.
            </summary>
            <returns>
            Entity validation result. Possibly null if 
            <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})"/> method is overriden.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            Two <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> instances are considered equal if they are both entries for
            the same entity on the same <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Data.Entity.Infrastructure.DbEntityEntry)">
            <summary>
            Determines whether the specified <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> is equal to this instance.
            Two <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> instances are considered equal if they are both entries for
            the same entity on the same <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="other">The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.Entity">
            <summary>
            Gets the entity.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.State">
            <summary>
            Gets or sets the state of the entity.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.CurrentValues">
            <summary>
            Gets the current property values for the tracked entity represented by this object.
            </summary>
            <value>The current values.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.OriginalValues">
            <summary>
            Gets the original property values for the tracked entity represented by this object.
            The original values are usually the entity's property values as they were when last queried from
            the database.
            </summary>
            <value>The original values.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.InternalEntry">
            <summary>
            Gets InternalEntityEntry object for this DbEntityEntry instance.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry`1">
            <summary>
            Instances of this class provide access to information about and control of entities that
            are being tracked by the <see cref="T:System.Data.Entity.DbContext"/>.  Use the Entity or Entities methods of
            the context to obtain objects of this type.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.#ctor(System.Data.Entity.Internal.InternalEntityEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> class.
            </summary>
            <param name="internalEntityEntry">The internal entry.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValues">
            <summary>
            Queries the database for copies of the values of the tracked entity as they currently exist in the database.
            Note that changing the values in the returned dictionary will not update the values in the database.
            If the entity is not found in the database then null is returned.
            </summary>
            <returns>The store values.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reload">
            <summary>
            Reloads the entity from the database overwriting any property values with values from the database.
            The entity will be in the Unchanged state after calling this method.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference(System.String)">
            <summary>
            Gets an object that represents the reference (i.e. non-collection) navigation property from this
            entity to another entity.
            </summary>
            <param name="navigationProperty">The name of the navigation property.</param>
            <returns>An object representing the navigation property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.String)">
            <summary>
            Gets an object that represents the reference (i.e. non-collection) navigation property from this
            entity to another entity.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="navigationProperty">The name of the navigation property.</param>
            <returns>An object representing the navigation property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets an object that represents the reference (i.e. non-collection) navigation property from this
            entity to another entity.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="navigationProperty">An expression representing the navigation property.</param>
            <returns>An object representing the navigation property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)">
            <summary>
            Gets an object that represents the collection navigation property from this
            entity to a collection of related entities.
            </summary>
            <param name="navigationProperty">The name of the navigation property.</param>
            <returns>An object representing the navigation property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.String)">
            <summary>
            Gets an object that represents the collection navigation property from this
            entity to a collection of related entities.
            </summary>
            <typeparam name="TElement">The type of elements in the collection.</typeparam>
            <param name="navigationProperty">The name of the navigation property.</param>
            <returns>An object representing the navigation property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
            <summary>
            Gets an object that represents the collection navigation property from this
            entity to a collection of related entities.
            </summary>
            <typeparam name="TElement">The type of elements in the collection.</typeparam>
            <param name="navigationProperty">An expression representing the navigation property.</param>
            <returns>An object representing the navigation property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property(System.String)">
            <summary>
            Gets an object that represents a scalar or complex property of this entity.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>An object representing the property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.String)">
            <summary>
            Gets an object that represents a scalar or complex property of this entity.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <returns>An object representing the property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets an object that represents a scalar or complex property of this entity.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="navigationProperty">An expression representing the property.</param>
            <returns>An object representing the property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty(System.String)">
            <summary>
            Gets an object that represents a complex property of this entity.
            </summary>
            <param name="propertyName">The name of the complex property.</param>
            <returns>An object representing the complex property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.String)">
            <summary>
            Gets an object that represents a complex property of this entity.
            </summary>
            <typeparam name="TComplexProperty">The type of the complex property.</typeparam>
            <param name="propertyName">The name of the complex property.</param>
            <returns>An object representing the complex property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets an object that represents a complex property of this entity.
            </summary>
            <typeparam name="TComplexProperty">The type of the complex property.</typeparam>
            <param name="navigationProperty">An expression representing the complex property.</param>
            <returns>An object representing the complex property.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member(System.String)">
            <summary>
            Gets an object that represents a member of the entity.  The runtime type of the returned object will
            vary depending on what kind of member is asked for.  The currently supported member types and their return
            types are:
            Reference navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry"/>.
            Collection navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry"/>.
            Primitive/scalar property: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry"/>.
            Complex property: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry"/>.
            </summary>
            <param name="propertyName">The name of the member.</param>
            <returns>An object representing the member.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member``1(System.String)">
            <summary>
            Gets an object that represents a member of the entity.  The runtime type of the returned object will
            vary depending on what kind of member is asked for.  The currently supported member types and their return
            types are:
            Reference navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2"/>.
            Collection navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/>.
            Primitive/scalar property: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2"/>.
            Complex property: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2"/>.
            </summary>
            <typeparam name="TMember">The type of the member.</typeparam>
            <param name="propertyName">The name of the member.</param>
            <returns>An object representing the member.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets an object that represents a member of the entity.  The runtime type of the returned object will
            vary depending on what kind of member is asked for.  The currently supported member types and their return
            types are:
            Reference navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2"/>.
            Collection navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/>.
            Primitive/scalar property: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2"/>.
            Complex property: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2"/>.
            </summary>
            <param name="property">An expression representing the member.</param>
            <param name="propertyName">The name of the member.</param>
            <returns>An object representing the member.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.op_Implicit(System.Data.Entity.Infrastructure.DbEntityEntry{`0})~System.Data.Entity.Infrastructure.DbEntityEntry">
            <summary>
            Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> class for 
            the tracked entity represented by this object.
            </summary>
            <returns>A non-generic version.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetValidationResult">
            <summary>
            Validates this <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> instance and returns validation result.
            </summary>
            <returns>
            Entity validation result. Possibly null 
            if <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})"/> method is overriden.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            Two <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> instances are considered equal if they are both entries for
            the same entity on the same <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Data.Entity.Infrastructure.DbEntityEntry{`0})">
            <summary>
            Determines whether the specified <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> is equal to this instance.
            Two <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> instances are considered equal if they are both entries for
            the same entity on the same <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="other">The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.Entity">
            <summary>
            Gets the entity.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.State">
            <summary>
            Gets or sets the state of the entity.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.CurrentValues">
            <summary>
            Gets the current property values for the tracked entity represented by this object.
            </summary>
            <value>The current values.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.OriginalValues">
            <summary>
            Gets the original property values for the tracked entity represented by this object.
            The original values are usually the entity's property values as they were when last queried from
            the database.
            </summary>
            <value>The original values.</value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbModel">
            <summary>
            An immutable representation of a model that can be used to create an ObjectContext directly or can
            be passed to the constructor of DbContext to create a DbContext.  Instances of this type should
            be cached in preference to caching a ModelBuilder because a DbModel generally uses less memory and
            is able to generate an ObejctContext or DbContext much more quickly.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbModel.#ctor(System.Data.Edm.Db.Mapping.DbDatabaseMapping)">
            <summary>
            Creates a model for the given EDM metadata model.
            </summary>
            <param name="databaseMapping">The EDM metadata model.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbModel.#ctor(System.Data.Entity.Internal.ICachedMetadataWorkspace)">
            <summary>
            Creates a model for the given workspace.  The workspace object may already contain a MetadataWorkspace
            or it may contain information to crate on on first use, after which point it will be cached for
            future use.
            </summary>
            <param name="workspace">The workspace cache.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbModel.CreateObjectContext``1(System.Data.Common.DbConnection)">
            <summary>
            Creates an instance of ObjectContext or class derived from ObjectContext.  Note that an instance
            of DbContext can be created instead by using the appropriate DbContext constructor.
            If a derived ObjectContext is used, then it must have a public constructor with a single
            EntityConnection parameter.
            The connection passed is used by the ObjectContext created, but is not owned by the context.  The caller
            must dispose of the connection once the context has been disposed.
            </summary>
            <typeparam name="TContext">The type of context to create.</typeparam>
            <param name="existingConnection">An existing connection to a database for use by the context.</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbModel.GetConstructorDelegate``1">
            <summary>
            Gets a cached delegate (or creates a new one) used to call the constructor for the given derived ObjectContext type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbModel.ModelHash">
            <summary>
              A hash of the store model (SSDL) that can be used later to check if the model has changed or not.
              Note that this is currently only supported for Code First.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbModel.EntityValidators">
            <summary>
            Validators used to validate entities. 
            Note that validation is currently supported only for Code First.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbPropertyValues">
            <summary>
            A collection of all the properties for an underlying entity or complex object.
            </summary>
            <remarks>
            An instance of this class can be converted to an instance of the generic class
            using the Cast method.
            Complex properties in the underlying entity or complex object are represented in
            the property values as nested instances of this class.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.#ctor(System.Data.Entity.Internal.InternalPropertyValues)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues"/> class.
            </summary>
            <param name="internalValues">The internal dictionary.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToObject">
            <summary>
            Creates an object of the underlying type for this dictionary and hydrates it with property
            values from this dictionary.
            </summary>
            <returns>The properties of this dictionary copied into a new object.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Object)">
            <summary>
            Sets the values of this dictionary by reading values out of the given object.
            The given object can be of any type.  Any property on the object with a name that
            matches a property name in the dictionary and can be read will be read.  Other
            properties will be ignored.  This allows, for example, copying of properties from
            simple Data Transfer Objects (DTOs).
            </summary>
            <param name="obj">The object to read values from.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Clone">
            <summary>
            Creates a new dictionary containing copies of all the properties in this dictionary.
            Changes made to the new dictionary will not be reflected in this dictionary and vice versa.
            </summary>
            <returns>A clone of this dictionary.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Data.Entity.Infrastructure.DbPropertyValues)">
            <summary>
            Sets the values of this dictionary by reading values from another dictionary.
            The other dictionary must be based on the same type as this dictionary, or a type derived
            from the type for this dictionary.
            </summary>
            <param name="dictionary">The dictionary to read values from.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetValue``1(System.String)">
            <summary>
            Gets the value of the property just like using the indexed property getter but
            typed to the type of the generic parameter.  This is useful especially with
            nested dictionaries to avoid writing expressions with lots of casts.
            </summary>
            <typeparam name="TValue">The type of the property.</typeparam>
            <param name="propertyName">Name of the property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.PropertyNames">
            <summary>
            Gets the set of names of all properties in this dictionary as a read-only set.
            </summary>
            <value>The property names.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.Item(System.String)">
            <summary>
            Gets or sets the value of the property with the specified property name.
            The value may be a nested instance of this class.
            </summary>
            <param name="propertyName">The property name.</param>
            <value>The value of the property.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.InternalPropertyValues">
            <summary>
            Gets the internal dictionary.
            </summary>
            <value>The internal dictionary.</value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbQuery">
            <summary>
            Represents a non-generic LINQ to Entities query against a DbContext.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery.#ctor(System.Data.Entity.Internal.Linq.IInternalQuery)">
            <summary>
            Creates a new query that will be backed by the given internal IQueryable.
            </summary>
            <param name="internalQuery">The backing query.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#GetList">
            <summary>
            Throws an exception indicating that binding directly to a store query is not supported.
            Instead populate a DbSet with data, for example by using the Load extension method, and
            then bind to local data.  For WPF bind to DbSet.Local.  For Windows Forms bind to
            DbSet.Local.ToBindingList().
            </summary>
            <returns>
            Never returns; always throws.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumeration of this query causing it to be executed against the store.
            </summary>
            <returns>An enumerator for the query</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Infrastructure.DbQuery.Include(System.String)" -->
        <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsNoTracking">
            <summary>
            Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <returns> A new query with NoTracking applied.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbQuery.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of the underlying query.
            </summary>
            <returns>
            The query string.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
            Returns <c>false</c>.
            </summary>
            <returns><c>false</c>.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery.ElementType">
            <summary>
            The IQueryable element type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Expression">
            <summary>
            The IQueryable LINQ Expression.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Provider">
            <summary>
            The IQueryable provider.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry">
            <summary>
            A non-generic version of the <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Create(System.Data.Entity.Internal.InternalReferenceEntry)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry"/> from information in the given <see cref="T:System.Data.Entity.Internal.InternalReferenceEntry"/>.
            Use this method in preference to the constructor since it may potentially create a subclass depending on
            the type of member represented by the InternalCollectionEntry instance.
            </summary>
            <param name="internalReferenceEntry">The internal reference entry.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.#ctor(System.Data.Entity.Internal.InternalReferenceEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry"/> class.
            </summary>
            <param name="internalReferenceEntry">The internal entry.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Load">
            <summary>
            Loads the entity from the database.
            Note that if the entity already exists in the context, then it will not overwritten with values from the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Query">
            <summary>
            Returns the query that would be used to load this entity from the database.
            The returned query can be modified using LINQ to perform filtering or operations in the database.
            </summary>
            <returns>A query for the entity.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Cast``2">
            <summary>
            Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2"/> object.
            </summary>
            <typeparam name="TEntity">The type of entity on which the member is declared.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <returns>The equivalent generic object.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.Name">
            <summary>
            Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.CurrentValue">
            <summary>
            Gets or sets the current value of the navigation property.  The current value is
            the entity that the navigation property references.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.IsLoaded">
            <summary>
            Gets a value indicating whether the entity has been loaded from the database.
            </summary>
            <value><c>true</c> if the entity is loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.EntityEntry">
            <summary>
            The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> to which this navigation property belongs.
            </summary>
            <value>An entry for the entity that owns this navigation property.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.InternalMemberEntry">
            <summary>
            Gets the <see cref="T:System.Data.Entity.Internal.InternalReferenceEntry"/> backing this object as an <see cref="P:System.Data.Entity.Infrastructure.DbReferenceEntry.InternalMemberEntry"/>.
            </summary>
            <value>The internal member entry.</value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2">
            <summary>
            Instances of this class are returned from the Reference method of
            <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> and allow operations such as loading to
            be performed on the an entity's reference navigation properties.
            </summary>
            <typeparam name="TEntity">The type of the entity to which this property belongs.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Create(System.Data.Entity.Internal.InternalReferenceEntry)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2"/> from information in the given <see cref="T:System.Data.Entity.Internal.InternalReferenceEntry"/>.
            Use this method in preference to the constructor since it may potentially create a subclass depending on
            the type of member represented by the InternalCollectionEntry instance.
            </summary>
            <param name="internalReferenceEntry">The internal reference entry.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.#ctor(System.Data.Entity.Internal.InternalReferenceEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2"/> class.
            </summary>
            <param name="internalReferenceEntry">The internal entry.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Load">
            <summary>
            Loads the entity from the database.
            Note that if the entity already exists in the context, then it will not overwritten with values from the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Query">
            <summary>
            Returns the query that would be used to load this entity from the database.
            The returned query can be modified using LINQ to perform filtering or operations in the database.
            </summary>
            <returns>A query for the entity.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbReferenceEntry{`0,`1})~System.Data.Entity.Infrastructure.DbReferenceEntry">
            <summary>
            Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry"/> class for 
            the navigation property represented by this object.
            </summary>
            <returns>A non-generic version.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Name">
            <summary>
            Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.CurrentValue">
            <summary>
            Gets or sets the current value of the navigation property.  The current value is
            the entity that the navigation property references.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.IsLoaded">
            <summary>
            Gets a value indicating whether the entity has been loaded from the database.
            </summary>
            <value><c>true</c> if the entity is loaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.InternalMemberEntry">
            <summary>
            Gets the underlying <see cref="T:System.Data.Entity.Internal.InternalReferenceEntry"/> as an <see cref="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.InternalMemberEntry"/>.
            </summary>
            <value>The internal member entry.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.EntityEntry">
            <summary>
            The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> to which this navigation property belongs.
            </summary>
            <value>An entry for the entity that owns this navigation property.</value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DbSet">
            <summary>
            A non-generic version of <see cref="T:System.Data.Entity.DbSet`1"/> which can be used when the type of entity
            is not known at build time.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSet.#ctor(System.Data.Entity.Internal.Linq.IInternalSet)">
            <summary>
            Creates a new set that will be backed by the given <see cref="T:System.Data.Entity.Internal.Linq.InternalSet`1"/> represented as
            the non-generic interface <see cref="T:System.Data.Entity.Internal.Linq.IInternalSet"/>.
            </summary>
            <param name="internalSet">The internal set.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSet.Find(System.Object[])">
            <summary>
            Finds an entity with the given primary key values.
            If an entity with the given primary key values exists in the context, then it is
            returned immediately without making a request to the store.  Otherwise, a request
            is made to the store for an entity with the given primary key values and this entity,
            if found, is attached to the context and returned.  If no entity is found in the
            context or the store, then null is returned.
            </summary>
            <remarks>
            The ordering of composite key values is as defined in the EDM, which is in turn as defined in
            the designer, by the Code First fluent API, or by the DataMember attribute.
            </remarks>
            <param name="keyValues">The values of the primary key for the entity to be found.</param>
            <returns>The entity found, or null.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if multiple entities exist in the context with the primary key values given.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the type of entity is not part of the data model for this context.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the types of the key values do not match the types of the key values for the entity type to be found.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSet.Attach(System.Object)">
            <summary>
            Attaches the given entity to the context underlying the set.  That is, the entity is placed
            into the context in the Unchanged state, just as if it had been read from the database.
            </summary>
            <param name="entity">The entity to attach.</param>
            <returns>The entity.</returns>
            <remarks>
            Attach is used to repopulate a context with an entity that is known to already exist in the database.
            SaveChanges will therefore not attempt to insert an attached entity into the database because
            it is assumed to already be there.
            Note that entities that are already in the context in some other state will have their state set
            to Unchanged.  Attach is a no-op if the entity is already in the context in the Unchanged state.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSet.Add(System.Object)">
            <summary>
            Adds the given entity to the context underlying the set in the Added state such that it will
            be inserted into the database when SaveChanges is called.
            </summary>
            <param name="entity">The entity to add.</param>
            <returns>The entity.</returns>
            <remarks>
            Note that entities that are already in the context in some other state will have their state set
            to Added.  Add is a no-op if the entity is already in the context in the Added state.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSet.Remove(System.Object)">
            <summary>
            Marks the given entity as Deleted such that it will be deleted from the database when SaveChanges
            is called.  Note that the entity must exist in the context in some other state before this method
            is called.
            </summary>
            <param name="entity">The entity to remove.</param>
            <returns>The entity.</returns>
            <remarks>
            Note that if the entity exists in the context in the Added state, then this method
            will cause it to be detached from the context.  This is because an Added entity is assumed not to
            exist in the database such that trying to delete it does not make sense.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSet.Create">
            <summary>
            Creates a new instance of an entity for the type of this set.
            Note that this instance is NOT added or attached to the set.
            The instance returned will be a proxy if the underlying context is configured to create
            proxies and the entity type meets the requirements for creating a proxy.
            </summary>
            <returns>The entity instance, which may be a proxy.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSet.Create(System.Type)">
            <summary>
            Creates a new instance of an entity for the type of this set or for a type derived
            from the type of this set.
            Note that this instance is NOT added or attached to the set.
            The instance returned will be a proxy if the underlying context is configured to create
            proxies and the entity type meets the requirements for creating a proxy.
            </summary>
            <returns> The entity instance, which may be a proxy. </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSet.Cast``1">
            <summary>
            Returns the equivalent generic <see cref="T:System.Data.Entity.DbSet`1"/> object.
            </summary>
            <typeparam name="TEntity">The type of entity for which the set was created.</typeparam>
            <returns>The generic set object.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DbSet.SqlQuery(System.String,System.Object[])">
            <summary>
            Creates a raw SQL query that will return entities in this set.  By default, the
            entities returned are tracked by the context; this can be changed by calling
            AsNoTracking on the <see cref="T:System.Data.Entity.Database.DbSqlQuery"/> returned.
            Note that the entities returned are always of the type for this set and never of
            a derived type.  If the table or tables queried may contain data for other entity
            types, then the SQL query must be written appropriately to ensure that only entities of
            the correct type are returned.
            </summary>
            <param name="sql">The SQL query string.</param>
            <param name="parameters">The parameters to apply to the SQL query string.</param>
            <returns>A <see cref="T:System.Data.Entity.Database.DbSqlQuery"/> object that will execute the query when it is enumerated.</returns>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbSet.Local">
            <summary>
            Gets an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> that represents a local view of all Added, Unchanged,
            and Modified entities in this set.  This local view will stay in sync as entities are added or
            removed from the context.  Likewise, entities added to or removed from the local view will automatically
            be added to or removed from the context.
            </summary>
            <remarks>
            This property can be used for data binding by populating the set with data, for example by using the Load
            extension method, and then binding to the local data through this property.  For WPF bind to this property
            directly.  For Windows Forms bind to the result of calling ToBindingList on this property
            </remarks>
            <value>The local view.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.DbSet.System#Data#Entity#Internal#Linq#IInternalSetAdapter#InternalSet">
            <summary>
            The internal IQueryable that is backing this DbQuery
            </summary>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.EdmMetadata">
            <summary>
            Represents an entity used to store metadata about an EDM in the database.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.Id">
            <summary>
            Gets or sets the ID of the metadata entity, which is currently always 1.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.ModelHash">
            <summary>
            Gets or sets the model hash which is used to check whether the model has
            changed since the database was created from it.
            </summary>
            <value>The model hash.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.DatabaseInitializerConfig">
            <summary>
            Encapsulates information read from the application config file that specifies a database initializer
            and allows that initializer to be dynamically applied.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DatabaseInitializerConfig.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.DatabaseInitializerConfig"/> class.
            </summary>
            <param name="configKey">The key from the entry in the config file.</param>
            <param name="configValue">The value from the enrty in the config file.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.DatabaseInitializerConfig.ApplyInitializer">
            <summary>
            Uses the context type and initializer type specified in the config to create an initializer instance
            and set it with the DbDbatabase.SetInitializer method.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DatabaseInitializerConfig.ApplyInitializersFromConfig">
            <summary>
            Reads all initializers from the application config file and sets them using the DbDatabase class.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalCollectionEntry">
            <summary>
            The internal class used to implement <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry"/> and 
            <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/>.
            This internal class contains all the common implementation between the generic and non-generic
            entry classes and also allows for a clean internal factoring without compromising the public API.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalNavigationEntry">
            <summary>
            Base class for <see cref="T:System.Data.Entity.Internal.InternalCollectionEntry"/> and <see cref="T:System.Data.Entity.Internal.InternalReferenceEntry"/>
            containing common code for collection and reference navigation property entries.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNavigationEntry.#ctor(System.Data.Entity.Internal.InternalEntityEntry,System.Data.Entity.Internal.NavigationEntryMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalNavigationEntry"/> class.
            </summary>
            <param name="internalEntityEntry">The internal entity entry.</param>
            <param name="navigationMetadata">The navigation metadata.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNavigationEntry.Load">
            <summary>
            Calls Load on the underlying <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNavigationEntry.Query">
            <summary>
            Uses CreateSourceQuery on the underlying <see cref="P:System.Data.Entity.Internal.InternalNavigationEntry.RelatedEnd"/> to create a query for this
            navigation property.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNavigationEntry.GetNavigationPropertyFromRelatedEnd(System.Object)">
            <summary>
            Gets the navigation property value from the <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd"/> object.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The navigation property value.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNavigationEntry.SetNavigationPropertyOnRelatedEnd(System.Object,System.Object)">
            <summary>
            Sets the navigation property value onto the <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd"/> object.
            </summary>
            <param name="entity">The entity.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalNavigationEntry.ValidateNotDetached(System.String)">
            <summary>
            Validates that the owning entity entry is associated with an underlying <see cref="T:System.Data.Objects.ObjectStateEntry"/> and
            is not just wrapping a non-attached entity.
            If the entity is not detached, then the RelatedEnd for this navigation property is obtained.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalNavigationEntry.IsLoaded">
            <summary>
            Calls IsLoaded on the underlying <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd"/>.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalNavigationEntry.RelatedEnd">
            <summary>
            Gets the related end.
            </summary>
            <value>The related end.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalNavigationEntry.CurrentValue">
            <summary>
            Gets or sets the current value of the navigation property.  The current value is
            the entity that the navigation property references or the collection of references
            for a collection property.
            This property is virtual so that it can be mocked.
            </summary>
            <value>The current value.</value>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalCollectionEntry.#ctor(System.Data.Entity.Internal.InternalEntityEntry,System.Data.Entity.Internal.NavigationEntryMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalCollectionEntry"/> class.
            </summary>
            <param name="internalEntityEntry">The internal entity entry.</param>
            <param name="navigationMetadata">The navigation metadata.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalCollectionEntry.GetNavigationPropertyFromRelatedEnd(System.Object)">
            <summary>
            Gets the navigation property value from the <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd"/> object.
            Since for a collection the related end is an <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1"/>, it means
            that the internal representation of the navigation property is just the related end.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The navigation property value.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalCollectionEntry.SetNavigationPropertyOnRelatedEnd(System.Object,System.Object)">
            <summary>
            Sets the navigation property value onto the <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd"/> object.
            This is not currently supported for collections because it would be an attempt to replace
            the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1"/> object.
            </summary>
            <param name="entity">The entity.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalCollectionEntry.CreateDbMemberEntry">
            <summary>
            Creates a new non-generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry"/> backed by this internal entry.
            The runtime type of the DbMemberEntry created will be <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry"/> or a subtype of it.
            </summary>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalCollectionEntry.CreateDbMemberEntry``2">
            <summary>
            Creates a new generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2"/> backed by this internal entry.
            The runtime type of the DbMemberEntry created will be <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/> or a subtype of it.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalCollectionEntry.CreateDbCollectionEntry``2">
            <summary>
            Creates a new generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2"/> backed by this internal entry.
            The actual subtype of the DbCollectionEntry created depends on the metadata of this internal entry.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TElement">The type of the element.</typeparam>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalCollectionEntry.CreateDbCollectionEntry``2(System.Type)">
            <summary>
            Creates a <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2"/> object for the given entity type
            and collection element type.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="elementType">Type of the element.</param>
            <returns>The set.</returns>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalEntityPropertyEntry">
            <summary>
            A concrete implementation of <see cref="T:System.Data.Entity.Internal.InternalPropertyEntry"/> used for properties of entities.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityPropertyEntry.#ctor(System.Data.Entity.Internal.InternalEntityEntry,System.Data.Entity.Internal.PropertyEntryMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalEntityPropertyEntry"/> class.
            </summary>
            <param name="internalEntityEntry">The internal entry.</param>
            <param name="propertyMetadata">The property info.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityPropertyEntry.CreateGetter">
            <summary>
            Creates a delegate that will get the value of this property.
            </summary>
            <returns>The delegate.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityPropertyEntry.CreateSetter">
            <summary>
            Creates a delegate that will set the value of this property.
            </summary>
            <returns>The delegate.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityPropertyEntry.EntityPropertyIsModified">
            <summary>
            Returns true if the property of the entity that this property is ultimately part
            of is set as modified.  Since this is a property of an entity this method returns
            true if the property is modified.
            </summary>
            <returns>True if the entity property is modified.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityPropertyEntry.SetEntityPropertyModified">
            <summary>
            Sets the property of the entity that this property is ultimately part of to modified.
            Since this is a property of an entity this method marks it as modified.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityPropertyEntry.ParentPropertyEntry">
            <summary>
            Returns parent property, or null if this is a property on the top-level entity.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityPropertyEntry.ParentCurrentValues">
            <summary>
            Gets the current values of the parent entity.
            That is, the current values that contains the value for this property.
            </summary>
            <value>The parent current values.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityPropertyEntry.ParentOriginalValues">
            <summary>
            Gets the original values of the parent entity.
            That is, the original values that contains the value for this property.
            </summary>
            <value>The parent original values.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalReferenceEntry">
            <summary>
            The internal class used to implement <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry"/>,
            and <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2"/>.
            This internal class contains all the common implementation between the generic and non-generic
            entry classes and also allows for a clean internal factoring without compromising the public API.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalReferenceEntry.#ctor(System.Data.Entity.Internal.InternalEntityEntry,System.Data.Entity.Internal.NavigationEntryMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalReferenceEntry"/> class.
            </summary>
            <param name="internalEntityEntry">The internal entity entry.</param>
            <param name="navigationMetadata">The navigation metadata.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalReferenceEntry.GetNavigationPropertyFromRelatedEnd(System.Object)">
            <summary>
            Gets the navigation property value from the <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd"/> object.
            For reference navigation properties, this means getting the value from the
            <see cref="T:System.Data.Objects.DataClasses.EntityReference`1"/> object.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The navigation property value.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalReferenceEntry.SetNavigationPropertyOnRelatedEnd(System.Object,System.Object)">
            <summary>
            Sets the navigation property value onto the <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd"/> object.
            For reference navigation properties, this means setting the value onto the
            <see cref="T:System.Data.Objects.DataClasses.EntityReference`1"/> object.
            </summary>
            <param name="entity">The entity.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalReferenceEntry.CreateDbMemberEntry">
            <summary>
            Creates a new non-generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry"/> backed by this internal entry.
            The runtime type of the DbMemberEntry created will be <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry"/> or a subtype of it.
            </summary>
            <returns>The new entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalReferenceEntry.CreateDbMemberEntry``2">
            <summary>
            Creates a new generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2"/> backed by this internal entry.
            The runtime type of the DbMemberEntry created will be <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2"/> or a subtype of it.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <returns>The new entry.</returns>
        </member>
        <member name="T:System.Data.Entity.Internal.PropertyEntryMetadata">
            <summary>
            Contains metadata for a property of a complex object or entity.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.PropertyEntryMetadata.#ctor(System.Type,System.Type,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.PropertyEntryMetadata"/> class.
            </summary>
            <param name="declaringType">The type that the property is declared on.</param>
            <param name="propertyType">Type of the property.</param>
            <param name="propertyName">The property name.</param>
            <param name="isMapped">if set to <c>true</c> the property is mapped in the EDM.</param>
            <param name="isComplex">if set to <c>true</c> the property is a complex property.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.PropertyEntryMetadata.ValidateNameAndGetMetadata(System.Data.Entity.Internal.InternalContext,System.Type,System.Type,System.String)">
            <summary>
            Validates that the given name is a property of the declaring type (either on the CLR type or in the EDM)
            and that it is a complex or scalar property rather than a nav property and then returns metadata about
            the property.
            </summary>
            <param name="internalContext">The internal context.</param>
            <param name="declaringType">The type that the property is declared on.</param>
            <param name="requestedType">The type of property requested, which may be 'object' if any type can be accepted.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>Metadata about the property, or null if the property does not exist or is a navigation property.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.PropertyEntryMetadata.CreateMemberEntry(System.Data.Entity.Internal.InternalEntityEntry,System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
            Creates a new <see cref="T:System.Data.Entity.Internal.InternalMemberEntry"/> the runtime type of which will be
            determined by the metadata.
            </summary>
            <param name="internalEntityEntry">The entity entry to which the member belongs.</param>
            <param name="parentPropertyEntry">The parent property entry if the new entry is nested, otherwise null.</param>
            <returns>The new entry.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.PropertyEntryMetadata.IsComplex">
            <summary>
            Gets a value indicating whether this is a complex property.
            That is, not whether or not this is a property on a complex object, but rather if the
            property itself is a complex property.
            </summary>
            <value>
            	<c>true</c> if this instance is complex; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Data.Entity.Internal.PropertyEntryMetadata.MemberEntryType">
            <summary>
            Gets the type of the member for which this is metadata.
            </summary>
            <value>The type of the member entry.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.PropertyEntryMetadata.IsMapped">
            <summary>
            Gets a value indicating whether this instance is mapped in the EDM.
            </summary>
            <value><c>true</c> if this instance is mapped; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.PropertyEntryMetadata.MemberType">
            <summary>
            Gets the type of the member, which for collection properties is the type
            of the collection rather than the type in the collection.
            </summary>
            <value>The type of the member.</value>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute">
            <summary>
            This attribute can be applied to either an entire derived <see cref="T:System.Data.Entity.DbContext"/> class or to
            individual <see cref="T:System.Data.Entity.DbSet`1"/> or <see cref="T:System.Data.Entity.IDbSet`1"/> properties on that class.  When applied
            any discovered <see cref="T:System.Data.Entity.DbSet`1"/> or <see cref="T:System.Data.Entity.IDbSet`1"/> properties will still be included
            in the model but will not be automatically initialized.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.DatabaseOperations">
            <summary>
            The methods here are called from multiple places with an ObjectContext that may have
            been created in a variety of ways and ensure that the same code is run regardless of
            how the context was created.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DatabaseOperations.Create(System.Data.Objects.ObjectContext)">
            <summary>
            Used a delegate to do the actual creation once an ObjectContext has been obtained.
            This is factored in this way so that we do the same thing regardless of how we get to
            having an ObjectContext.
            Note however that a context obtained from only a connection will have no model and so
            will result in an empty database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DatabaseOperations.CreateIfNotExists(System.Data.Objects.ObjectContext)">
            <summary>
            Used a delegate to do the actual checking/creation once an ObjectContext has been obtained.
            This is factored in this way so that we do the same thing regardless of how we get to
            having an ObjectContext.
            Note however that a context obtained from only a connection will have no model and so
            will result in an empty database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DatabaseOperations.Exists(System.Data.Objects.ObjectContext)">
            <summary>
            Used a delegate to do the actual existence check once an ObjectContext has been obtained.
            This is factored in this way so that we do the same thing regardless of how we get to
            having an ObjectContext.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DatabaseOperations.DeleteIfExists(System.Data.Objects.ObjectContext)">
            <summary>
            Used a delegate to do the actual check/delete once an ObjectContext has been obtained.
            This is factored in this way so that we do the same thing regardless of how we get to
            having an ObjectContext.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.DbContextTypesInitializersPair">
            <summary>
            Helper class that extends Tuple to give the Item1 and Item2 properties more meaningful names.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbContextTypesInitializersPair.#ctor(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.List{System.String}},System.Action{System.Data.Entity.DbContext})">
            <summary>
            Creates a new pair of the given set of entity types and DbSet initializer delegate.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.DbContextTypesInitializersPair.EntityTypeToPropertyNameMap">
            <summary>
            The entity types part of the pair.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.DbContextTypesInitializersPair.SetsInitializer">
            <summary>
            The DbSet properties initializer part of the pair.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.DbHelpers">
            <summary>
            Static helper methods only.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.ThrowIfNull``1(``0,System.String)">
            <summary>
            Checks whether the given value is null and throws ArgumentNullException if it is.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.ThrowIfNullOrWhitespace(System.String,System.String)">
            <summary>
            Checks whether the given string is null, empty, or just whitespace, and throws appropriately if the check fails.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.KeyValuesEqual(System.Object,System.Object)">
            <summary>
            Given two key values that may or may not be byte arrays, this method determines
            whether or not they are equal.  For non-binary key values, this is equivalent
            to Object.Equals.  For binary keys, it is by comparison of every byte in the
            arrays.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.QuoteIdentifier(System.String)">
            <summary>
            Provides a standard helper method for quoting identifiers
            </summary>
            <param name="identifier">Identifier to be quoted. Does not validate that this identifier is valid.</param>
            <returns>Quoted string</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.TreatAsConnectionString(System.String)">
            <summary>
            Checks the given string which might be a database name or a connection string and determines
            whether it should be treated as a name or connection string.  Currently, the test is simply
            whether or not the string contains an '=' character--if it does, then it should be treated
            as a connection string.
            </summary>
            <param name="nameOrConnectionString">The name or connection string.</param>
            <returns><c>true</c> if the string should be treated as a connection string; <c>false</c> if it should be treated as a name.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.TryGetConnectionName(System.String,System.String@)">
            <summary>
            Determines whether the given string should be treated as a database name directly (it contains no '='),
            is in the form name=foo, or is some other connection string.  If it is a direct name or has name=, then
            the name is extracted and the method returns true.
            </summary>
            <param name="nameOrConnectionString">The name or connection string.</param>
            <param name="name">The name.</param>
            <returns>True if a name is found; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.IsFullEFConnectionString(System.String)">
            <summary>
            Determines whether the given string is a full EF connection string with provider, provider connection string,
            and metadata parts, or is is instead some other form of connection string.
            </summary>
            <param name="nameOrConnectionString">The name or connection string.</param>
            <returns><c>true</c> if the given string is an EF connection string; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.ParsePropertySelector``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)">
            <summary>
            Parses a property selector expression used for the expression-based versions of the Property, Collection, Reference,
            etc methods on <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> and
            <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/> classes.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="methodName">Name of the method.</param>
            <param name="paramName">Name of the param.</param>
            <returns>The property name.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.TryParsePath(System.Linq.Expressions.Expression,System.String@)">
            <summary>
            Called recursively to parse an expression tree representing a property path such
            as can be passed to Include or the Reference/Collection/Property methods of <see cref="T:System.Data.Entity.Internal.InternalEntityEntry"/>.
            This involves parsing simple property accesses like o =&gt; o.Products as well as calls to Select like
            o =&gt; o.Products.Select(p =&gt; p.OrderLines).
            </summary>
            <param name="expression">The expression to parse.</param>
            <param name="path">The expression parsed into an include path, or null if the expression did not match.</param>
            <returns>True if matching succeeded; false if the expression could not be parsed.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.GetPropertyTypes(System.Type)">
            <summary>
            Gets a cached dictionary mapping property names to property types for all the properties
            in the given type.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.GetPropertySetters(System.Type)">
            <summary>
            Gets a dictionary of compiled property setter delegates for the underlying types.
            The dictionary is cached for the type in the app domain.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.ConvertAndSet``1(System.Object,System.Object,System.Action{System.Object,System.Object},System.String,System.String)">
            <summary>
            Used by the property setter delegates to throw for attempts to set null onto
            non-nullable properties or otherwise go ahead and set the property.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.GetPropertyGetters(System.Type)">
            <summary>
            Gets a dictionary of compiled property getter delegates for the underlying types.
            The dictionary is cached for the type in the app domain.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.CreateNoTrackingQuery(System.Data.Objects.ObjectQuery)">
            <summary>
            Creates a new <see cref="T:System.Data.Objects.ObjectQuery"/> with the NoTracking merge option applied.
            The query object passed in is not changed.
            </summary>
            <param name="query">The query.</param>
            <returns>A new query with NoTracking applied.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.SplitValidationResults(System.String,System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Converts IEnumerable&lt;ValidationResult&gt; to IEnumerable&lt;<see cref="T:System.Data.Entity.Validation.DbValidationError"/>&gt;
            </summary>
            <param name="propertyName">Name of the property being validated with ValidationAttributes. Null for entity type level validation.</param>
            <param name="validationResults">ValidationResults instances to be converted to <see cref="T:System.Data.Entity.Validation.DbValidationError"/> instances</param>
            <returns>IEnumerable&lt;<see cref="T:System.Data.Entity.Validation.DbValidationError"/>&gt; created based on  IEnumerable&lt;ValidationResult&gt;.</returns>
            <remarks><see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> class contains a property with names of properties the error applies to. On the other hand
            each <see cref="T:System.Data.Entity.Validation.DbValidationError"/> applies at most to a single property. As a result for each name in ValidationResult.MemberNames
            one <see cref="T:System.Data.Entity.Validation.DbValidationError"/> will be created (with some exceptions for special cases like null or empty .MemberNames or
            null names in the .MemberNames).</remarks>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.GetPropertyPath(System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
            Calculates a "path" to a property. For primitive properties on an entity type it is just the 
            name of the property. Otherwise it is a dot separated list of names of the property and all 
            its ancestor properties starting from the entity.
            </summary>
            <param name="property">Property for which to calcluate the path.</param>
            <returns>Dot separated path to the property.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.GetPropertyPathSegments(System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
            Gets names of the property and its ancestor properties as enumerable walking "bottom-up".
            </summary>
            <param name="property">Property for which to get the segments.</param>
            <returns>Names of the property and its ancestor properties.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.CollectionType(System.Type)">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> type for the given element type.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>The collection type.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.DbHelpers.DatabaseName(System.Type)">
            <summary>
            Creates a database name given a type derived from DbContext.  This handles nested and
            generic classes.  No attempt is made to ensure that the name is not too long since this
            is provider specific.  If a too long name is generated then the provider will throw and
            the user must correct by specifying their own name in the DbContext constructor.
            </summary>
            <param name="contextType">Type of the context.</param>
            <returns>The database name to use.</returns>
        </member>
        <member name="T:System.Data.Entity.Internal.DbLocalView`1">
            <summary>
            A local (in-memory) view of the entities in a DbSet.
            This view contains Added entities and does not contain Deleted entities.  The view extends
            from <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> and hooks up events between the collection and the
            state manager to keep the view in sync.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Internal.DbLocalView`1.#ctor(System.Data.Entity.Internal.InternalContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.DbLocalView`1"/> class for entities
            of the given generic type in the given internal context.
            </summary>
            <param name="internalContext">The internal context.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.DbLocalView`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called by the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> base class when the collection changes.
            This method looks at the change made to the collection and reflects those changes in the
            state manager.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.DbLocalView`1.StateManagerChangedHandler(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Handles events from the state manager for entities entering, leaving, or being marked as deleted.
            The local view is kept in sync with these changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.CollectionChangeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.DbLocalView`1.ClearItems">
            <summary>
            Clears the items by calling remove on each item such that we get Remove events that
            can be tracked back to the state manager, rather than a single Reset event that we
            cannot deal with.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbLocalView`1.InsertItem(System.Int32,`0)">
            <summary>
            Adds a contains check to the base implementation of InsertItem since we can't support
            duplicate entities in the set.
            </summary>
            <param name="index">The index at which to insert.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="P:System.Data.Entity.Internal.DbLocalView`1.BindingList">
            <summary>
            Returns a cached binding list implementation backed by this ObservableCollection.
            </summary>
            <value>The binding list.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.DbSetDiscoveryService">
            <summary>
            Service used to search for instance properties on a DbContext class that can
            be assigned a DbSet instance.  Also, if the the property has a public setter,
            then a delegate is compiled to set the property to a new instance of DbSet.
            All of this information is cached per app domain.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbSetDiscoveryService.#ctor(System.Data.Entity.DbContext)">
            <summary>
            Creates a set discovery service for the given derived context.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbSetDiscoveryService.GetSets">
            <summary>
            Processes the given context type to determine the DbSet or IDbSet
            properties and collect root entity types from those properties.  Also, delegates are
            created to initialize any of these properties that have public setters.
            If the type has been processed previously in the app domain, then all this information
            is returned from a cache.
            </summary>
            <returns>A dictionary of potential entity type to the list of the names of the properties that used the type.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.DbSetDiscoveryService.InitializeSets">
            <summary>
            Calls the public setter on any property found to initialize it to a new instance of DbSet.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbSetDiscoveryService.RegisterSets(System.Data.Entity.ModelConfiguration.ModelBuilder)">
            <summary>
            Registers the entities and their entity set name hints with the given <see cref="T:System.Data.Entity.ModelConfiguration.ModelBuilder"/>.
            </summary>
            <param name="modelBuilder">The model builder.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.DbSetDiscoveryService.DbSetPropertyShouldBeInitialized(System.Reflection.PropertyInfo)">
            <summary>
            Returns false if SuppressDbSetInitializationAttribute is found on the property or the class, otherwise
            returns true.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbSetDiscoveryService.GetSetType(System.Type)">
            <summary>
            Determines whether or not an instance of DbSet/ObjectSet can be assigned to a property of the given type.
            </summary>
            <param name="declaredType">The type to check.</param>
            <returns>The entity type of the DbSet/ObjectSet that can be assigned, or null if no set type can be assigned.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Entity.Internal.DbSetDiscoveryService.GetSetElementType(System.Type)" -->
        <member name="T:System.Data.Entity.Internal.EagerInternalConnection">
            <summary>
            A EagerInternalConnection object wraps an already existing DbConnection object.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalConnection">
            <summary>
            InternalConnection objects manage DbConnections.
            Two concrete base classes of this abstract interface exist:<see cref="T:System.Data.Entity.Internal.LazyInternalConnection"/>
            and <see cref="T:System.Data.Entity.Internal.EagerInternalConnection"/>.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.IInternalConnection">
            <summary>
            IInternalConnection objects manage DbConnections.
            Two concrete implementations of this interface exist--LazyInternalConnection and EagerInternalConnection.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.IInternalConnection.CreateObjectContextFromConnectionModel">
            <summary>
            Creates an <see cref="T:System.Data.Objects.ObjectContext"/> from metadata in the connection.  This method must
            only be called if ConnectionHasModel returns true.
            </summary>
            <returns>The newly created context.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.IInternalConnection.Connection">
            <summary>
            Returns the underlying DbConnection.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.IInternalConnection.ConnectionKey">
            <summary>
            Returns a key consisting of the connection type and connection string.
            If this is an EntityConnection then the metadata path is included in the key returned.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.IInternalConnection.ConnectionHasModel">
            <summary>
            Gets a value indicating whether the connection is an EF connection which therefore contains
            metadata specifying the model, or instead is a store connection, in which case it contains no
            model info.
            </summary>
            <value><c>true</c> if the connection contains model info; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalConnection.CreateObjectContextFromConnectionModel">
            <summary>
            Creates an <see cref="T:System.Data.Objects.ObjectContext"/> from metadata in the connection.  This method must
            only be called if ConnectionHasModel returns true.
            </summary>
            <returns>The newly created context.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalConnection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalConnection.Connection">
            <summary>
            Returns the underlying DbConnection.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalConnection.ConnectionKey">
            <summary>
            Returns a key consisting of the connection type and connection string.
            If this is an EntityConnection then the metadata path is included in the key returned.
            </summary>
            <value></value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalConnection.ConnectionHasModel">
            <summary>
            Gets a value indicating whether the connection is an EF connection which therefore contains
            metadata specifying the model, or instead is a store connection, in which case it contains no
            model info.
            </summary>
            <value><c>true</c> if the connection contains model info; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalConnection.UnderlyingConnection">
            <summary>
            Gets or sets the underlying <see cref="T:System.Data.Common.DbConnection"/> object.  No initialization is done when the
            connection is obtained, and it can also be set to null.
            </summary>
            <value>The underlying connection.</value>
        </member>
        <member name="M:System.Data.Entity.Internal.EagerInternalConnection.#ctor(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            Creates a new EagerInternalConnection that wraps an existing DbConnection.  The existing DbConnection will not
            be disposed when the EagerInternalConnection is disposed.
            </summary>
            <param name="existingConnection">An existing connection.</param>
            <param name="conectionOwned">If set to <c>true</c> then the underlying connection should be disposed when this object is disposed.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.EagerInternalConnection.Dispose">
            <summary>
            Dispose the existing connection is the original caller has specified that it should be disposed
            by the framework.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.EagerInternalContext">
            <summary>
            An EagerInternalContext is an InternalContext where the ObjectContext instance that it wraps
            is set immediately at construction time rather than being created lazily.  In this case
            the internal context may or may not own the ObjectContext instance but will only dispose it
            if it does own it.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalContext">
            <summary>
            An InternalContext underlies every instance of DbContext and wraps an ObjectContext instance.
            The InternalContext also acts to expose necessary information to other parts of the design in a
            controlled manner without adding a lot of internal methods and properties to the DbContext class itself.
            Two concrete classes derive from this abstract class--LazyInternalContext and EagerInternalContext.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.#ctor(System.Data.Entity.DbContext)">
            <summary>
            Initializes the InternalContext object with its DbContext owner.
            </summary>
            <param name="owner">The owner DbContext.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.GetObjectContextWithoutDatabaseInitialization">
            <summary>
            Returns the underlying ObjectContext without causing the underlying database to be created
            or the database initialization strategy to be executed.
            This is used to get a context that can then be used for database creation/initialization.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.UseTempObjectContext">
            <summary>
            Creates a new temporary ObjectContext based on the same metadata and connection as the real
            ObjectContext and sets it as the context to use DisposeTempObjectContext is called.
            This allows this internal context and its DbContext to be used for transient operations
            such as initializing and seeding the database, after which it can be thrown away.
            This isolates the real ObjectContext from any changes made and and saves performed.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.DisposeTempObjectContext">
            <summary>
            If a temporary ObjectContext was set with UseTempObjectContext, then this method disposes that context
            and returns this internal context and its DbContext to using the real ObjectContext.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.CompatibleWithModel(System.Boolean)">
            <summary>
            This method returns true if the context has a model hash and the database contains a model hash
            and these hashes match.  This indicates that the model used to create the database is the same
            as the current model and so the two can be used together.
            </summary>
            <param name="throwIfNoMetadata">If set to <c>true</c> then an exception will be thrown if no
            model metadata is found either in the model associated with the context or in the database
            itself.  If set to <c>false</c> then this method will return <c>true</c> if metadata is
            not found.</param>
            <returns> True if the model hash in the context and the database match; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.QueryForModelHash">
            <summary>
            Queries the database for a model hash and returns it if found or returns null if the table
            or the row doesn't exist in the database.
            </summary>
            <returns>The model hash, or null if not found.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.SaveModelHashToDatabase">
            <summary>
            Saves the model hash from the context to the database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.PerformInitializationAction(System.Action)">
            <summary>
            Performs the initialization action that may result in a <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> and
            handle the exception to provide more meaning to the user.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.RegisterObjectStateManagerChangedEvent(System.ComponentModel.CollectionChangeEventHandler)">
            <summary>
            Registers for the ObjectStateManagerChanged event on the underlying ObjectStateManager.
            This is a virtual method on this class so that it can be mocked.
            </summary>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.EntityInContextAndNotDeleted(System.Object)">
            <summary>
            Checks whether or not the given object is in the context in any state other than Deleted.
            This is a virtual method on this class so that it can be mocked.
            </summary>
            <param name="entity">The entity.</param>
            <returns><c>true</c> if the entity is in the context and not deleted; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.Initialize">
            <summary>
            Initializes this instance, which means both the context is initialized and the underlying
            database is initialized.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.InitializeContext">
            <summary>
            Initializes the underlying ObjectContext but does not cause the database to be initialized.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.Dispose">
            <summary>
            Disposes the context. Override the DisposeContext method to perform
            additional work when disposing.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.DisposeContext">
            <summary>
            Performs additional work to dispose a context.  The default implementation
            does nothing.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.DetectChanges(System.Boolean)">
            <summary>
            Calls DetectChanges on the underlying <see cref="P:System.Data.Entity.Internal.InternalContext.ObjectContext"/> if AutoDetectChangesEnabled is
            true or if force is set to true.
            </summary>
            <param name="force">if set to <c>true</c> then DetectChanges is called regardless of the value of AutoDetectChangesEnabled.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.Set``1">
            <summary>
            Returns the DbSet instance for the given entity type.
            This property is virtual and returns <see cref="T:System.Data.Entity.IDbSet`1"/> to that it can be mocked.
            </summary>
            <typeparam name="TEntity">The entity type for which a set should be returned.</typeparam>
            <returns>A set for the given entity type.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.Set(System.Type)">
            <summary>
            Returns the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbSet"/> instance for the given entity type.
            This property is virtual and returns <see cref="T:System.Data.Entity.Internal.Linq.IInternalSetAdapter"/> to that it can be mocked.
            </summary>
            <param name="entityType">The entity type for which a set should be returned.</param>
            <returns>A set for the given entity type.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.CreateInternalSet(System.Type)">
            <summary>
            Creates an internal set using an app domain cached delegate.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns>The set.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(System.Type)">
            <summary>
            Returns the entity set and the base type for that entity set for the given type.
            This method does o-space loading if required and throws if the type is not in the model.
            </summary>
            <param name="entityType">The entity type to lookup.</param>
            <returns>The entity set and base type pair.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.IsEntityTypeMapped(System.Type)">
            <summary>
            Checks whether or not the given entity type is mapped in the model.
            </summary>
            <param name="entityType">The entity type to lookup.</param>
            <returns>True if the type is mapped as an entity; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.GetLocalEntities``1">
            <summary>
            Gets the local entities of the type specified from the state manager.  That is, all
            Added, Modified, and Unchanged entities of the given type.
            </summary>
            <typeparam name="TEntity">The type of entity to get.</typeparam>
            <returns>The entities.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.ExecuteSqlQuery``1(System.String,System.Object[])">
            <summary>
            Executes the given SQL query against the database backing this context.  The results are not materialized as
            entities or tracked.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="sql">The SQL.</param>
            <param name="parameters">The parameters.</param>
            <returns>The query results.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.ExecuteSqlQuery(System.Type,System.String,System.Object[])">
            <summary>
            Executes the given SQL query against the database backing this context.  The results are not materialized as
            entities or tracked.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="sql">The SQL.</param>
            <param name="parameters">The parameters.</param>
            <returns>The query results.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.ExecuteSqlQueryAsIEnumerable``1(System.String,System.Object[])">
            <summary>
            Calls the generic ExecuteSqlQuery but with a non-generic return type so that it
            has the correct signature to be used with CreateDelegate above.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.ExecuteSqlCommand(System.String,System.Object[])">
            <summary>
            Executes the given SQL command against the database backing this context.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="parameters">The parameters.</param>
            <returns>The return value from the database.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.GetStateEntry(System.Object)">
            <summary>
            Gets the underlying <see cref="T:System.Data.Objects.ObjectStateEntry"/> for the given entity, or returns null if the entity isn't tracked by this context.
            This method is virtual so that it can be mocked.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The state entry or null.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.GetStateEntries">
            <summary>
            Gets the underlying <see cref="T:System.Data.Objects.ObjectStateEntry"/> objects for all entities tracked by
            this context.
            This method is virtual so that it can be mocked.
            </summary>
            <returns>State entries for all tracked entities.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.GetStateEntries``1">
            <summary>
            Gets the underlying <see cref="T:System.Data.Objects.ObjectStateEntry"/> objects for all entities of the given
            type tracked by this context.
            This method is virtual so that it can be mocked.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns>State entries for all tracked entities of the given type.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.GetStateEntries(System.Func{System.Data.Objects.ObjectStateEntry,System.Boolean})">
            <summary>
            Helper method that gets the underlying <see cref="T:System.Data.Objects.ObjectStateEntry"/> objects for all entities that
            match the given predicate.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.WrapUpdateException(System.Data.UpdateException)">
            <summary>
            Wraps the given <see cref="T:System.Data.UpdateException"/> in either a <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException"/> or
            a <see cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException"/> depending on the actual exception type and the state
            entries involved.
            </summary>
            <param name="updateException">The update exception.</param>
            <returns>A new exception wrapping the given exception.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.CreateObject``1">
            <summary>
            Uses the underlying context to create an entity such that if the context is configured
            to create proxies and the entity is suitable then a proxy instance will be returned.
            This method is virtual so that it can be mocked.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns>The new entity instance.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.CreateObject(System.Type)">
            <summary>
            Uses the underlying context to create an entity such that if the context is configured
            to create proxies and the entity is suitable then a proxy instance will be returned.
            This method is virtual so that it can be mocked.
            </summary>
            <param name="type">The type of entity to create.</param>
            <returns>The new entity instance.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.CreateObjectAsObject``1">
            <summary>
            This method is used by CreateDelegate to transform the CreateObject method with return type TEntity
            into a method with return type object which matches the required type of the delegate.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.CheckContextNotDisposed">
            <summary>
            Throws if the context has been disposed.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.InitializeEntitySetMappings">
            <summary>
            Checks whether or not the internal cache of types to entity sets has been initialized,
            and initializes it if necessary.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.TryUpdateEntitySetMappingsForType(System.Type)">
            <summary>
            Performs o-space loading for the type and returns false if the type is not in the model.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.UpdateEntitySetMappingsForType(System.Type)">
            <summary>
            Performs o-space loading for the type and throws if the type is not in the model.
            </summary>
            <param name="entityType">Type of the entity.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.IsPocoTypeInNonPocoAssembly(System.Type)">
            <summary>
            Returns true if the given entity type does not have EdmEntityTypeAttribute but is in
            an assembly that has EdmSchemaAttribute.  This indicates mixing of POCO and EOCO in the
            same assembly, which is something that we don't support.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.IsComplexType(System.Type)">
            <summary>
            Determines whether or not the given clrType is mapped to a complex type.  Assumes o-space loading has happened.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalContext.UpdateEntitySetMappings">
            <summary>
            Updates the cache of types to entity sets either for the first time or after potentially
            doing some o-space loading.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.Owner">
            <summary>
            The public context instance that owns this internal context.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.ObjectContext">
            <summary>
            Returns the underlying ObjectContext.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.TempObjectContext">
            <summary>
            Gets the temp object context, or null if none has been set.
            </summary>
            <value>The temp object context.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.ModelHash">
            <summary>
              An SHA256 hash of the store model (SSDL) that can be used later to check if the model has changed or not.
              Note that this is currently only supported for Code First.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.DatabaseInitialized">
            <summary>
            Checks or sets whether or not the database has been initialized for this context with its current connection.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.DefaultInitializer">
            <summary>
            Gets the default database initializer to use for this context if no other has been registered.
            For code first this property returns a <see cref="T:System.Data.Entity.Database.CreateDatabaseIfNotExists`1"/> instance.
            For database/model first, this property returns null.
            </summary>
            <value>The default initializer.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.LazyLoadingEnabled">
            <summary>
            Gets or sets a value indicating whether lazy loading is enabled.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.AutoDetectChangesEnabled">
            <summary>
            Gets or sets a value indicating whether DetectChanges is called automatically in the API.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.ValidateOnSaveEnabled">
            <summary>
            Gets or sets a value indicating whether to validate entities when <see cref="M:System.Data.Entity.DbContext.SaveChanges"/> is called.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.IsDisposed">
            <summary>
            True if the context has been disposed.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.Connection">
            <summary>
            The connection underlying this context.  Accessing this property does not cause the context
            to be initialized, only its connection.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.DatabaseOperations">
            <summary>
            Gets the DatabaseOperations instance to use to perform Create/Delete/Exists operations
            against the database.
            Note that this virtual property can be mocked to help with unit testing.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.EntityValidators">
            <summary>
            Validators used to validate entities.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalContext.ValidationProvider">
            <summary>
            Gets <see cref="P:System.Data.Entity.Internal.InternalContext.ValidationProvider"/> instance used to create validators and validation contexts.
            This property is virtual to allow mocking.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.EagerInternalContext.#ctor(System.Data.Entity.DbContext,System.Data.Objects.ObjectContext,System.Boolean)">
            <summary>
            Constructs a EagerInternalContext for an already existing ObjectContext.
            </summary>
            <param name="owner">The owner DbContext.</param>
            <param name="objectContext">The existing ObjectContext.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.EagerInternalContext.GetObjectContextWithoutDatabaseInitialization">
            <summary>
            Returns the underlying ObjectContext without causing the underlying database to be created
            or the database initialization strategy to be executed.
            This is used to get a context that can then be used for database creation/initialization.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.EagerInternalContext.InitializeContext">
            <summary>
            Does nothing, since the ObjectContext already exists.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.EagerInternalContext.DisposeContext">
            <summary>
            Disposes the context. The underlying ObjectContext is also disposed if it is owned.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.EagerInternalContext.ObjectContext">
            <summary>
            Returns the underlying ObjectContext.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.EagerInternalContext.ModelHash">
            <summary>
              An SHA256 hash of the store model (SSDL) that can be used later to check if the model has changed or not.
              Note that this is currently only supported for Code First.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.EagerInternalContext.EntityValidators">
            <summary>
            Validators used to validate entities.
            Note that validation is currently supported only for Code First therefore the returned collection of validators is empty.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.EagerInternalContext.DatabaseInitialized">
            <summary>
            Checks or sets whether or not the database has been initialized for this context with its current connection.
            Currently always returns true until we figure out what to do with DbContext created with an existing ObjectContext.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.EagerInternalContext.DefaultInitializer">
            <summary>
            Gets the default database initializer to use for this context if no other has been registered.
            For code first this property returns a <see cref="T:System.Data.Entity.Database.CreateDatabaseIfNotExists`1"/> instance.
            For database/model first, this property returns null.
            </summary>
            <value>The default initializer.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.EagerInternalContext.Connection">
            <summary>
            The connection underlying this context.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.EagerInternalContext.LazyLoadingEnabled">
            <summary>
            Gets or sets a value indicating whether lazy loading is enabled.  This is just a wrapper
            over the same flag in the underlying ObjectContext.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.ClonedPropertyValues">
            <summary>
            An implementation of <see cref="T:System.Data.Entity.Internal.InternalPropertyValues"/> that represents a clone of another
            dictionary.  That is, all the property values have been been copied into this dictionary.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalPropertyValues">
            <summary>
            The internal class used to implement <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues"/>.
            This internal class allows for a clean internal factoring without compromising the public API.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyValues.#ctor(System.Data.Entity.Internal.InternalContext,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalPropertyValues"/> class.
            </summary>
            <param name="internalContext">The internal context with which the entity of complex object is associated.</param>
            <param name="type">The type of the entity or complex object.</param>
            <param name="isEntityValues">If set to <c>true</c> this is a dictionary for an entity, otherwise it is a dictionary for a complex object.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyValues.GetItemImpl(System.String)">
            <summary>
            Implemented by subclasses to get the dictionary item for a given property name.
            Checking that the name is valid should happen before this method is called such
            that subclasses do not need to perform the check.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>An item for the given name.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyValues.ToObject">
            <summary>
            Creates an object of the underlying type for this dictionary and hydrates it with property
            values from this dictionary.
            </summary>
            <returns>The properties of this dictionary copied into a new object.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyValues.CreateObject">
            <summary>
            Creates an instance of the underlying type for this dictionary, which may either be an entity type (in which
            case CreateObject on the context is used) or a non-entity type (in which case the empty constructor is used.)
            In either case, app domain cached compiled delegates are used to do the creation.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyValues.SetValues(System.Object)">
            <summary>
            Sets the values of this dictionary by reading values out of the given object.
            The given object must be of the type that this dictionary is based on.
            </summary>
            <param name="value">The object to read values from.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyValues.Clone">
            <summary>
            Creates a new dictionary containing copies of all the properties in this dictionary.
            Changes made to the new dictionary will not be reflected in this dictionary and vice versa.
            </summary>
            <returns>A clone of this dictionary.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyValues.SetValues(System.Data.Entity.Internal.InternalPropertyValues)">
            <summary>
            Sets the values of this dictionary by reading values from another dictionary.
            The other dictionary must be based on the same type as this dictionary, or a type derived
            from the type for this dictionary.
            </summary>
            <param name="values">The dictionary to read values from.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyValues.GetItem(System.String)">
            <summary>
            Gets the dictionary item for the property with the given name.
            This method checks that the given name is valid.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns>The item.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalPropertyValues.SetValue(System.Data.Entity.Internal.IPropertyValuesItem,System.Object)">
            <summary>
            Sets the value of the property only if it is different from the current value and is not
            an invalid attempt to set a complex property.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyValues.PropertyNames">
            <summary>
            Gets the set of names of all properties in this dictionary as a read-only set.
            </summary>
            <value>The property names.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyValues.Item(System.String)">
            <summary>
            Gets or sets the value of the property with the specified property name.
            The value may be a nested instance of this class.
            </summary>
            <param name="propertyName">The property name.</param>
            <value>The value of the property.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyValues.ObjectType">
            <summary>
            Gets the entity type of complex type that this dictionary is based on.
            </summary>
            <value>The type of the object underlying this dictionary.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyValues.InternalContext">
            <summary>
            Gets the internal context with which the underlying entity or complex type is associated.
            </summary>
            <value>The internal context.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalPropertyValues.IsEntityValues">
            <summary>
            Gets a value indicating whether the object for this dictionary is an entity or a complex object.
            </summary>
            <value><c>true</c> if this this is a dictionary for an entity; <c>false</c> if it is a dictionary for a complex object.</value>
        </member>
        <member name="M:System.Data.Entity.Internal.ClonedPropertyValues.#ctor(System.Data.Entity.Internal.InternalPropertyValues,System.Data.Common.DbDataRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.ClonedPropertyValues"/> class by copying
            values from the given dictionary.
            </summary>
            <param name="original">The dictionary to clone.</param>
            <param name="valuesRecord">If non-null, then the values for the new dictionary are taken from this record rather than from the original dictionary.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.ClonedPropertyValues.GetItemImpl(System.String)">
            <summary>
            Gets the dictionary item for a given property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>An item for the given name.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.ClonedPropertyValues.PropertyNames">
            <summary>
            Gets the set of names of all properties in this dictionary as a read-only set.
            </summary>
            <value>The property names.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.ClonedPropertyValuesItem">
            <summary>
            An implementation of <see cref="T:System.Data.Entity.Internal.IPropertyValuesItem"/> for an item in a <see cref="T:System.Data.Entity.Internal.ClonedPropertyValues"/>.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.IPropertyValuesItem">
            <summary>
            Represents an item in an <see cref="T:System.Data.Entity.Internal.InternalPropertyValues"/> representing a property name/value.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.IPropertyValuesItem.Value">
            <summary>
            Gets or sets the value of the property represented by this item.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.IPropertyValuesItem.Name">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.IPropertyValuesItem.IsComplex">
            <summary>
            Gets a value indicating whether this item represents a complex property.
            </summary>
            <value><c>true</c> If this instance represents a complex property; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.IPropertyValuesItem.Type">
            <summary>
            Gets the type of the underlying property.
            </summary>
            <value>The property type.</value>
        </member>
        <member name="M:System.Data.Entity.Internal.ClonedPropertyValuesItem.#ctor(System.String,System.Object,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.ClonedPropertyValuesItem"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="isComplex">If set to <c>true</c> this item represents a complex property.</param>
        </member>
        <member name="P:System.Data.Entity.Internal.ClonedPropertyValuesItem.Value">
            <summary>
            Gets or sets the value of the property represented by this item.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.ClonedPropertyValuesItem.Name">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.ClonedPropertyValuesItem.IsComplex">
            <summary>
            Gets a value indicating whether this item represents a complex property.
            </summary>
            <value>
            	<c>true</c> If this instance represents a complex property; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Data.Entity.Internal.ClonedPropertyValuesItem.Type">
            <summary>
            Gets the type of the underlying property.
            </summary>
            <value>The property type.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.DbDataRecordPropertyValues">
            <summary>
            An implementation of <see cref="T:System.Data.Entity.Internal.InternalPropertyValues"/> that is based on an existing
            <see cref="T:System.Data.Objects.DbUpdatableDataRecord"/> instance.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbDataRecordPropertyValues.#ctor(System.Data.Entity.Internal.InternalContext,System.Type,System.Data.Objects.DbUpdatableDataRecord,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.DbDataRecordPropertyValues"/> class.
            </summary>
            <param name="internalContext">The internal context.</param>
            <param name="type">The type.</param>
            <param name="dataRecord">The data record.</param>
            <param name="isEntityValues">If set to <c>true</c> this is a dictionary for an entity, otherwise it is a dictionary for a complex object.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.DbDataRecordPropertyValues.GetItemImpl(System.String)">
            <summary>
            Gets the dictionary item for a given property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>An item for the given name.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.DbDataRecordPropertyValues.PropertyNames">
            <summary>
            Gets the set of names of all properties in this dictionary as a read-only set.
            </summary>
            <value>The property names.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.DbDataRecordPropertyValuesItem">
            <summary>
            An implementation of <see cref="T:System.Data.Entity.Internal.IPropertyValuesItem"/> for an item in a <see cref="T:System.Data.Entity.Internal.DbDataRecordPropertyValues"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.DbDataRecordPropertyValuesItem.#ctor(System.Data.Objects.DbUpdatableDataRecord,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.DbDataRecordPropertyValuesItem"/> class.
            </summary>
            <param name="dataRecord">The data record.</param>
            <param name="ordinal">The ordinal.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:System.Data.Entity.Internal.DbDataRecordPropertyValuesItem.Value">
            <summary>
            Gets or sets the value of the property represented by this item.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.DbDataRecordPropertyValuesItem.Name">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.DbDataRecordPropertyValuesItem.IsComplex">
            <summary>
            Gets a value indicating whether this item represents a complex property.
            </summary>
            <value>
            	<c>true</c> If this instance represents a complex property; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Data.Entity.Internal.DbDataRecordPropertyValuesItem.Type">
            <summary>
            Gets the type of the underlying property.
            </summary>
            <value>The property type.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.IEntityStateEntry">
            <summary>
            This is version of an internal interface that already exists in System.Data.Entity that
            is implemented by <see cref="T:System.Data.Objects.ObjectStateEntry"/>.  Using this interface allows state
            entries to be mocked for unit testing.  The plan is to remove this version of the
            interface and use the one in System.Data.Entity once we roll into the framework.
            Note that some members may need to be added to the interface in the framework when
            we combine the two.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalEntityEntry">
            <summary>
            The internal class used to implement <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/>
            and <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1"/>.
            This internal class contains all the common implementation between the generic and non-generic
            entry classes and also allows for a clean internal factoring without compromising the public API.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.#ctor(System.Data.Entity.Internal.InternalContext,System.Data.Entity.Internal.IEntityStateEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalEntityEntry"/> class.
            </summary>
            <param name="internalContext">The internal context.</param>
            <param name="stateEntry">The state entry.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.#ctor(System.Data.Entity.Internal.InternalContext,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalEntityEntry"/> class for an
            entity which may or may not be attached to the context.
            </summary>
            <param name="internalContext">The internal context.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.GetDatabaseValues">
            <summary>
            Queries the database for copies of the values of the tracked entity as they currently exist in the database.
            </summary>
            <returns>The store values.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.AppendEntitySqlRow(System.Text.StringBuilder,System.String,System.Data.Entity.Internal.InternalPropertyValues)">
            <summary>
            Appends a query for the properties in the entity to the given string builder that is being used to
            build the eSQL query.  This method may be called recursively to query for all the sub-properties of
            a complex property.
            </summary>
            <param name="queryBuilder">The query builder.</param>
            <param name="prefix">The qualifier with which to prefix each property name.</param>
            <param name="templateValues">The dictionary that acts as a template for the properties to query.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.ValidateStateToGetValues(System.String,System.Data.EntityState)">
            <summary>
            Validates that a dictionary can be obtained for the state of the entity represented by this entry.
            </summary>
            <param name="method">The method name being used to request a dictionary.</param>
            <param name="invalidState">The state that is invalid for the request being processed.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.Reload">
            <summary>
            Calls Refresh with StoreWins on the underlying state entry.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.Reference(System.String,System.Type)">
            <summary>
            Gets an internal object representing a reference navigation property.
            This method is virtual to allow mocking.
            </summary>
            <param name="navigationProperty">The navigation property.</param>
            <param name="requestedType">The type of entity requested, which may be 'object' or null if any type can be accepted.</param>
            <returns>The entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.Collection(System.String,System.Type)">
            <summary>
            Gets an internal object representing a collection navigation property.
            This method is virtual to allow mocking.
            </summary>
            <param name="navigationProperty">The navigation property.</param>
            <param name="requestedType">The type of entity requested, which may be 'object' or null f any type can be accepted.</param>
            <returns>The entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.Member(System.String,System.Type)">
            <summary>
            Gets an internal object representing a navigation, scalar, or complex property.
            This method is virtual to allow mocking.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="requestedType">The type of entity requested, which may be 'object' if any type can be accepted.</param>
            <returns>The entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.Property(System.String,System.Type,System.Boolean)">
            <summary>
            Gets an internal object representing a scalar or complex property.
            This method is virtual to allow mocking.
            </summary>
            <param name="property">The property.</param>
            <param name="requestedType">The type of object requested, which may be null or 'object' if any type can be accepted.</param>
            <param name="requireComplex">if set to <c>true</c> then the found property must be a complex property.</param>
            <returns>The entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.Property(System.Data.Entity.Internal.InternalPropertyEntry,System.String,System.Type,System.Boolean)">
            <summary>
            Gets an internal object representing a scalar or complex property.
            The property may be a nested property on the given <see cref="T:System.Data.Entity.Internal.InternalPropertyEntry"/>.
            </summary>
            <param name="parentProperty">The parent property entry, or null if this is a property directly on the entity.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="requestedType">The type of object requested, which may be null or 'object' if any type can be accepted.</param>
            <param name="requireComplex">if set to <c>true</c> then the found property must be a complex property.</param>
            <returns>The entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.Property(System.Data.Entity.Internal.InternalPropertyEntry,System.String,System.Collections.Generic.IList{System.String},System.Type,System.Boolean)">
            <summary>
            Gets an internal object representing a scalar or complex property.
            The property may be a nested property on the given <see cref="T:System.Data.Entity.Internal.InternalPropertyEntry"/>.
            </summary>
            <param name="parentProperty">The parent property entry, or null if this is a property directly on the entity.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="properties">The property split out into its parts.</param>
            <param name="requestedType">The type of object requested, which may be null or 'object' if any type can be accepted.</param>
            <param name="requireComplex">if set to <c>true</c> then the found property must be a complex property.</param>
            <returns>The entry.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.ValidateAndGetNavigationMetadata(System.String,System.Type,System.Boolean)">
            <summary>
            Checks that the given property name is a navigation property and is either a reference property or
            collection property according to the value of requireCollection.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.GetNavigationMetadata(System.String)">
            <summary>
            Gets metadata for the given property if that property is a navigation property or returns null
            if it is not a navigation property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Navigation property metadata or null.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.GetNavigationTargetType(System.Data.Metadata.Edm.NavigationProperty)">
            <summary>
            Gets the type of entity or entities at the target end of the given navigation property.
            </summary>
            <param name="navigationProperty">The navigation property.</param>
            <returns>The CLR type of the entity or entities at the other end.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.GetRelatedEnd(System.String)">
            <summary>
            Gets the related end for the navigation property with the given name.
            </summary>
            <param name="navigationProperty">The navigation property.</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.ValidateAndGetPropertyMetadata(System.String,System.Type,System.Type)">
            <summary>
            Uses EDM metadata to validate that the property name exists in the model and represents a scalar or
            complex property or exists in the CLR type.
            This method is public and virtual so that it can be mocked.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="declaringType">The type on which the property is declared.</param>
            <param name="requestedType">The type of object requested, which may be 'object' if any type can be accepted.</param>
            <returns>Metadata for the property.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.SplitName(System.String)">
            <summary>
            Splits the given property name into parts delimited by dots.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The parts of the name.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.ValidateNotDetachedAndInitializeRelatedEnd(System.String)">
            <summary>
            Validates that this entry is associated with an underlying <see cref="P:System.Data.Entity.Internal.InternalEntityEntry.ObjectStateEntry"/> and
            is not just wrapping a non-attached entity.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.GetValidationResult(System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Validates entity represented by this entity entry.
            This method is virtual to allow mocking.
            </summary>
            <param name="items">
            A dictionary of key/value pairs containing additional info for custom validation. This parameter is optional and can be null.
            </param>
            <returns><see cref="T:System.Data.Entity.Validation.DbEntityValidationResult"/> containing validation result. Never null.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            Two <see cref="T:System.Data.Entity.Internal.InternalEntityEntry"/> instances are considered equal if they are both entries for
            the same entity on the same <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.Equals(System.Data.Entity.Internal.InternalEntityEntry)">
            <summary>
            Determines whether the specified <see cref="T:System.Data.Entity.Internal.InternalEntityEntry"/> is equal to this instance.
            Two <see cref="T:System.Data.Entity.Internal.InternalEntityEntry"/> instances are considered equal if they are both entries for
            the same entity on the same <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <param name="other">The <see cref="T:System.Data.Entity.Internal.InternalEntityEntry"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Data.Entity.Internal.InternalEntityEntry"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalEntityEntry.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityEntry.Entity">
            <summary>
            Gets the tracked entity.
            This property is virtual to allow mocking.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityEntry.State">
            <summary>
            Gets or sets the state of the entity.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityEntry.CurrentValues">
            <summary>
            Gets the current property values for the tracked entity represented by this object.
            This property is virtual to allow mocking.
            </summary>
            <value>The current values.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityEntry.OriginalValues">
            <summary>
            Gets the original property values for the tracked entity represented by this object.
            The original values are usually the entity's property values as they were when last queried from
            the database.
            This property is virtual to allow mocking.
            </summary>
            <value>The original values.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityEntry.IsDetached">
            <summary>
            Checks whether or not this entry is associated with an underlying <see cref="P:System.Data.Entity.Internal.InternalEntityEntry.ObjectStateEntry"/> or
            is just wrapping a non-attached entity.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityEntry.EntityType">
            <summary>
            Gets the type of the entity being tracked.
            </summary>
            <value>The type of the entity.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityEntry.EdmEntityType">
            <summary>
            Gets the c-space entity type for this entity from the EDM.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityEntry.ObjectStateEntry">
            <summary>
            Gets the underlying object state entry.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalEntityEntry.InternalContext">
            <summary>
            Gets the internal context.
            </summary>
            <value>The internal context.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.ReadOnlySet`1">
            <summary>
            An implementation of <see cref="T:System.Collections.Generic.ISet`1"/> that wraps an existing set but makes
            it read-only.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.Data.Entity.Internal.ReadOnlySet`1.#ctor(System.Collections.Generic.ISet{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.ReadOnlySet`1"/> class wrapped around
            another existing set.
            </summary>
            <param name="set">The existing set.</param>
        </member>
        <member name="T:System.Data.Entity.Internal.StateEntryAdapter">
            <summary>
            This is a temporary adapter class that wraps an <see cref="T:System.Data.Objects.ObjectStateEntry"/> and
            presents it as an <see cref="T:System.Data.Entity.Internal.IEntityStateEntry"/>.  This class will be removed once
            we roll into the System.Data.Entity assembly.  See <see cref="T:System.Data.Entity.Internal.IEntityStateEntry"/>
            for more details.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.EntitySetTypePair">
            <summary>
            Helper class that extends Tuple to give the Item1 and Item2 properties more meaningful names.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.EntitySetTypePair.#ctor(System.Data.Metadata.Edm.EntitySet,System.Type)">
            <summary>
            Creates a new pair of the given EntitySet and BaseType.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.EntitySetTypePair.EntitySet">
            <summary>
            The EntitySet part of the pair.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.EntitySetTypePair.BaseType">
            <summary>
            The BaseType part of the pair.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.InitializerLockPair">
            <summary>
            Helper class that extends Tuple to give the Item1 and Item2 properties more meaningful names.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InitializerLockPair.#ctor(System.Action{System.Data.Entity.DbContext},System.Boolean)">
            <summary>
            Creates a new pair of the given database initializer delegate and a flag
            indicating whether or not it is locked.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InitializerLockPair.InitializerDelegate">
            <summary>
            The initializer delegate.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.InitializerLockPair.IsLocked">
            <summary>
            A flag indicating whether or not the initializer is locked and should not be changed.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalSqlNonSetQuery">
            <summary>
            Represents a raw SQL query against the context for any type where the results are never
            associated with an entity set and are never tracked.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalSqlQuery">
            <summary>
            Represents a raw SQL query against the context that may be for entities in an entity set
            or for some other non-entity element type.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlQuery.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalSqlQuery"/> class.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlQuery.AsNoTracking">
            <summary>
            If the query is would track entities, then this method returns a new query that will
            not track entities.
            </summary>
            <returns>A no-tracking query.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlQuery.GetEnumerator">
            <summary>
            Executes the query and returns an enumerator for the results.
            </summary>
            <returns>The query results.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlQuery.GetList">
            <summary>
            Throws an exception indicating that binding directly to a store query is not supported.
            </summary>
            <returns>
            Never returns; always throws.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlQuery.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that contains the SQL string that was set
            when the query was created.  The parameters are not included.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalSqlQuery.Sql">
            <summary>
            Gets the SQL query string,
            </summary>
            <value>The SQL query.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalSqlQuery.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalSqlQuery.ContainsListCollection">
            <summary>
            Returns <c>false</c>.
            </summary>
            <returns><c>false</c>.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlNonSetQuery.#ctor(System.Data.Entity.Internal.InternalContext,System.Type,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalSqlNonSetQuery"/> class.
            </summary>
            <param name="internalContext">The internal context.</param>
            <param name="elementType">Type of the element.</param>
            <param name="sql">The SQL.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlNonSetQuery.AsNoTracking">
            <summary>
            Returns this query since it can never be a tracking query.
            </summary>
            <returns>This instance.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlNonSetQuery.GetEnumerator">
            <summary>
            Executes the query and returns an enumerator for the results.
            </summary>
            <returns>The query results.</returns>
        </member>
        <member name="T:System.Data.Entity.Internal.InternalSqlSetQuery">
            <summary>
            Represents a raw SQL query against the context for entities in an entity set.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlSetQuery.#ctor(System.Data.Entity.Internal.Linq.IInternalSet,System.String,System.Boolean,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.InternalSqlSetQuery"/> class.
            </summary>
            <param name="set">The set.</param>
            <param name="sql">The SQL.</param>
            <param name="isNoTracking">if set to <c>true</c> then the entities will not be tracked.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlSetQuery.AsNoTracking">
            <summary>
            If the query is would track entities, then this method returns a new query that will
            not track entities.
            </summary>
            <returns>A no-tracking query.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.InternalSqlSetQuery.GetEnumerator">
            <summary>
            Executes the query and returns an enumerator for the results.
            </summary>
            <returns>The query results.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.InternalSqlSetQuery.IsNoTracking">
            <summary>
            Gets a value indicating whether this instance is set to track entities or not.
            </summary>
            <value>
            	<c>true</c> if this instance is no-tracking; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:System.Data.Entity.Internal.LazyInternalConnection">
            <summary>
            A LazyInternalConnection object manages information that can be used to create a DbConnection object and
            is responsible for creating that object and disposing it.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalConnection.#ctor(System.String)">
            <summary>
            Creates a new LazyInternalConnection.  The DbConnection object will be created lazily on demand and will be
            disposed when the LazyInternalConnection is disposed.
            </summary>
            <param name="nameOrConnectionString">Either the database name or a connection string.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalConnection.CreateObjectContextFromConnectionModel">
            <summary>
            Creates an <see cref="T:System.Data.Objects.ObjectContext"/> from metadata in the connection.  This method must
            only be called if ConnectionHasModel returns true.
            </summary>
            <returns>The newly created context.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalConnection.Dispose">
            <summary>
            Disposes the underlying DbConnection.
            Note that dispose actually puts the LazyInternalConnection back to its initial state such that
            it can be used again.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalConnection.Initialize">
            <summary>
            Creates the underlying <see cref="T:System.Data.Common.DbConnection"/> (which may actually be an <see cref="T:System.Data.EntityClient.EntityConnection"/>)
            if it does not already exist.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalConnection.TryInitializeFromAppConfig(System.String)">
            <summary>
            Searches the app.config/web.config file for a connection that matches the given name.
            The connection might be a store connection or an EF connection.
            </summary>
            <param name="name">The connection name.</param>
            <returns>True if a connection from the app.config file was found and used.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalConnection.Connection">
            <summary>
            Returns the underlying DbConnection, creating it first if it does not already exist.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalConnection.ConnectionKey">
            <summary>
            Returns a key consisting of the connection type and connection string.
            If this is an EntityConnection then the metadata path is included in the key returned.
            </summary>
            <value></value>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalConnection.ConnectionHasModel">
            <summary>
            Gets a value indicating whether the connection is an EF connection which therefore contains
            metadata specifying the model, or instead is a store connection, in which case it contains no
            model info.
            </summary>
            <value><c>true</c> if connection contain model info; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.LazyInternalContext">
            <summary>
            A LazyInternalContext is a concrete InternalContext type that will lazily create the underlying
            ObjectContext when needed.  The ObjectContext created is owned by the internal context and will be
            disposed when the internal context is disposed.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalContext.#ctor(System.Data.Entity.DbContext,System.Data.Entity.Internal.IInternalConnection,System.Data.Entity.Infrastructure.DbModel)">
            <summary>
            Constructs a LazyInternalContext for the given DbContext owner that will be initialized
            on first use.
            </summary>
            <param name="owner">The owner DbContext.</param>
            <param name="internalConnection">Responsible for creating a connection lazily when the context is used for the first time.</param>
            <param name="model">The model, or null if it will be created by convention</param>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalContext.GetObjectContextWithoutDatabaseInitialization">
            <summary>
            Returns the underlying ObjectContext without causing the underlying database to be created
            or the database initialization strategy to be executed.
            This is used to get a context that can then be used for database creation/initialization.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalContext.DisposeContext">
            <summary>
            Disposes the context. The underlying ObjectContext is also disposed.
            The connection to the database (DbConnection object) is also disposed if it was created by
            the context, otherwise it is not disposed.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalContext.InitializeContext">
            <summary>
            Initializes the underlying ObjectContext.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalContext.CreateModel">
            <summary>
              Creates an immutable, cacheable representation of the model defined by this builder.
              This model can be used to create an ObjectContext or can be passed to a DbContext constructor
              to create a DbContext for this model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.Entity.Internal.LazyInternalContext.CreateModelBuilder">
            <summary>
            Creates and configures the <see cref="T:System.Data.Entity.ModelConfiguration.ModelBuilder"/> instance that will be used to build the
            <see cref="T:System.Data.Entity.Infrastructure.DbModel"/>.
            </summary>
            <returns>The builder.</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalContext.ObjectContext">
            <summary>
            Returns the underlying ObjectContext.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalContext.ModelHash">
            <summary>
              An SHA256 hash of the store model (SSDL) that can be used later to check if the model has changed or not.
              Note that this is currently only supported for Code First.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalContext.Connection">
            <summary>
            The connection underlying this context.  Accessing this property does not cause the context
            to be initialized, only its connection.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalContext.DatabaseInitialized">
            <summary>
            Checks or sets whether or not the database has been initialized for this context with its current connection.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalContext.DefaultInitializer">
            <summary>
            Gets the default database initializer to use for this context if no other has been registered.
            For code first this property returns a <see cref="T:System.Data.Entity.Database.CreateDatabaseIfNotExists`1"/> instance.
            For database/model first, this property returns null.
            </summary>
            <value>The default initializer.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalContext.EntityValidators">
            <summary>
            Validators used to validate entities.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.LazyInternalContext.LazyLoadingEnabled">
            <summary>
            Gets or sets a value indicating whether lazy loading is enabled.
            If the ObjectContext exists, then this property acts as a wrapper over the flag stored there.
            If the ObjectContext has not been created yet, then we store the value given so we can later
            use it when we create the ObjectContext.  This allows the flag to be changed, for example in
            a DbContext constructor, without it causing the ObjectContext to be created.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.Linq.DbQueryReplacer">
            <summary>
            A LINQ expression visitor that finds DbQuery members used by nested-root lambdas
            in SelectMany expressions and replaces those instances with the extracted 
            ObejctQuery instance.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.DbQueryReplacer.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Replaces calls to DbContext.Set() with an expression for the equivalent ObjectQuery.
            </summary>
            <param name="node">The node to replace.</param>
            <returns>A new node, which may have had the replacement made.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.DbQueryReplacer.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Replaces a constant or property for a DbSet with the underlying ObjectQuery.
            </summary>
            <param name="node">The node to replace.</param>
            <returns>A new node, which may have had the replacement made.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.DbQueryReplacer.TryGetDbSetFromProperty(System.Linq.Expressions.MemberExpression,System.Object@)">
            <summary>
            Tries to get a DbSet object from the given property access expression.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.DbQueryReplacer.TryGetDbSetFromConstant(System.Linq.Expressions.MemberExpression,System.Object@)">
            <summary>
            Tries the get a DbSet from the given constant expression
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.DbQueryReplacer.GetConstantValue(System.Linq.Expressions.Expression)">
            <summary>
            Gets the constant value of the given expression.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.DbQueryReplacer.TryCreateDbSetAccess(System.Object,System.Linq.Expressions.Expression@)">
            <summary>
            Takes a <see cref="T:System.Data.Entity.DbSet`1"/> and creates an expression for the underlying <see cref="T:System.Data.Objects.ObjectQuery`1"/>.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.Linq.IInternalQuery">
            <summary>
            A non-generic interface implemented by <see cref="T:System.Data.Entity.Internal.Linq.InternalQuery`1"/> that allows operations on
            any query object without knowing the type to which it applies.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.Linq.IInternalSet">
            <summary>
            A non-generic interface implemented by <see cref="T:System.Data.Entity.Internal.Linq.InternalSet`1"/> that allows operations on
            any set object without knowing the type to which it applies.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.Linq.InternalQuery`1">
            <summary>
            An InternalQuery underlies every instance of DbSet and DbQuery.  It acts to lazily initialize a InternalContext as well
            as an ObjectQuery and EntitySet the first time that it is used.  The InternalQuery also acts to expose necessary
            information to other parts of the design in a controlled manner without adding a lot of internal methods and
            properties to the DbSet and DbQuery classes themselves.
            </summary>
            <typeparam name="TElement">The type of entity to query for.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalQuery`1.#ctor(System.Data.Entity.Internal.InternalContext)">
            <summary>
            Creates a new query that will be backed by the given InternalContext.
            </summary>
            <param name="internalContext">The backing context.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalQuery`1.#ctor(System.Data.Entity.Internal.InternalContext,System.Data.Objects.ObjectQuery)">
            <summary>
            Creates a new internal query based on the information in an existing query together with
            a new underlying ObjectQuery.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalQuery`1.ResetQuery">
            <summary>
            Resets the query to its uninitialized state so that it will be re-lazy initialized the next
            time it is used.  This allows the ObjectContext backing a DbContext to be switched out.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalQuery`1.Include(System.String)">
            <summary>
            Updates the underlying ObjectQuery with the given include path.
            </summary>
            <param name="path">The include path.</param>
            <returns>A new query containing the defined include path.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalQuery`1.AsNoTracking">
            <summary>
            Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <returns> A new query with NoTracking applied.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalQuery`1.InitializeQuery(System.String,System.Type)">
            <summary>
            Performs lazy initialization of the underlying ObjectContext, ObjectQuery, and EntitySet objects
            so that the query can be used.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalQuery`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of the underlying query, equivalent
            to ToTraceString on ObjectQuery.
            </summary>
            <returns>
            The query string.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalQuery`1.GetEnumerator">
            <summary>
            Gets the enumeration of this query causing it to be executed against the store.
            </summary>
            <returns>An enumerator for the query</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumeration of this query causing it to be executed against the store.
            </summary>
            <returns>An enumerator for the query</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalQuery`1.InternalContext">
            <summary>
            The underlying InternalContext.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalQuery`1.ObjectQuery">
            <summary>
            The underlying ObjectQuery.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalQuery`1.Expression">
            <summary>
            The LINQ query expression.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalQuery`1.Provider">
            <summary>
            The LINQ query provider;
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalQuery`1.ElementType">
            <summary>
            The IQueryable element type.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.#ctor(System.Data.Entity.Internal.InternalContext)">
            <summary>
            Creates a new query that will be backed by the given InternalContext.
            </summary>
            <param name="internalContext">The backing context.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.Create(System.Data.Entity.Internal.InternalContext)">
            <summary>
            Creates an instance of this class.  This method is used with CreateDelegate to cache a delegate
            that can create a generic instance without calling MakeGenericType every time.
            </summary>
            <param name="internalContext"></param>
            <returns>The set.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.ResetQuery">
            <summary>
            Resets the set to its uninitialized state so that it will be re-lazy initialized the next
            time it is used.  This allows the ObjectContext backing a DbContext to be switched out.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.Find(System.Object[])">
            <summary>
            Finds an entity with the given primary key values.
            If an entity with the given primary key values exists in the context, then it is
            returned immediately without making a request to the store.  Otherwise, a request
            is made to the store for an entity with the given primary key values and this entity,
            if found, is attached to the context and returned.  If no entity is found in the
            context or the store, then null is returned.
            </summary>
            <remarks>
            The ordering of composite key values is as defined in the EDM, which is in turn as defined in
            the designer, by the Code First fluent API, or by the DataMember attribute.
            </remarks>
            <param name="keyValues">The values of the primary key for the entity to be found.</param>
            <returns>The entity found, or null.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if multiple entities exist in the context with the primary key values given.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the type of entity is not part of the data model for this context.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the types of the key values do not match the types of the key values for the entity type to be found.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.FindInStateManager(System.Data.Entity.Internal.WrappedEntityKey)">
            <summary>
            Finds an entity in the state manager with the given primary key values, or returns null
            if no such entity can be found.  This includes looking for Added entities with the given
            key values.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.FindInStore(System.Data.Entity.Internal.WrappedEntityKey,System.String)">
            <summary>
            Finds an entity in the store with the given primary key values, or returns null
            if no such entity can be found.  This code is adapted from TryGetObjectByKey to
            include type checking in the query.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.Attach(System.Object)">
            <summary>
            Attaches the given entity to the context underlying the set.  That is, the entity is placed
            into the context in the Unchanged state, just as if it had been read from the database.
            </summary>
            <remarks>
            Attach is used to repopulate a context with an entity that is known to already exist in the database.
            SaveChanges will therefore not attempt to insert an attached entity into the database because
            it is assumed to already be there.
            Note that entities that are already in the context in some other state will have their state set
            to Unchanged.  Attach is a no-op if the entity is already in the context in the Unchanged state.
            This method is virtual so that it can be mocked.
            </remarks>
            <param name="entity">The entity to attach.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.Add(System.Object)">
            <summary>
            Adds the given entity to the context underlying the set in the Added state such that it will
            be inserted into the database when SaveChanges is called.
            </summary>
            <remarks>
            Note that entities that are already in the context in some other state will have their state set
            to Added.  Add is a no-op if the entity is already in the context in the Added state.
            This method is virtual so that it can be mocked.
            </remarks>
            <param name="entity">The entity to add.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.Remove(System.Object)">
            <summary>
            Marks the given entity as Deleted such that it will be deleted from the database when SaveChanges
            is called.  Note that the entity must exist in the context in some other state before this method
            is called.
            </summary>
            <remarks>
            Note that if the entity exists in the context in the Added state, then this method
            will cause it to be detached from the context.  This is because an Added entity is assumed not to
            exist in the database such that trying to delete it does not make sense.
            This method is virtual so that it can be mocked.
            </remarks>
            <param name="entity">The entity to remove.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.ActOnSet(System.Action,System.Data.EntityState,System.Object,System.String)">
            <summary>
            This method checks whether an entity is already in the context.  If it is, then the state
            is changed to the new state given.  If it isn't, then the action delegate is executed to
            either Add or Attach the entity.
            </summary>
            <param name="action">A delegate to Add or Attach the entity.</param>
            <param name="newState">The new state to give the entity if it is already in the context.</param>
            <param name="entity">The entity.</param>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.Create">
            <summary>
            Creates a new instance of an entity for the type of this set.
            Note that this instance is NOT added or attached to the set.
            The instance returned will be a proxy if the underlying context is configured to create
            proxies and the entity type meets the requirements for creating a proxy.
            </summary>
            <returns>The entity instance, which may be a proxy.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.Create(System.Type)">
            <summary>
            Creates a new instance of an entity for the type of this set or for a type derived
            from the type of this set.
            Note that this instance is NOT added or attached to the set.
            The instance returned will be a proxy if the underlying context is configured to create
            proxies and the entity type meets the requirements for creating a proxy.
            </summary>
            <param name="derivedEntityType">The type of entity to create.</param>
            <returns> The entity instance, which may be a proxy. </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.Initialize">
            <summary>
            Performs lazy initialization of the underlying ObjectContext, ObjectQuery, and EntitySet objects
            so that the query can be used.
            This method is virtual so that it can be mocked.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of the underlying query, equivalent
            to ToTraceString on ObjectQuery.
            </summary>
            <returns>
            The query string.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.Include(System.String)">
            <summary>
            Updates the underlying ObjectQuery with the given include path.
            </summary>
            <param name="path">The include path.</param>
            <returns>A new query containing the defined include path.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.AsNoTracking">
            <summary>
            Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext"/>.
            </summary>
            <returns> A new query with NoTracking applied.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.ExecuteSqlQuery(System.String,System.Boolean,System.Object[])">
            <summary>
            Executes the given SQL query against the database materializing entities into the entity set that
            backs this set.
            </summary>
            <param name="sql">The SQL quey.</param>
            <param name="asNoTracking">if <c>true</c> then the entities are not tracked, otherwise they are.</param>
            <param name="parameters">The parameters.</param>
            <returns>The query results.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.InternalSet`1.GetEnumerator">
            <summary>
            Gets the enumeration of this query causing it to be executed against the store.
            </summary>
            <returns>An enumerator for the query</returns>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalSet`1.Local">
            <summary>
            Gets the ObservableCollection representing the local view for the set based on this query.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalSet`1.ObjectQuery">
            <summary>
            The underlying ObjectQuery.  Accessing this property will trigger lazy initialization of the query.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalSet`1.EntitySetName">
            <summary>
            The underlying EntitySet name.  Accessing this property will trigger lazy initialization of the query.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalSet`1.QuotedEntitySetName">
            <summary>
            The underlying EntitySet name, quoted for ESQL.  Accessing this property will trigger lazy initialization of the query.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalSet`1.EntitySet">
            <summary>
            The underlying EntitySet.  Accessing this property will trigger lazy initialization of the query.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalSet`1.EntitySetBaseType">
            <summary>
            The base type for the underlying entity set.  Accessing this property will trigger lazy initialization of the query.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalSet`1.InternalContext">
            <summary>
            The underlying InternalContext.  Accessing this property will trigger lazy initialization of the query.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalSet`1.Expression">
            <summary>
            The LINQ query expression.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Linq.InternalSet`1.Provider">
            <summary>
            The LINQ query provider;
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.Linq.ReplacementDbQueryWrapper`1">
            <summary>
            Used to replace DbQuery instances with ObjectQuery instances by the DbQueryReplacer.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="T:System.Data.Entity.Internal.Linq.WrappingQueryProvider">
            <summary>
            This is a wrapping query provider for the EF that mostly delegates to the ObjectQuery provider but
            performs one type of expression replacement to translate the lambda in SelectMany calls.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.WrappingQueryProvider.#ctor(System.Data.Entity.Internal.InternalContext,System.Linq.IQueryProvider)">
            <summary>
            Creates a provider that wraps the given provider.
            </summary>
            <param name="provider">The provider to wrap.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.WrappingQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Delegates to the wrapped provider except returns instances of <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1"/> and 
            for SelectMany calls for which the lambda that contains a DbQuery reference this is replaced
            by one that contains a ObjectQuery reference.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.WrappingQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Delegates to the wrapped provider except returns instances of <see cref="T:System.Data.Entity.Infrastructure.DbQuery"/>.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.WrappingQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            By default, calls the same method on the wrapped provider.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Linq.WrappingQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            By default, calls the same method on the wrapped provider.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.ObservableBackedBindingList`1">
            <summary>
            Extends <see cref="T:System.Data.Entity.Internal.SortableBindingList`1"/> to create a sortable binding list that stays in
            sync with an underlying <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.  That is, when items are added
            or removed from the binding list, they are added or removed from the ObservableCollecion, and
            vice-versa.
            </summary>
            <typeparam name="T">The list element type.</typeparam>
        </member>
        <member name="T:System.Data.Entity.Internal.SortableBindingList`1">
            <summary>
            An extended BindingList implementation that implements sorting.
            This class was adapted from the LINQ to SQL class of the same name.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:System.Data.Entity.Internal.SortableBindingList`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.SortableBindingList`1"/> class with the
            the given underlying list.  Note that sorting is dependent on having an actual <see cref="T:System.Collections.Generic.List`1"/>
            rather than some other ICollection implementation.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.SortableBindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Applies sorting to the list.
            </summary>
            <param name="prop">The property to sort by.</param>
            <param name="direction">The sort direction.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.SortableBindingList`1.RemoveSortCore">
            <summary>
            Stops sorting.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.SortableBindingList`1.IsSortedCore">
            <summary>
            Gets a value indicating whether this list is sorted.
            </summary>
            <value>
            	<c>true</c> if this instance is sorted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Data.Entity.Internal.SortableBindingList`1.SortDirectionCore">
            <summary>
            Gets the sort direction.
            </summary>
            <value>The sort direction.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.SortableBindingList`1.SortPropertyCore">
            <summary>
            Gets the sort property being used to sort.
            </summary>
            <value>The sort property.</value>
        </member>
        <member name="P:System.Data.Entity.Internal.SortableBindingList`1.SupportsSortingCore">
            <summary>
            Returns <c>true</c> indicating that this list supports sorting.
            </summary>
            <value><c>true</c>.</value>
        </member>
        <member name="T:System.Data.Entity.Internal.SortableBindingList`1.PropertyComparer">
            <summary>
            Implements comparing for the <see cref="T:System.Data.Entity.Internal.SortableBindingList`1"/> implementation.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.SortableBindingList`1.PropertyComparer.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Internal.SortableBindingList`1.PropertyComparer"/> class
            for sorting the list.
            </summary>
            <param name="prop">The property to sort by.</param>
            <param name="direction">The sort direction.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.SortableBindingList`1.PropertyComparer.Compare(`0,`0)">
            <summary>
            Compares two instances of items in the list.
            </summary>
            <param name="left">The left item to compare.</param>
            <param name="right">The right item to compare.</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.Entity.Internal.SortableBindingList`1.PropertyComparer.CanSort(System.Type)">
            <summary>
            Determines whether this instance can sort for the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if this instance can sort for the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.SortableBindingList`1.PropertyComparer.CanSortWithIComparable(System.Type)">
            <summary>
            Determines whether this instance can sort for the specified type using IComparable.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if this instance can sort for the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.SortableBindingList`1.PropertyComparer.CanSortWithToString(System.Type)">
            <summary>
            Determines whether this instance can sort for the specified type using ToString.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if this instance can sort for the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.ObservableBackedBindingList`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
            <summary>
            Initializes a new instance of a binding list backed by the given <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>
            </summary>
            <param name="obervableCollection">The obervable collection.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.ObservableBackedBindingList`1.AddNewCore">
            <summary>
            Creates a new item to be added to the binding list.
            </summary>
            <returns>The new item.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.ObservableBackedBindingList`1.CancelNew(System.Int32)">
            <summary>
            Cancels adding of a new item that was started with AddNew.
            </summary>
            <param name="itemIndex">Index of the item.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.ObservableBackedBindingList`1.ClearItems">
            <summary>
            Removes all items from the binding list and underlying ObservableCollection.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.ObservableBackedBindingList`1.EndNew(System.Int32)">
            <summary>
            Ends the process of adding a new item that was started with AddNew.
            </summary>
            <param name="itemIndex">Index of the item.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.ObservableBackedBindingList`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts the item into the binding list at the given index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.ObservableBackedBindingList`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.ObservableBackedBindingList`1.SetItem(System.Int32,`0)">
            <summary>
            Sets the item into the list at the given position.
            </summary>
            <param name="index">The index to insert at.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.ObservableBackedBindingList`1.ObservableCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Event handler to update the binding list when the underlying observable collection changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">Data indicating how the collection has changed.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.ObservableBackedBindingList`1.AddToObservableCollection(`0)">
            <summary>
            Adds the item to the underlying observable collection.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.ObservableBackedBindingList`1.RemoveFromObservableCollection(`0)">
            <summary>
            Removes the item from the underlying from observable collection.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:System.Data.Entity.Internal.Validation.DataAnnotationValidator">
            <summary>
            Validates a property, complex property or an entity  using data annotation validation attributes the property 
            or the complex/entity type is decorated with.
            </summary>
            <remarks>
            Note that this class is used for validating primitive properties using attributes declared on the property (property
            level validation) and complex properties and entities using attributes declared on the type (type level validation).
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Internal.Validation.IValidator">
            <summary>
            Abstracts different kind of validators used to validate entities and properties.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.IValidator.Validate(System.Data.Entity.Internal.Validation.EntityValidationContext,System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
            Validates an entity or a property of an entity.
            </summary>
            <param name="entityValidationContext">Validation context. Never null.</param>
            <param name="property">Property to validate. Can be null for entity level validation.</param>
            <returns>Validation error as IEnumerable&lt;<see cref="T:System.Data.Entity.Validation.DbValidationError"/>&gt;. Empty if no errors. Never null.</returns>
        </member>
        <member name="F:System.Data.Entity.Internal.Validation.DataAnnotationValidator._validationAttribute">
            <summary>
            Validation attribute used to validate a property or an entity. 
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.DataAnnotationValidator.#ctor(System.ComponentModel.DataAnnotations.ValidationAttribute)">
            <summary>
            Creates an instance of <see cref="T:System.Data.Entity.Internal.Validation.DataAnnotationValidator"/> class.
            </summary>
            <param name="validationAttribute">
            Validation attribute used to validate a property or an entity.
            </param>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.DataAnnotationValidator.Validate(System.Data.Entity.Internal.Validation.EntityValidationContext,System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
            Validates a property or an entity.
            </summary>
            <param name="entityValidationContext">Validation context. Never null.</param>
            <param name="property">Property to validate. Null for entity validation. Not null for property validation.</param>
            <returns>Validation error as IEnumerable&lt;<see cref="T:System.Data.Entity.Validation.DbValidationError"/>&gt;. Empty if no errors. Never null.</returns>
        </member>
        <member name="T:System.Data.Entity.Internal.Validation.EntityValidationContext">
            <summary>
            Contains information needed to validate an entity or its properties.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Internal.Validation.EntityValidationContext._entityEntry">
            <summary>
            The entity being validated or the entity that owns the property being validated.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Internal.Validation.EntityValidationContext._externalValidationContexts">
            <summary>
            External contexts needed for validation.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidationContext.#ctor(System.Data.Entity.Internal.InternalEntityEntry,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of EntityValidationContext class.
            </summary>
            <param name="entityEntry">
            The entity being validated or the entity that owns the property being validated.
            </param>
            <param name="externalValidationContexts">
            External contexts needed for validation.
            </param>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidationContext.GetExternalValidationContext``1">
            <summary>
            Returns external context for validation.
            </summary>
            <typeparam name="TContext">Type of the validation context to be returned.</typeparam>
            <returns>
            An external validation context of the requested <typeparamref name="TContext"/> type.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Internal.Validation.EntityValidationContext.InternalEntity">
            <summary>
            Gets the entity being validated or the entity that owns the property being validated.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.Validation.EntityValidator">
            <summary>
            Validator used to validate an entity of a given Edm EntityType.
            </summary>
            <remarks>
            This is a top level, composite validator. This is also an entry point to getting an entity
            validated as validation of an entity is always started by calling Validate method on this type. 
            Note that it does not implement <see cref="T:System.Data.Entity.Internal.Validation.IValidator"/> interface. 
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Internal.Validation.IPropertyValidatorAccessor">
            <summary>
            Allows to get a validator for a child property.
            </summary> 
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.IPropertyValidatorAccessor.GetPropertyValidator(System.String)">
            <summary>
            Returns a validator for a child property.
            </summary>
            <param name="propertyName">Name of the child property for which to return a validator.</param>
            <returns>
            Validator for a child property. Possibly null if there is no validators for requested property.
            </returns>
        </member>
        <member name="F:System.Data.Entity.Internal.Validation.EntityValidator._baseTypeEntityValidator">
            <summary>
            Entity validator for the base entity type.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Internal.Validation.EntityValidator._entityLevelValidators">
            <summary>
            Entity type level validators.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Internal.Validation.EntityValidator._propertyValidators">
            <summary>
            Property validators.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidator.#ctor(System.Data.Entity.Internal.Validation.EntityValidator,System.Collections.Generic.IEnumerable{System.Data.Entity.Internal.Validation.IValidator},System.Collections.Generic.IEnumerable{System.Data.Entity.Internal.Validation.PropertyValidator})">
            <summary>
            Creates an instance <see cref="T:System.Data.Entity.Internal.Validation.EntityValidator"/> for a given EDM EntityType.
            </summary>
            <param name="baseTypeEntityValidator">
            EntityValidator for the closest base type with validation this entity derive from. Can be null for entities 
            that do not derive from any type or any of the ascendants does not have any validation.
            </param>
            <param name="entityLevelValidators">Entity type level validators.</param>
            <param name="propertyValidators">Property validators.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidator.Validate(System.Data.Entity.Internal.Validation.EntityValidationContext)">
            <summary>
            Validates an entity.
            </summary>
            <param name="entityValidationContext">Entity validation context.</param>
            <returns><see cref="T:System.Data.Entity.Validation.DbEntityValidationResult"/> instance. Never null.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidator.ValidateProperties(System.Data.Entity.Internal.Validation.EntityValidationContext,System.Collections.Generic.List{System.Data.Entity.Validation.DbValidationError})">
            <summary>
            Validates entity properties. Any validation errors will be added to <paramref name="validationErrors"/> collection.
            </summary>
            <param name="entityValidationContext">
            Validation context. Must not be null.
            </param>
            <param name="validationErrors">
            Collection of validation errors. Any validation errors will be added to it.
            </param>
            <remarks>
            Note that <paramref name="validationErrors"/> will be modified by this method. Errors should be only added, never 
            removed or changed. Taking a collection as a modifiable parameter saves a couple of memory allocations and a merge of 
            validation error lists per entity.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidator.RunTypeLevelValidation(System.Data.Entity.Internal.Validation.EntityValidationContext,System.Collections.Generic.List{System.Data.Entity.Validation.DbValidationError})">
            <summary>
            Validates an entity with type level validation mechanisms.
            </summary>
            <param name="entityValidationContext">
            Validation context.
            </param>
            <param name="validationErrors">
            Collection of validation errors. Any validation errors will be added to it.
            </param>
            <remarks>
            Note that <paramref name="validationErrors"/> will be modified by this method. Errors should be only added, never 
            removed or changed. Taking a collection as a modifiable parameter saves a couple of memory allocations and a merge of 
            validation error lists per entity.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidator.GetPropertyValidator(System.String)">
            <summary>
            Returns a validator for a child property.
            </summary>
            <param name="propertyName">Name of the child property for which to return a validator.</param>
            <returns>
            Validator for a child property. Possibly null if there is no validators for requested property.
            </returns>
        </member>
        <member name="T:System.Data.Entity.Internal.Validation.EntityValidatorBuilder">
            <summary>
            Builds validators using ValidationAttribute annotations specified for entities and properties in the model 
            as well as based on presence of IValidatableObject implementation on entity and complex type clr types.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidatorBuilder.BuildValidators(System.Data.Edm.EdmModel)">
            <summary>
            Builds validators for all entity types in the model. 
            </summary>
            <param name="model">
            <see cref="T:System.Data.Edm.EdmModel"/> used to check for ValidationAttribute annotations.
            </param>
            <returns>
            A collection of <see cref="T:System.Data.Entity.Internal.Validation.EntityValidator"/>s keyed by entity clr type. Note that if no validation for
            for a given entity has been specified there will not be an entry for this entity in the collection.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidatorBuilder.BuildEntityValidator(System.Data.Edm.EdmEntityType,System.Boolean)">
            <summary>
            Builds an <see cref="T:System.Data.Entity.Internal.Validation.EntityValidator"/> for the given <paramref name="entityType"/>.
            </summary>
            <param name="entityType">
            <see cref="T:System.Data.Edm.EdmEntityType"/> to build the validator for.</param>
            <param name="targetType">
            Whether the currently processed type is the target type or one of the ancestor types.
            </param>
            <returns>
            <see cref="T:System.Data.Entity.Internal.Validation.EntityValidator"/> for the given <paramref name="entityType"/>. Possibly null 
            if no validation has been specified for this entity type.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidatorBuilder.BuildValidatorsForProperties(System.Collections.Generic.IEnumerable{System.Data.Edm.EdmStructuralMember})">
            <summary>
            Build validators for the <paramref name="properties"/>.
            </summary>
            <param name="properties">Properties to build validators for.</param>
            <returns>A list of validators. Possibly emtpy. Never null.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidatorBuilder.BuildPropertyValidator(System.Data.Edm.EdmStructuralMember)">
            <summary>
            Builds a validator for the given <paramref name="property"/>.
            </summary>
            <param name="property">
            <see cref="T:System.Data.Edm.EdmProperty"/> to build the validator for.
            </param>
            <returns>
            <see cref="T:System.Data.Entity.Internal.Validation.PropertyValidator"/> for the given <paramref name="property"/>. Possibly null
            if no validation has been specified for this property.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidatorBuilder.BuildPropertyValidators(System.Data.Edm.EdmStructuralMember,System.Collections.Generic.List{System.Data.Entity.Internal.Validation.IValidator}@,System.Collections.Generic.List{System.Data.Entity.Internal.Validation.IValidator}@)">
            <summary>
            Builds validators for the <paramref name="property"/>. If the property is 
            a complex type, type level validators will be built here as well.
            </summary>
            <param name="property">Property to build validators for. Must not be null.</param>
            <param name="propertyValidators">
            List of validators built for this property. Never null may be empty.
            </param>
            <param name="propertyTypeValidators">
            List of validators built for the property type. Never null, must be empty for non complex 
            properties, may be non-empty for complex properties.
            </param>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidatorBuilder.BuildPropertyTypeValidators(System.Data.Edm.EdmProperty,System.Collections.Generic.List{System.Data.Entity.Internal.Validation.IValidator})">
            <summary>
            Builds type level validators for a complex type.
            </summary>
            <param name="edmProperty">Edm property whose complex type type level validation is built for.</param>
            <param name="propertyTypeValidators">
            List of validators built for the property type. Validators will be added to this list.
            </param>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.EntityValidatorBuilder.BuildDataAnnotationValidators(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute})">
            <summary>
            Given <paramref name="validationAttributes"/> builds <see cref="T:System.Data.Entity.Internal.Validation.DataAnnotationValidator"/>s.
            </summary>
            <param name="validationAttributes">Validation attributes used to build validators.</param>
            <returns>
            A list of <see cref="T:System.Data.Entity.Internal.Validation.DataAnnotationValidator"/>s built from <paramref name="validationAttributes"/>. 
            Possibly empty, never null. 
            </returns>
        </member>
        <member name="T:System.Data.Entity.Internal.Validation.IPropertyValidatorAccessorContracts">
            <summary>
            Contracts for <see cref="T:System.Data.Entity.Internal.Validation.IPropertyValidatorAccessor"/> interface.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.IPropertyValidatorAccessorContracts.System#Data#Entity#Internal#Validation#IPropertyValidatorAccessor#GetPropertyValidator(System.String)">
            <summary>
            Contract for IPropertyValidatorAccessor.GetPropertyValidator method.
            </summary>
            <param name="propertyName">Property name.</param>
            <returns>Nothing - always throws.</returns>
        </member>
        <member name="T:System.Data.Entity.Internal.Validation.IValidatorContracts">
            <summary>
            Contracts for <see cref="T:System.Data.Entity.Internal.Validation.IValidator"/> interface.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.IValidatorContracts.System#Data#Entity#Internal#Validation#IValidator#Validate(System.Data.Entity.Internal.Validation.EntityValidationContext,System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
            Contract for IValidator.Validate method.
            </summary>
            <param name="entityValidationContext">Validation context.</param>
            <param name="property">Property.</param>
            <returns>Nothing - alway throws.</returns>
        </member>
        <member name="T:System.Data.Entity.Internal.Validation.PropertyValidator">
            <summary>
            Validates a primitive property of a given EDM property type.
            </summary>
            <remarks>
            This is a composite validator for a property of an entity or a complex type. 
            </remarks>
        </member>
        <member name="F:System.Data.Entity.Internal.Validation.PropertyValidator._propertyValidators">
            <summary>
            Validators used to validate this property.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Internal.Validation.PropertyValidator._propertyTypeValidators">
            <summary>
            Validators used to validate this property type (type level validators for complex types).
            </summary>
        </member>
        <member name="F:System.Data.Entity.Internal.Validation.PropertyValidator._propertyName">
            <summary>
            Name of the property to validate
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.PropertyValidator.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Internal.Validation.IValidator},System.Collections.Generic.IEnumerable{System.Data.Entity.Internal.Validation.IValidator})">
            <summary>
            Creates an instance of <see cref="T:System.Data.Entity.Internal.Validation.PropertyValidator"/> for a given EDM property type.
            </summary>
            <param name="edmProperty">EDM property type the validator is able to validate.</param>
            <param name="propertyValidators">Validators used to validate this property.</param>
            <param name="propertyTypeValidators">
            Type level validators used to validate this property. Used only for complex types.
            </param>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.PropertyValidator.Validate(System.Data.Entity.Internal.Validation.EntityValidationContext,System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
            Validates a property.
            </summary>
            <param name="entityValidationContext">Validation context. Never null.</param>
            <param name="property">Property to validate. Never null.</param>
            <returns>Validation errors as IEnumerable&lt;<see cref="T:System.Data.Entity.Validation.DbValidationError"/>&gt;. Empty if no errors. Never null.</returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.PropertyValidator.ValidateProperty(System.Data.Entity.Internal.Validation.EntityValidationContext,System.Data.Entity.Internal.InternalMemberEntry,System.Collections.Generic.List{System.Data.Entity.Validation.DbValidationError})">
            <summary>
            Validates property and its child properties if the property is a complex property.
            </summary>
            <param name="entityValidationContext">Validation context.</param>
            <param name="property">Property to validate.</param>
            <param name="validationErrors">Collection of validation errors. Any validation errors will be added to it.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.PropertyValidator.ValidateComplexProperty(System.Data.Entity.Internal.Validation.EntityValidationContext,System.Data.Entity.Internal.Validation.PropertyValidator,System.Data.Entity.Internal.InternalPropertyEntry)">
            <summary>
            Drills into a complex property and validates it. 
            </summary>
            <param name="entityValidationContext">Validation context.</param>
            <param name="complexPropertyValidator">Validator used to validate the complex property.</param>
            <param name="parentProperty">Property the complex property to be validated is a child of.</param>
            <returns>
            Validation errors as IEnumerable&lt;<see cref="T:System.Data.Entity.Validation.DbValidationError"/>&gt;. Empty if no errors or the complex property was null. Never null.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.PropertyValidator.RunTypeLevelValidation(System.Data.Entity.Internal.Validation.EntityValidationContext,System.Data.Entity.Internal.InternalMemberEntry,System.Collections.Generic.List{System.Data.Entity.Validation.DbValidationError})">
            <summary>
            Validates a complex property with type level validation.
            </summary>
            <param name="entityValidationContext">Validation context.</param>
            <param name="property">Property whose type validation will be used run.</param>
            <param name="validationErrors">Collection of validation errors. Any validation errors will be added to it.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.PropertyValidator.System#Data#Entity#Internal#Validation#IPropertyValidatorAccessor#GetPropertyValidator(System.String)">
            <summary>
            Returns a validator for a child property.
            </summary>
            <param name="propertyName">Name of the child property for which to return a validator.</param>
            <returns>
            Validator for a child property. Possibly null if there is no validators for requested property.
            </returns>
        </member>
        <member name="P:System.Data.Entity.Internal.Validation.PropertyValidator.PropertyName">
            <summary>
            Gets the name of the property the validator was created for.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.Validation.PropertyValidator.ChildPropertyValidators">
            <summary>
            Gets validators for child properties.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Internal.Validation.ValidatableObjectValidator">
            <summary>
            Validates entities or complex types implementing IValidatableObject interface.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.ValidatableObjectValidator.Validate(System.Data.Entity.Internal.Validation.EntityValidationContext,System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
            Validates an entity or a complex type implementing IValidatableObject interface.
            This method is virtual to allow mocking.
            </summary>
            <param name="entityValidationContext">Validation context. Never null.</param>
            <param name="property">
            Property to validate. Null if this is the entity that will be validated. Never null if this 
            is the complex type that will be validated.
            </param>
            <returns>Validation error as IEnumerable&lt;<see cref="T:System.Data.Entity.Validation.DbValidationError"/>&gt;. Empty if no errors. Never null.</returns>
            <remarks>
            Note that <paramref name="property"/> is used to figure out what needs to be validated. If it not null the complex type 
            will be validated otherwise the entity will be validated.
            Also if this is an IValidatableObject complex type but the instance (.CurrentValue) is null we won't validate anything and 
            will not return any errors. The reason for this is that Validation is supposed to validate using information the user 
            provided and not some additional implicit rules. (ObjectContext will throw for operations that involve null complex properties).
            </remarks>
        </member>
        <member name="T:System.Data.Entity.Internal.Validation.ValidationProvider">
            <summary>
            Used to cache and retrieve generated validators and to create context for validating entities or properties.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Internal.Validation.ValidationProvider._entityValidators">
            <summary>
            Collection of validators keyed by an entity CLR type
            </summary>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.ValidationProvider.#ctor(System.Collections.Generic.Dictionary{System.Type,System.Data.Entity.Internal.Validation.EntityValidator})">
            <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Internal.Validation.ValidationProvider"/> class.
            </summary>
            <param name="entityValidators">Validators cached and returned by this provider.</param>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.ValidationProvider.GetEntityValidator(System.Data.Entity.Internal.InternalEntityEntry)">
            <summary>
            Returns a validator to validate <paramref name="entityEntry"/>.
            </summary>
            <param name="entityEntry">Entity the validator is requested for.</param>
            <returns>
            <see cref="T:System.Data.Entity.Internal.Validation.EntityValidator"/> to validate <paramref name="entityEntry"/>. Possibly null if no validation 
            has been specified for the entity.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.ValidationProvider.GetPropertyValidator(System.Data.Entity.Internal.InternalEntityEntry,System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
            Returns a validator to validate <paramref name="property"/>.
            </summary>
            <param name="property">Navigation property the validator is requested for.</param>
            <returns>
            Validator to validate <paramref name="property"/>. Possibly null if no validation 
            has been specified for the requested property.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.ValidationProvider.GetValidatorForProperty(System.Data.Entity.Internal.Validation.EntityValidator,System.Data.Entity.Internal.InternalMemberEntry)">
            <summary>
            Gets a validator for the <paramref name="memberEntry"/>.
            </summary>
            <param name="entityValidator">Entity validator.</param>
            <param name="memberEntry">Property to get a validator for.</param>
            <returns>
            Validator to validate <paramref name="memberEntry"/>. Possibly null if there is no validation for the <paramref name="memberEntry"/>.
            </returns>
            <remarks>
            For complex properties this method walks up the type hierarchy to get to the entity level and then goes down and gets a validator for 
            the child property that is an ancestor of the property to validate. If a validator returned for an ancestor is null it means that there 
            is no validation defined beneath and the method just propagates (and eventually returns) null.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Internal.Validation.ValidationProvider.GetEntityValidationContext(System.Data.Entity.Internal.InternalEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Creates <see cref="T:System.Data.Entity.Internal.Validation.EntityValidationContext"/> for <paramref name="entityEntry"/>.
            </summary>
            <param name="entityEntry">Entity entry for which a validation context needs to be created.</param>
            <param name="items">User defined dictionary of items that will be passed to validators. Can be null.</param>
            <returns>An instance of <see cref="T:System.Data.Entity.Internal.Validation.EntityValidationContext"/> class.</returns>
        </member>
        <member name="T:System.Data.Entity.Internal.WrappedEntityKey">
            <summary>
            A wrapper around EntityKey that allows key/values pairs that have null values to
            be used.  This allows Added entities with null key values to be searched for in
            the ObjectStateManager.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Internal.WrappedEntityKey._keyValuePairs">
            The key name/key value pairs, where some key values may be null
        </member>
        <member name="M:System.Data.Entity.Internal.WrappedEntityKey.#ctor(System.Data.Metadata.Edm.EntitySet,System.String,System.Object[],System.String)">
            <summary>
            Creates a new WrappedEntityKey instance.
            </summary>
            <param name="entitySet">The entity set that the key belongs to.</param>
            <param name="entitySetName">The fully qualified name of the given entity set.</param>
            <param name="keyValues">The key values, which may be null or contain null values.</param>
            <param name="keyValuesParamName">The name of the parameter passed for keyValue by the user, which is used when throwing exceptions.</param>
        </member>
        <member name="P:System.Data.Entity.Internal.WrappedEntityKey.HasNullValues">
            <summary>
            True if any of the key values are null, which means that the EntityKey will also be null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.WrappedEntityKey.EntityKey">
            <summary>
            An actual EntityKey, or null if any of the key values are null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Internal.WrappedEntityKey.KeyValuePairs">
            <summary>
            The key name/key value pairs of the key, in which some of the key values may be null.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelBuilderVersionAttribute">
            <summary>
            This attribute can be applied to a class derived from <see cref="T:System.Data.Entity.DbContext"/> to set which
            version of the DbContext and <see cref="T:System.Data.Entity.ModelConfiguration.ModelBuilder"/> conventions should be used when building
            a model from code--also know as "Code First". See the <see cref="P:System.Data.Entity.ModelBuilderVersionAttribute.ModelBuilderVersion"/>
            enumeration for details about ModelBuilder versions.
            </summary>
            <remarks>
            If the attribute is missing from DbContextthen DbContext will always use the latest
            version of the conventions.  This is equivalent to using ModelBuilderVersion.Latest.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.ModelBuilderVersionAttribute.#ctor(System.Data.Entity.ModelBuilderVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.ModelBuilderVersionAttribute"/> class.
            </summary>
            <param name="modelBuilderVersion">The <see cref="T:System.Data.Entity.ModelConfiguration.ModelBuilder"/> conventions version to use.</param>
        </member>
        <member name="P:System.Data.Entity.ModelBuilderVersionAttribute.ModelBuilderVersion">
            <summary>
            Gets the <see cref="T:System.Data.Entity.ModelConfiguration.ModelBuilder"/> conventions version.
            </summary>
            <value>The <see cref="T:System.Data.Entity.ModelConfiguration.ModelBuilder"/> conventions version.</value>
        </member>
        <member name="T:System.Data.Entity.ModelBuilderVersion">
            <summary>
            A value from this enumeration can be provided directly to the <see cref="T:System.Data.Entity.ModelConfiguration.ModelBuilder"/>
            class or can be used in the <see cref="T:System.Data.Entity.ModelBuilderVersionAttribute"/> applied to
            a class derived from <see cref="T:System.Data.Entity.DbContext"/>. The value used defines which version of
            the DbContext and ModelBuilder conventions should be used when building a model from
            code--also know as "Code First".
            </summary>
            <remarks>
            Using ModelBuilderVersion.Latest ensures that all the latest functionality is available
            when upgrading to a new release of the Entity Framework. However, it may result in an
            application behaving differently with the new release than it did with a previous release.
            This can be avoided by using a specific version of the conventions, but if a version
            other than the latest is set then not all the latest functionality will be available.
            </remarks>
        </member>
        <member name="F:System.Data.Entity.ModelBuilderVersion.Latest">
            <summary>
            Indicates that the latest version of the <see cref="T:System.Data.Entity.ModelConfiguration.ModelBuilder"/> and 
            <see cref="T:System.Data.Entity.DbContext"/> conventions should be used.
            </summary>
        </member>
        <member name="F:System.Data.Entity.ModelBuilderVersion.Ctp5">
            <summary>
            Indicates that the version of the <see cref="T:System.Data.Entity.ModelConfiguration.ModelBuilder"/> and 
            <see cref="T:System.Data.Entity.DbContext"/> conventions shipped with Entity Framework Feature CTP5
            should be used.
            </summary>
        </member>
        <member name="P:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration.IsReplaceable">
            <summary>
            True if this configuration can be replaced in the model configuration, false otherwise
            This is only set to true for configurations that are registered automatically via the DbContext
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Design.PluralizationServices.BidirectionalDictionary`2">
            <summary>
              This class provide service for both the singularization and pluralization, it takes the word pairs
              in the ctor following the rules that the first one is singular and the second one is plural.
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Design.PluralizationServices.PluralizationService.CreateService(System.Globalization.CultureInfo)">
            <summary>
              Factory method for PluralizationService. Only support english pluralization.
              Please set the PluralizationService on the System.Data.Entity.Design.EntityModelSchemaGenerator
              to extend the service to other locales.
            </summary>
            <param name = "culture">CultureInfo</param>
            <returns>PluralizationService</returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Design.PluralizationServices.EnglishPluralizationService.Capitalize(System.String,System.Func{System.String,System.String})">
            <summary>
              captalize the return word if the parameter is capitalized
              if word is "Table", then return "Tables"
            </summary>
            <param name = "word"></param>
            <param name = "action"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Design.PluralizationServices.EnglishPluralizationService.GetSuffixWord(System.String,System.String@)">
            <summary>
              separate one combine word in to two parts, prefix word and the last word(suffix word)
            </summary>
            <param name = "word"></param>
            <param name = "prefixWord"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Design.PluralizationServices.EnglishPluralizationService.IsNoOpWord(System.String)">
            <summary>
              return true when the word is "[\s]*" or leading or tailing with spaces
              or contains non alphabetical characters
            </summary>
            <param name = "word"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Design.PluralizationServices.EnglishPluralizationService.AddWord(System.String,System.String)">
            <summary>
              This method allow you to add word to internal PluralizationService of English.
              If the singluar or the plural value was already added by this method, then an ArgumentException will be thrown.
            </summary>
            <param name = "singular"></param>
            <param name = "plural"></param>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Mappers.NavigationPropertyMapper">
            <summary>
              Handles mapping from a CLR property to an EDM assocation and nav. prop.
            </summary>
        </member>
        <member name="P:System.Data.Entity.ModelConfiguration.Configuration.Properties.Navigation.NavigationPropertyConfiguration.IsNavigationPropertyDeclaringTypePrincipal">
            <summary>
            True if the NavigationProperty's declaring type is the principal end, false if it is not, null if it is not known
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.Edm.NavigationPropertyNameForeignKeyDiscoveryConvention">
            <summary>
              Convention for discoverying Foreign Key properties whose names are a combination
              of the dependent navigation property names and the principal type's key property names.
            
              E.g. Principal.Id == Dependent.NavId
            
              The preconditions for this convention are:
              1) No existing constraint has been specified for this association.
              2) The principal and dependent ends are able to be determined.
              3) The principal type has a key defined (from previous convention/configuration)
              4) There is an associated navigation property from dependent to principal.
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.Edm.PrimaryKeyNameForeignKeyDiscoveryConvention">
            <summary>
              Convention for discoverying Foreign Key properties whose names match
              the names of the principal's key properties.
            
              E.g. Principal.PrincipalKey == Dependent.PrincipalKey
            
              The preconditions for this convention are:
              1) No existing constraint has been specified for this association.
              2) The principal and dependent ends are able to be determined.
              3) The principal type has a key defined (from previous convention/configuration)
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Conventions.Edm.TypeNameForeignKeyDiscoveryConvention">
            <summary>
              Convention for discoverying Foreign Key properties whose names are a combination
              of the principal type name and the principal type's key property names.
            
              E.g. Principal.Id == Dependent.PrincipalId
            
              The preconditions for this convention are:
              1) No existing constraint has been specified for this association.
              2) The principal and dependent ends are able to be determined.
              3) The principal type has a key defined (from previous convention/configuration)
            </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Edm.EdmAssociationTypeExtensions.TryGuessPrincipalAndDependentEnds(System.Data.Edm.EdmAssociationType,System.Data.Edm.EdmAssociationEnd@,System.Data.Edm.EdmAssociationEnd@)">
            <summary>
              Attempt to determine the principal and dependent ends of this association.
            
              The following table illustrates the solution space.
             
              Source | Target || Prin  | Dep   |
              -------|--------||-------|-------|
              1      | 1      || -     | -     | 
              1      | 0..1   || Sr    | Ta    |
              1      | *      || Sr    | Ta    |
              0..1   | 1      || Ta    | Sr    |
              0..1   | 0..1   || -     | -     |
              0..1   | *      || Sr    | Ta    |
              *      | 1      || Ta    | Sr    |
              *      | 0..1   || Ta    | Sr    |
              *      | *      || -     | -     |
            </summary>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Utilities.RuntimeFailureMethods">
            <summary>
              Code Contracts hook methods - Called when contracts fail. Here we detect the most common preconditions
              so we can throw the correct exceptions. It also means that we can write preconditions using the
              simplest Contract.Requires() form.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Validation.DataAnnotationConfigurationOverridesConvention">
            <summary>
            This convention updates selected validation attributes to match configuration changes made by the user in OnModelCreating method
            and/or changes made by other conventions. This convention relies on facets and should be run after factes have already been updated
            with configuration overrides made by the user.
            The convention touches the following attributes:
            RequiredAttribute       * the attribute is removed if the corresponding property was configured as optional 
                                      (.IsOptional() / .Nullable facet set to true)
            StringLengthAttribute   * the attribute is recreated with a new maximum length if the maximum length has been changed (.HasMaxLength() 
                                      / .MaxLength facet). If the attribute being processed is a subclass of the StringLengthAttribute the 
                                      NotSupportedException is thrown since it is not really possible to recreate the derived attribute with
                                      all the properties set as in the original instance.
                                    * the attribute is removed if .IsMaxLength has been set to true. NotSupportedException is thrown when 
                                      .IsMaxLength has been set to true but the value of .MinimumLength is greater than 0 or the attribute 
                                      being processed is a subclass of the StringLengthAttribute
            MaxLength               * Length property is updated if the maximum length was changed (.HasMaxLength() / .MaxLength facet)
                                    * the attribute is removed if .IsMaxLength has been set to true. NotSupportedException is thrown when 
                                      .IsMaxLength has been set to true but the attribute being processed is a subclass of the MaxLengthAttribute
                                      
            Note that this convention will not add any new validation attributes. If the user configured a property but the property
            was not decorated with any of the corresponding validation attributes it will stay intact. 
            If the validation attribute has more properties only the ones specified above will be changed. Other properties must not change.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Validation.DataAnnotationConfigurationOverridesConvention.System#Data#Entity#ModelConfiguration#Conventions#Edm#IEdmConvention{System#Data#Edm#EdmEntityType}#Apply(System.Data.Edm.EdmEntityType,System.Data.Edm.EdmModel)">
            <summary>
            Applies the convention on primitive properties declared on an entity type. 
            </summary>
            <param name="entityType">Entity type on whose primitive properties the convention will be applied.</param>
            <param name="model">Model - not used.</param>
        </member>
        <member name="M:System.Data.Entity.Validation.DataAnnotationConfigurationOverridesConvention.System#Data#Entity#ModelConfiguration#Conventions#Edm#IEdmConvention{System#Data#Edm#EdmComplexType}#Apply(System.Data.Edm.EdmComplexType,System.Data.Edm.EdmModel)">
            <summary>
            Applies the convention on primitive properties declared on a complex type. 
            </summary>
            <param name="complexType">Complex type on whose primitive properties the convention will be applied.</param>
            <param name="model">Model - not used.</param>
        </member>
        <member name="M:System.Data.Entity.Validation.DataAnnotationConfigurationOverridesConvention.ApplyConfiguredValidationOverrides(System.Collections.Generic.IEnumerable{System.Data.Edm.EdmProperty})">
            <summary>
            Applies the convention on the provided <paramref name="properties"/>.
            </summary>
            <param name="properties">Properties the convention will be applied on.</param>
        </member>
        <member name="M:System.Data.Entity.Validation.DataAnnotationConfigurationOverridesConvention.OverrideValidationAttributesPerFacet(System.Data.Edm.EdmProperty)">
            <summary>
            Updates validation attributes according to the property facet values.
            </summary>
            <param name="property">Property to override validation attributes for.</param>
        </member>
        <member name="M:System.Data.Entity.Validation.DataAnnotationConfigurationOverridesConvention.UpdateStringLengthAttribute(System.Data.Edm.EdmPrimitiveTypeFacets,System.Collections.Generic.IList{System.Attribute},System.Int32)">
            <summary>
            Updates or removes StringLengthAttribute based on facets of the property.
            - if .IsMaxLength is set to true the attribute will be removed or a NotSupportedException will be thrown
              if the .MinimumLength has been specified or the attribute has been derived from the StringLengthAttribute
              class
            - if MaxLength has been set the attribute will be replaced with a new instance of StringLengthAttribute
              created based on the original attribute and the value of .MaxLength facet. A NotSupportedException will 
              be thrown if the original attribute is a subclass of the StringLengthAttribute class.
            </summary>
            <param name="facets">Property facets.</param>
            <param name="clrAttributes">A list of clr attributes.</param>
            <param name="attrIdx">Index of the attribute being processed.</param>
        </member>
        <member name="M:System.Data.Entity.Validation.DataAnnotationConfigurationOverridesConvention.CreateUpdatedStringLengthAttribute(System.ComponentModel.DataAnnotations.StringLengthAttribute,System.Int32)">
            <summary>
            Creates a new instance of StringLengthAttribute by using new maximum length and an instance of the StringLengthAttribute class.
            </summary>
            <param name="originalStringLengthAttr">An instance of the StringLengthAttribute class used to copy properties from.</param>
            <param name="newMaximumLength">New value of the MaximumLength property.</param>
            <returns>A new instance of the StringLenghtAttribute class with the MaximumLength property value set to <paramref name="newMaximumLength"/>
            and values of all other properties copied from <paramref name="originalStringLengthAttr"/>.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Validation.DataAnnotationConfigurationOverridesConvention.UpdateMaxLengthAttribute(System.Data.Edm.EdmPrimitiveTypeFacets,System.Collections.Generic.IList{System.Attribute},System.Int32)">
            <summary>
            Updates or removes MaxLength attribute.
            - if .IsMaxLength is set to true the attribute will be removed or a NotSupportedException will be thrown
              if the attribute has been derived from the MaxLengthAttribute class
            - if MaxLength has been set the Length property will be updated with MaxLength value
            </summary>
            <param name="facets">Property facets.</param>
            <param name="clrAttributes">A list of clr attributes.</param>
            <param name="attrIdx">Index of the attribute being processed.</param>
        </member>
        <member name="T:System.Data.Entity.Validation.DbEntityValidationException">
            <summary>
            Exception thrown from <see cref="M:System.Data.Entity.DbContext.SaveChanges"/> when validating entities fails.
            </summary>    
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor">
            <summary>
            Initializes a new instance of DbEntityValidationException
            </summary>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of DbEntityValidationException
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult})">
            <summary>
            Initializes a new instance of DbEntityValidationException
            </summary>
            <param name="message">The exception message.</param>
            <param name="entityValidationResults">Validation results.</param>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of DbEntityValidationException
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult},System.Exception)">
            <summary>
            Initializes a new instance of DbEntityValidationException
            </summary>
            <param name="message">The exception message.</param>
            <param name="entityValidationResults">Validation results.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationException.SubscribeToSerializeObjectState">
            <summary>
            Subscribes the SerializeObjectState event.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Validation.DbEntityValidationException.EntityValidationErrors">
            <summary>
            Validation results.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Validation.DbEntityValidationException.DbEntityValidationExceptionState">
            <summary>
            Holds exception state that will be serialized when the exception is serialized.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Validation.DbEntityValidationException.DbEntityValidationExceptionState._entityValidationResults">
            <summary>
            Validation results.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationException.DbEntityValidationExceptionState.CompleteDeserialization(System.Object)">
            <summary>
            Completes the deserialization.
            </summary>
            <param name="deserialized">The deserialized object.</param>
        </member>
        <member name="P:System.Data.Entity.Validation.DbEntityValidationException.DbEntityValidationExceptionState.EntityValidationErrors">
            <summary>
            Validation results.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Validation.DbEntityValidationResult">
            <summary>
            Represents validation results for single entity.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Validation.DbEntityValidationResult._entry">
            <summary>
            Entity entry the results applies to. Never null.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Validation.DbEntityValidationResult._validationErrors">
            <summary>
            List of <see cref="T:System.Data.Entity.Validation.DbValidationError"/> instances. Never null. Can be empty meaning the entity is valid.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationResult.#ctor(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbValidationError})">
            <summary>
            Creates an instance of <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult"/> class.
            </summary>
            <param name="entry">
            Entity entry the results applies to. Never null.
            </param>
            <param name="validationErrors">
            List of <see cref="T:System.Data.Entity.Validation.DbValidationError"/> instances. Never null. Can be empty meaning the entity is valid.
            </param>
        </member>
        <member name="M:System.Data.Entity.Validation.DbEntityValidationResult.#ctor(System.Data.Entity.Internal.InternalEntityEntry,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbValidationError})">
            <summary>
            Creates an instance of <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult"/> class.
            </summary>
            <param name="entry">
            Entity entry the results applies to. Never null.
            </param>
            <param name="validationErrors">
            List of <see cref="T:System.Data.Entity.Validation.DbValidationError"/> instances. Never null. Can be empty meaning the entity is valid.
            </param>
        </member>
        <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.Entry">
            <summary>
            Gets an instance of <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry"/> the results applies to.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.ValidationErrors">
            <summary>
            Gets validation errors. Never null.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.IsValid">
            <summary>
            Gets an indicator if the entity is valid.
            </summary>
        </member>
        <member name="T:System.Data.Entity.Validation.DbValidationError">
            <summary>
            Validation error. Can be either entity or property level validation error.
            </summary>
        </member>
        <member name="F:System.Data.Entity.Validation.DbValidationError._propertyName">
            <summary>
            Name of the invalid property. Can be null (e.g. for entity level validations)
            </summary>
        </member>
        <member name="F:System.Data.Entity.Validation.DbValidationError._errorMessage">
            <summary>
            Validation error message.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Validation.DbValidationError.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:System.Data.Entity.Validation.DbValidationError"/>.
            </summary>
            <param name="propertyName">Name of the invalid property. Can be null.</param>
            <param name="errorMessage">Validation error message. Can be null.</param>
        </member>
        <member name="P:System.Data.Entity.Validation.DbValidationError.PropertyName">
            <summary>
            Gets name of the invalid property.
            </summary>
        </member>
        <member name="P:System.Data.Entity.Validation.DbValidationError.ErrorMessage">
            <summary>
            Gets validation error message.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Resources.Strings">
            <summary>
               Strongly-typed and parameterized string resources.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Resources.Strings.MaxLengthAttribute_ValidationError(System.Object,System.Object)">
            <summary>
            A string like "The field {0} must be a string or array type with a maximum length of '{1}'."
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Resources.Strings.MinLengthAttribute_ValidationError(System.Object,System.Object)">
            <summary>
            A string like "The field {0} must be a string or array type with a minimum length of '{1}'."
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Resources.Strings.ArgumentIsNullOrWhitespace(System.Object)">
            <summary>
            A string like "The argument '{0}' cannot be null, empty or contain only white space."
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.Strings.MaxLengthAttribute_InvalidMaxLength">
            <summary>
            A string like "MaxLengthAttribute must have a Length value that is greater than zero. Use the MaxLengthAttribute() constructor to indicate that the string or array can have the maximum allowable length."
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Resources.Strings.MinLengthAttribute_InvalidMinLength">
            <summary>
            A string like "MinLengthAttribute must have a Length value that is zero or greater."
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Resources.Error">
            <summary>
               Strongly-typed and parameterized exception factory.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Resources.Error.MaxLengthAttribute_InvalidMaxLength">
            <summary>
            InvalidOperationException with message like "MaxLengthAttribute must have a Length value that is greater than zero. Use the MaxLengthAttribute() constructor to indicate that the string or array can have the maximum allowable length."
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Resources.Error.MinLengthAttribute_InvalidMinLength">
            <summary>
            InvalidOperationException with message like "MinLengthAttribute must have a Length value that is zero or greater."
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Resources.Error.ArgumentIsNullOrWhitespace(System.Object)">
            <summary>
            ArgumentException with message like "The argument '{0}' cannot be null, empty or contain only white space."
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Resources.Error.ArgumentNull(System.String)">
            <summary>
            The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Resources.Error.ArgumentOutOfRange(System.String)">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Resources.Error.NotImplemented">
            <summary>
            The exception that is thrown when the author has yet to implement the logic at this point in the program. This can act as an exception based TODO tag.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Resources.Error.NotSupported">
            <summary>
            The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality. 
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ColumnAttribute">
            <summary>
              Annotates a CLR property with associated database column metadata.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ColumnAttribute.Name">
            <summary>
              The column name associated with the target property.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ColumnAttribute.Order">
            <summary>
              The zero-based column order associated with the target property.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ColumnAttribute.TypeName">
            <summary>
              The column type name associated with the target property.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute">
            <summary>
              Validation attribute to assert a string or array property, field or parameter does not exceed a maximum length
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MaxLengthAttribute.IsValid(System.Object)">
            <summary>
              Override of <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)"/>
            </summary>
            <remarks>
              This method returns <c>true</c> if the <paramref name="value"/> is null.  
              It is assumed the <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> is used if the value may not be null.
            </remarks>
            <param name="value">The value to test.</param>
            <returns><c>true</c> if the value is null or less than or equal to the set maximum length</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MaxLengthAttribute.FormatErrorMessage(System.String)">
            <summary>
              Override of <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)"/>
            </summary>
            <param name="name">The name to include in the formatted string</param>
            <returns>A localized string to describe the maximum acceptable length</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MaxLengthAttribute.EnsureLegalLengths">
            <summary>
              Checks that Length has a legal value.  Throws InvalidOperationException if not.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.MaxLengthAttribute.Length">
            <summary>
              Gets or sets the maximum acceptable length of the array property
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.MinLengthAttribute">
            <summary>
              Validation attribute to assert a string or array property, field or parameter is longer than a minimum length
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MinLengthAttribute.IsValid(System.Object)">
            <summary>
              Override of <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)"/>
            </summary>
            <remarks>
              This method returns <c>true</c> if the <paramref name="value"/> is null.  
              It is assumed the <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> is used if the value may not be null.
            </remarks>
            <param name="value">The value to test.</param>
            <returns><c>true</c> if the value is null or less than the set minimum length</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MinLengthAttribute.FormatErrorMessage(System.String)">
            <summary>
              Override of <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)"/>
            </summary>
            <param name="name">The name to include in the formatted string</param>
            <returns>A localized string to describe the minimum acceptable length</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MinLengthAttribute.EnsureLegalLengths">
            <summary>
              Checks that Length has a legal value.  Throws InvalidOperationException if not.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.MinLengthAttribute.Length">
            <summary>
              Gets the minimum acceptable length of the array property
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute">
            <summary>
              Annotates a CLR property with an associated database generation option.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute.DatabaseGenerationOption">
            <summary>
              Determines how the associated property value will be
              generated by the underlying database.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.NotMappedAttribute">
            <summary>
              Designates that the class or property should be excluded from database mapping.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ComplexTypeAttribute">
            <summary>
              Designates that the class is inlined within a containing class, such as with a complex or value type.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.TableAttribute">
            <summary>
              Annotates a CLR type with associated database table metadata.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.TableAttribute.TableName">
            <summary>
              The table name associated with the target class.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.TableAttribute.SchemaName">
            <summary>
              The schema name associated with the target class.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ResourceProviderDescriptionAttribute.#ctor(System.String)">
            <summary>
                Constructs a new sys description.
            </summary>
            <param name='description'>
                description text.
            </param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ResourceProviderDescriptionAttribute.Description">
            <summary>
                Retrieves the description text.
            </summary>
            <returns>
                description
            </returns>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ResourceProvider">
             <summary>
                AutoGenerated resource class. Usage:
            
                    string s = ResourceProvider.GetString(ResourceProvider.MyIdenfitier);
             </summary>
        </member>
        <member name="M:System.Data.Entity.ModelConfiguration.Resources.ResourceProviderDescriptionAttribute.#ctor(System.String)">
            <summary>
                Constructs a new sys description.
            </summary>
            <param name='description'>
                description text.
            </param>
        </member>
        <member name="P:System.Data.Entity.ModelConfiguration.Resources.ResourceProviderDescriptionAttribute.Description">
            <summary>
                Retrieves the description text.
            </summary>
            <returns>
                description
            </returns>
        </member>
        <member name="T:System.Data.Entity.ModelConfiguration.Resources.ResourceProvider">
             <summary>
                AutoGenerated resource class. Usage:
            
                    string s = ResourceProvider.GetString(ResourceProvider.MyIdenfitier);
             </summary>
        </member>
        <member name="M:System.Data.Entity.Resources.ResourceProviderDescriptionAttribute.#ctor(System.String)">
            <summary>
                Constructs a new sys description.
            </summary>
            <param name='description'>
                description text.
            </param>
        </member>
        <member name="P:System.Data.Entity.Resources.ResourceProviderDescriptionAttribute.Description">
            <summary>
                Retrieves the description text.
            </summary>
            <returns>
                description
            </returns>
        </member>
        <member name="T:System.Data.Entity.Resources.ResourceProvider">
             <summary>
                AutoGenerated resource class. Usage:
            
                    string s = ResourceProvider.GetString(ResourceProvider.MyIdenfitier);
             </summary>
        </member>
        <member name="M:System.Data.Edm.EntityResDescriptionAttribute.#ctor(System.String)">
            <summary>
                Constructs a new sys description.
            </summary>
            <param name='description'>
                description text.
            </param>
        </member>
        <member name="P:System.Data.Edm.EntityResDescriptionAttribute.Description">
            <summary>
                Retrieves the description text.
            </summary>
            <returns>
                description
            </returns>
        </member>
        <member name="T:System.Data.Edm.EntityRes">
             <summary>
                AutoGenerated resource class. Usage:
            
                    string s = EntityRes.GetString(EntityRes.MyIdenfitier);
             </summary>
        </member>
    </members>
</doc>
